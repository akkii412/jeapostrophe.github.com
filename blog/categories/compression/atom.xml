<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Compression | Jay McCarthy]]></title>
  <link href="http://jeapostrophe.github.com/blog/categories/compression/atom.xml" rel="self"/>
  <link href="http://jeapostrophe.github.com/"/>
  <updated>2012-05-28T15:35:53-06:00</updated>
  <id>http://jeapostrophe.github.com/</id>
  <author>
    <name><![CDATA[Jay McCarthy]]></name>
    <email><![CDATA[jay.mccarthy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[An LZ78 Implementation]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/05/22/lz78/"/>
    <updated>2012-05-22T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/05/22/lz78</id>
    <content type="html"><![CDATA[<p>For a long time I’ve known about and relied on the LZ77/78 compression
algorithms. Once when I was in middle school, I told a friend an idea I
had about compression, and the friend—who was in college at the
time—said it sounded exactly like LZ77. I don’t remember what my idea
was, but I do remember that incident.</p>

<p>Despite this long connection, I’d never implemented the algorithm
before. I sought to rectify that situation.</p>

<!-- more -->


<p>First, I read about the algorithm on Wikipedia. The
<a href="https://en.wikipedia.org/wiki/LZ77">article</a> is pretty informative.
I’ll briefly recap it.</p>

<p>As you read through the content to compress, you keep track of a
dictionary of previously seen phrases. Whenever you discover a yet
undiscovered phrase, add it to the dictionary and encode it as the
previously-seen prefix and the new character. Decoding works in reverse.
Since the very first character of the encoded output is necessarily not
in the dictionary, its prefix will be empty and it will establish the
first phrase. As you read the encoding, you maintain the same dictionary
and decode by following the phrase-reference backwards and then emitting
the new character.</p>

<p>For an implementation, the signature of the function is pretty
straight-forward: it takes a character source, which I’ll use an
input-port for, and it returns a list of pairs of the previously seen
reference and the new character.</p>

<p>However, there’s one hitch. If the last phrase of the input is
previously seen, then there will be no right-hand side of the output
pair. You could add a special character to indicate that. I decided to
output just the phrase reference, in that case.</p>

<h1>Compression</h1>

<p>My compression code looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;compress&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">compress</span><span class="err"> </span><span class="nv">ip</span><span class="p">)</span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;next-unseen&gt;</span>                                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">outer-loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">next</span><span class="err"> </span><span class="mi">1</span><span class="err">]</span><span class="p">)</span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="p">(</span><span class="nf">next-unseen</span><span class="err"> </span><span class="nv">next</span><span class="p">)</span>                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">?</span><span class="err"> </span><span class="nv">number?</span><span class="err"> </span><span class="nv">ref</span><span class="p">)</span>                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">stream</span><span class="err"> </span><span class="nv">ref</span><span class="p">)</span><span class="err">]</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">and</span><span class="err"> </span><span class="nv">W</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ref</span><span class="err"> </span><span class="nv">c</span><span class="p">))</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">stream-cons</span><span class="err"> </span><span class="nv">W</span><span class="err"> </span><span class="p">(</span><span class="nf">outer-loop</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">next</span><span class="p">)))</span><span class="err">]</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The main work all happens in next-unseen which takes the reference that
the next phrase will be given and either returns a number, for the final
reference in the stream, or a cons of the last reference and the new
character, which is added to the output and then the compression
continues. The dictionary itself is totally maintained by the
next-unseen function.</p>

<p>next-unseen runs in a loop keeping track of the current dictionary and
prefix phrase reference. At each iteration it reads a byte from the
input. There are then three cases:</p>

<ol>
<li><p>The input is empty, in which case, the last seen phrase reference is
returned.</p></li>
<li><p>The current dictionary has a reference starting with that byte, in
which case, the prefix phrase is extended. This means the loop is
continued with a new dictionary and a new prefix phrase. For example, if
the current phrase is A, named 1, and the next input is B, and AB is
previously seen and named 2, then the dictionary will have a mapping in
it from B to a new dictionary and the number 2, which are used in the
next iteration of the loop.</p></li>
<li><p>The current dictionary does <em>not</em> have a reference for this byte,
meaning that we’ve encoded a new phrase. In that case, we can add this
byte to current dictionary and allocate a new name for it, then return
that new name.</p></li>
</ol>


<p>Here’s that in code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;next-unseen&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">top-dict</span><span class="err"> </span><span class="p">(</span><span class="nf">make-hasheq</span><span class="p">))</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">next-unseen</span><span class="err"> </span><span class="nv">this</span><span class="p">)</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">dict</span><span class="err"> </span><span class="nv">top-dict</span><span class="err">]</span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">             [</span><span class="nv">last</span><span class="err"> </span><span class="mi">0</span><span class="err">]</span><span class="p">)</span>                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">b</span><span class="err"> </span><span class="p">(</span><span class="nf">read-byte</span><span class="err"> </span><span class="nv">ip</span><span class="p">))</span>                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="k">cond </span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">eof-object?</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span>                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="nv">last</span><span class="err">]</span>                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">dict</span><span class="err"> </span><span class="nv">b</span><span class="err"> </span><span class="no">#f</span><span class="p">)</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="k">=&gt; </span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">next</span><span class="p">)</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="p">(</span><span class="nf">cdr</span><span class="err"> </span><span class="nv">next</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">car</span><span class="err"> </span><span class="nv">next</span><span class="p">)))</span><span class="err">]</span>          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      [</span><span class="k">else </span>                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">hash-set!</span><span class="err"> </span><span class="nv">dict</span><span class="err"> </span><span class="nv">b</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="p">(</span><span class="nf">make-hasheq</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">last</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err">]</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This code uses a similar dictionary structure to my Boggle solver, from
the previous blog post. However, in this code, it’s mutable because the
dictionary is extended as we go and it would be tedious to thread the
state.</p>

<p>I’m kind of amazed that the compression can fit in 23 lines!</p>

<p>Here’s a little example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;compress-example&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">some-input</span><span class="err"> </span><span class="o">#</span><span class="s">&quot;AABABBBABAABABBBABBABB&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">compressed</span>                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">compress</span>                                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">open-input-bytes</span><span class="err"> </span><span class="nv">some-input</span><span class="p">)))</span>         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">A</span><span class="err"> </span><span class="p">(</span><span class="nf">char-&gt;integer</span><span class="err"> </span><span class="sc">#\A</span><span class="p">))</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">B</span><span class="err"> </span><span class="p">(</span><span class="nf">char-&gt;integer</span><span class="err"> </span><span class="sc">#\B</span><span class="p">))</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span>                              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">stream-&gt;list</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">compressed</span><span class="p">)</span>                              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="nv">A</span><span class="p">)</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="nv">A</span><span class="p">)</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">5</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">4</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="nv">A</span><span class="p">)</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="mi">7</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In this example, the final dictionary looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;compress-example-dict&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">hasheq</span>                                                                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">B</span>                                                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">4</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="nv">B</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">7</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="p">))))</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">A</span>                                                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">1</span>                                                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="nv">B</span>                                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">               </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">2</span>                                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                     </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="nv">B</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="nv">A</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">8</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="p">))))</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                             </span><span class="nv">A</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">5</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="nv">B</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">6</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="p">)))))))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>Decompression</h1>

<p>Naturally, decompression is dual to compression. It will also maintain a
dictionary, but it will have the opposite information: rather than
mapping characters to references and suffixes, it will map references to
characters and prefixes.</p>

<p>The code is considerably simpler because there is a single dictionary
(rather than a structured one) and the decompression is a fold over the
input stream, rather than a more generative loop.</p>

<p>Here’s the core of it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;decompress&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">decompress</span><span class="err"> </span><span class="nv">str</span><span class="p">)</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">dict</span><span class="err"> </span><span class="p">(</span><span class="nf">make-hasheq</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;output-from-dict&gt;</span>        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">next</span><span class="err"> </span><span class="mi">1</span><span class="err">]</span><span class="p">)</span>      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">p</span><span class="err"> </span><span class="p">(</span><span class="nf">in-stream</span><span class="err"> </span><span class="nv">str</span><span class="p">)</span><span class="err">]</span><span class="p">)</span> <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">p</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ref</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span>         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">hash-set!</span><span class="err"> </span><span class="nv">dict</span><span class="err"> </span><span class="nv">next</span><span class="err"> </span><span class="nv">p</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">output-from-dict</span><span class="err"> </span><span class="nv">next</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">next</span><span class="p">)</span><span class="err">]</span>         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">?</span><span class="err"> </span><span class="nv">number?</span><span class="err"> </span><span class="nv">ref</span><span class="p">)</span>      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">output-from-dict</span><span class="err"> </span><span class="nv">ref</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="nv">next</span><span class="err">]</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Basically, each element of the stream is either a new dictionary entry,
in which case we remember it and output it, or it’s just a reference and
we output without remembering. Pretty simple. (We could use a functional
hash, but there’s no benefit here.)</p>

<p>When you get a reference and need to output it, it’s also quite easy:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;output-from-dict&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">output-from-dict</span><span class="err"> </span><span class="nv">this</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">dict</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="no">#f</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    [</span><span class="no">#f</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">void</span><span class="p">)</span><span class="err">]</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">last</span><span class="err"> </span><span class="nv">this-b</span><span class="p">)</span>       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">output-from-dict</span><span class="err"> </span><span class="nv">last</span><span class="p">)</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">write-byte</span><span class="err"> </span><span class="nv">this-b</span><span class="p">)</span><span class="err">]</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Either the reference isn’t in the dictionary, so you stop, or it is, so
you output its prefix and then the byte associated with it. We use the
stack as our data-structure to keep track of bytes to write, because the
dictionary stores the prefixes, not the suffixes.</p>

<p>The whole decompression is just 20 lines. Wow!</p>

<p>We can check that the output is the same as the input:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;decompress-example&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">check-equal?</span>              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">with-output-to-bytes</span>     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">decompress</span><span class="err"> </span><span class="nv">compressed</span><span class="p">)))</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">some-input</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In the example, the dictionary is:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;decompress-example-dict&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="mi">8</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="nv">A</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">7</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">4</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">6</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">5</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">5</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="nv">A</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">4</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">3</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">2</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">1</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="nv">A</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And that’s it!</p>

<h1>Further work</h1>

<p>One strange thing about this implementation is that the output is just a
stream of pairs rather than bytes. The easiest way to encode it as bytes
is to write each pair as two bytes. That’s not totally correct, however,
because the number of prefixes may exceed the number of bytes, so you’ll
need to use the length of the input log-2 for the number of bits per
reference. You can do a little bit better by having the decoder keep
track of this number during decoding and gradually use more bits.</p>

<p>It is interesting to think of what kinds of input this algorithm fails
to compress. It’s those without common prefixes. For example, if you had
all the bytes from 0 to 255, then the output would be double (plus one!
Why?) the input. If you then added each byte to every other byte, then
you’d double again.</p>

<p>Another surprising thing about the algorithm is that the dictionary is
just as long as the compressed output because the compressed output IS
the dictionary. The compression algorithm is inherently non-random
access because you need to read it linearly to know the context of the
prefix references.</p>

<p>This was a very fun thing to implement. I hope you enjoy it!</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&amp;lt</span><span class="c1">;*&gt; ::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">rackunit</span>      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/list</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/match</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/stream</span> <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/port</span><span class="p">)</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;compress&gt;</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;compress-example&gt;</span>     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;compress-example-dict&gt;&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;decompress&gt;</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;decompress-example&gt;</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;decompress-example-dict&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="/downloads/code/2012-05-22-lz78.rkt">Download</a></p>
]]></content>
  </entry>
  
</feed>
