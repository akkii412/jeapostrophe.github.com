<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Puzzles | Jay McCarthy]]></title>
  <link href="http://jeapostrophe.github.com/blog/categories/puzzles/atom.xml" rel="self"/>
  <link href="http://jeapostrophe.github.com/"/>
  <updated>2012-05-07T10:12:51-06:00</updated>
  <id>http://jeapostrophe.github.com/</id>
  <author>
    <name><![CDATA[Jay McCarthy]]></name>
    <email><![CDATA[jay.mccarthy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quilt Colouring]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/05/07/quilt-colouring/"/>
    <updated>2012-05-07T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/05/07/quilt-colouring</id>
    <content type="html"><![CDATA[<p>I got this email from my wife:</p>

<blockquote><p>Honey,</p>

<p>I’m making a quilt with 25 blocks. Each block has four colors on it.
The colors I’m using are red, pink, green, yellow, blue, and green
plaid.</p>

<p>I don’t want to duplicate colors in a block or in the corners and I
don’t want pink and red in the same corner (but pink and red in a block
is okay.) Similarly with green and green plaid.</p></blockquote>

<p>She’s a <a href="http://icme.stanford.edu/index.php">mathematician</a>, so she
knows about the <a href="https://en.wikipedia.org/wiki/Four_color_theorem">Four color
theorem</a>. But she
wasn’t sure if the graph was planar, and didn’t want to lay it out
manually anyways.</p>

<p>Let’s work through the solution.</p>

<!-- more -->


<p>The first thing I wanted to do was see the structure of the quilt as a
graph. Naturally, <a href="http://graphviz.org/">Graphviz</a> is a natural choice.
But, first I’d have to represent the graph in some way. I decided to go
with a 5x5 matrix of blocks where each block was a structure of the four
corner colors. The values of the nodes won’t really matter, so I’m just
using unique symbols.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;the-nodes&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">block</span><span class="err"> </span><span class="p">(</span><span class="nf">ul</span><span class="err"> </span><span class="nv">ur</span><span class="err"> </span><span class="nv">ll</span><span class="err"> </span><span class="nv">lr</span><span class="p">))</span>      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">make-block</span><span class="p">)</span>              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">block</span><span class="err"> </span><span class="p">(</span><span class="nf">gensym</span><span class="err"> </span><span class="ss">&#39;ul</span><span class="p">)</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">gensym</span><span class="err"> </span><span class="ss">&#39;ur</span><span class="p">)</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">gensym</span><span class="err"> </span><span class="ss">&#39;ll</span><span class="p">)</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">gensym</span><span class="err"> </span><span class="ss">&#39;lr</span><span class="p">)))</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">quilt</span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for*/hash</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">x</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err">]</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">              [</span><span class="nv">y</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">values</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">y</span><span class="p">)</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                     </span><span class="p">(</span><span class="nf">make-block</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is, of course, just a representation of the nodes. A graph also has
edges. I decided to make another list of those. The first step is to
turn a block into a list of edges. That’s pretty trivial:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;block-to-edges&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">block-&gt;edges</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-lambda</span>         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">block</span><span class="err"> </span><span class="nv">ul</span><span class="err"> </span><span class="nv">ur</span><span class="err"> </span><span class="nv">ll</span><span class="err"> </span><span class="nv">lr</span><span class="p">)</span> <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ul</span><span class="err"> </span><span class="nv">ur</span><span class="p">)</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ul</span><span class="err"> </span><span class="nv">ll</span><span class="p">)</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ul</span><span class="err"> </span><span class="nv">lr</span><span class="p">)</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ur</span><span class="err"> </span><span class="nv">ul</span><span class="p">)</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ur</span><span class="err"> </span><span class="nv">ll</span><span class="p">)</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ur</span><span class="err"> </span><span class="nv">lr</span><span class="p">)</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ll</span><span class="err"> </span><span class="nv">ul</span><span class="p">)</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ll</span><span class="err"> </span><span class="nv">ur</span><span class="p">)</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ll</span><span class="err"> </span><span class="nv">lr</span><span class="p">)</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">lr</span><span class="err"> </span><span class="nv">ul</span><span class="p">)</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">lr</span><span class="err"> </span><span class="nv">ur</span><span class="p">)</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">lr</span><span class="err"> </span><span class="nv">ll</span><span class="p">))</span><span class="err">]</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If we loop through each of the blocks and call this, appending the
results together, we’d get a bunch of disconnected sub-graphs. We’d just
need to add in the block-crossing (i.e. corner) edges. The structure
will look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;the-edges&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="nv">&lt;block-to-edges&gt;</span>              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">edges</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nb">apply </span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">append</span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">for*/list</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">x</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">               [</span><span class="nv">y</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="nv">&lt;edges-per-block&gt;</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I briefly thought about making a new for form that did the appending as
it went, rather than using the (apply append ....) pattern, but decided
it wasn’t worth the time right here.</p>

<p>The inner part of the loop is a little bit complicated though, at least
if we want to do it elegantly. The problem is that on the edges there
aren’t adjacent blocks, so we don’t want to try connect them with the
block under consideration. I use a cute little macro that sets up an
exception handler that will just return an empty list if an inner
hash-ref fails.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;edges-per-block&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define-syntax-rule</span><span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="nv">e</span><span class="p">)</span>                                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">with-handlers</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">eq?</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="ss">&#39;bot</span><span class="p">))</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                   </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="nv">empty</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="nv">e</span><span class="p">))</span>                                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">y</span><span class="p">)</span>                                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">quilt</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">y</span><span class="p">)</span>                                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">raise</span><span class="err"> </span><span class="ss">&#39;bot</span><span class="p">))))</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">b</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">y</span><span class="p">))</span>                                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">append </span>                                                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ul</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-lr</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ul</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ur</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ul</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ll</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">0</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span>                                                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ur</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-lr</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">0</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ur</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ll</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ur</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ul</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span>                                                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ll</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-lr</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ll</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ur</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ll</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ul</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">0</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span>                                                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-lr</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ll</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-lr</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ul</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-lr</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ur</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">0</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span>                                                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">block-&gt;edges</span><span class="err"> </span><span class="nv">b</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I thought about working out which edges I didn’t need to write down
because the graph is undirected, but figure that since the size of the
graph is so small it doesn’t really matter if I have a few extra edges.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;print-it&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define-runtime-path</span><span class="err"> </span><span class="nv">the-graph-path</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="s">&quot;tmp/2012-05-07-quilt-colouring.graph.dot&quot;</span><span class="p">)</span> <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-runtime-path</span><span class="err"> </span><span class="nv">the-graph-png-path</span>       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="s">&quot;tmp/2012-05-07-quilt-colouring.graph.png&quot;</span><span class="p">)</span> <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">with-output-to-file </span>                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="nv">the-graph-path</span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="o">#</span><span class="nv">:exists</span><span class="err"> </span><span class="ss">&#39;replace</span>                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;graph {\n&quot;</span><span class="p">)</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">e</span><span class="err"> </span><span class="p">(</span><span class="nf">in-list</span><span class="err"> </span><span class="nv">edges</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">match-define</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">u</span><span class="err"> </span><span class="nv">v</span><span class="p">)</span><span class="err"> </span><span class="nv">e</span><span class="p">)</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;\t~a -- ~a;\n&quot;</span><span class="err"> </span><span class="nv">u</span><span class="err"> </span><span class="nv">v</span><span class="p">))</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;}\n&quot;</span><span class="p">)))</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">unless</span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">system*</span><span class="err"> </span><span class="p">(</span><span class="nf">find-executable-path</span><span class="err"> </span><span class="s">&quot;dot&quot;</span><span class="p">)</span>     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">             </span><span class="s">&quot;-Tpng&quot;</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">             </span><span class="nv">the-graph-path</span>                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">format</span><span class="err"> </span><span class="s">&quot;-o~a&quot;</span><span class="err"> </span><span class="nv">the-graph-png-path</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;quilt-colouring</span><span class="err"> </span><span class="s">&quot;dot failed :(&quot;</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can see the dot file here: <a href="/downloads/code/tmp/2012-05-07-quilt-colouring.graph.dot">dot
file</a>, but
unfortunately the picture wasn’t very helpful. You can see it here:
<a href="/downloads/code/tmp/2012-05-07-quilt-colouring.graph.png">graph PNG</a>.</p>

<p>Now that I have the edges, I can create an adjacency list really simply:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;the-graph&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">graph</span>                                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">graph</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">e</span><span class="err"> </span><span class="p">(</span><span class="nf">in-list</span><span class="err"> </span><span class="nv">edges</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match-define</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">u</span><span class="err"> </span><span class="nv">v</span><span class="p">)</span><span class="err"> </span><span class="nv">e</span><span class="p">)</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">hash-update</span><span class="err"> </span><span class="nv">graph</span><span class="err"> </span><span class="nv">u</span><span class="err"> </span><span class="p">(</span><span class="nf">curry</span><span class="err"> </span><span class="nv">list*</span><span class="err"> </span><span class="nv">v</span><span class="p">)</span><span class="err"> </span><span class="nv">empty</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now that I have graph structure, it’s a simple matter of selecting
colors. I decided to write it as an exhaustive greedy search, with
randomness (for artistic reasons). For every node u connected to nodes
vs, figure out what the options are, shuffle them, and try them in
order:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;colour-per-node&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">vs-colours</span>                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">append-map</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">v</span><span class="p">)</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">colouring</span><span class="err"> </span><span class="nv">v</span><span class="err"> </span><span class="nv">empty</span><span class="p">))</span>
</span><span class='line'>  <span class="err">              </span><span class="nv">vs</span><span class="p">))</span>                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">u-options</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">shuffle</span><span class="err"> </span><span class="p">(</span><span class="nf">remq*</span><span class="err"> </span><span class="nv">vs-colours</span><span class="err"> </span><span class="nv">colours</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I decided to have the colouring be a hash table where the values where
singleton lists (to facilitate the call to append-map.)</p>

<p>The interesting thing comes from properly handling back-tracking in case
a choice leads to an empty option list eventually. In addition to
folding the colouring, I also have a fail procedure that goes back.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;colouring&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">&lt;em&gt;backtracks&lt;/em&gt;</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span>                                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-values</span><span class="err"> </span><span class="p">(</span><span class="nf">colouring</span><span class="err"> </span><span class="nv">fail</span><span class="p">)</span>                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">colouring</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="p">)</span><span class="err">]</span>                                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">             [</span><span class="nv">fail</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;quilt-colouring</span><span class="err"> </span><span class="s">&quot;Can&#39;t colour :(&quot;</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="p">(</span><span class="nf">u</span><span class="err"> </span><span class="nv">vs</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">in-hash</span><span class="err"> </span><span class="nv">graph</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>                                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                                                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="nv">&lt;colour-per-node&gt;</span>                                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                                                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">let/ec</span><span class="err"> </span><span class="nv">return</span>                                                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">option</span><span class="err"> </span><span class="p">(</span><span class="nf">in-list</span><span class="err"> </span><span class="nv">u-options</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">let/cc</span><span class="err"> </span><span class="nv">try-another-option</span>                                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">return</span>                                                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">           </span><span class="p">(</span><span class="nf">hash-set</span><span class="err"> </span><span class="nv">colouring</span><span class="err"> </span><span class="nv">u</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="nv">option</span><span class="p">))</span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">           </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                                                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">try-another-option</span><span class="p">)))))</span>                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">&lt;em&gt;backtracks&lt;/em&gt;</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">&lt;em&gt;backtracks&lt;/em&gt;</span><span class="p">))</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">fail</span><span class="p">))))</span>                                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;em&gt;backtracks&lt;/em&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>For the heck of it, I decided to keep track of how many back-trackings
happened. While the use of continuations to implement back-tracking is
definitely neat, unfortunately I’ve never run it and observed any
failures. (Unless I reduce the number of colours to three, in which case
it fails.)</p>

<p>Now that I have a colouring, how can I show it to my wife? Well, I’ll
just render it out. Racket’s 2htdp/image library supports an algebra of
images that will make this really simple.</p>

<p>First, we’ll render each individual square in the quilt as a square,
assuming we have a way of turning our colours into colors that Racket
supports.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;render-square&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">render-square</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">n</span><span class="p">)</span>                                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">square</span><span class="err"> </span><span class="mi">10</span><span class="err"> </span><span class="ss">&#39;solid</span>                                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">quilt-colour-&gt;racket-color</span><span class="err"> </span><span class="p">(</span><span class="nf">first</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">n</span><span class="p">)))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then, we’ll assemble each block (and give it a nice thick outline):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;render-block&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">render-block</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-define</span><span class="err"> </span><span class="p">(</span><span class="nf">block</span><span class="err"> </span><span class="nv">ul</span><span class="err"> </span><span class="nv">ur</span><span class="err"> </span><span class="nv">ll</span><span class="err"> </span><span class="nv">lr</span><span class="p">)</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">overlay</span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">above</span><span class="err"> </span><span class="p">(</span><span class="nf">beside</span><span class="err"> </span><span class="p">(</span><span class="nf">render-square</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">ul</span><span class="p">)</span><span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                  </span><span class="p">(</span><span class="nf">render-square</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">ur</span><span class="p">))</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">beside</span><span class="err"> </span><span class="p">(</span><span class="nf">render-square</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">ll</span><span class="p">)</span><span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                  </span><span class="p">(</span><span class="nf">render-square</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">lr</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">square</span><span class="err"> </span><span class="mi">23</span><span class="err"> </span><span class="ss">&#39;solid</span><span class="err"> </span><span class="s">&quot;black&quot;</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finally, we go through and put each block in the right order:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;render-quilt&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">render-quilt</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">quilt</span><span class="p">)</span>                                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for&lt;em&gt;/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">image</span><span class="err"> </span><span class="nv">empty-image</span><span class="err">]</span><span class="p">)</span>                                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">x</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>                                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">above</span><span class="err"> </span><span class="nv">image</span>                                                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">           </span><span class="p">(</span><span class="nf">for&lt;/em&gt;/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">image</span><span class="err"> </span><span class="nv">empty-image</span><span class="err">]</span><span class="p">)</span>                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">               </span><span class="p">(</span><span class="err">[</span><span class="nv">y</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>                                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">beside</span><span class="err"> </span><span class="nv">image</span>                                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                     </span><span class="p">(</span><span class="nf">render-block</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">quilt</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">y</span><span class="p">))))))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then stitch it all together and save it to a file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;render&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define-runtime-path</span><span class="err"> </span><span class="nv">the-png-path</span>       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="s">&quot;tmp/2012-05-07-quilt-colouring.png&quot;</span><span class="p">)</span> <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;render-square&gt;</span>                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;render-block&gt;</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;render-quilt&gt;</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">save-image</span><span class="err"> </span><span class="p">(</span><span class="nf">render-quilt</span><span class="err"> </span><span class="nv">colouring</span><span class="err"> </span><span class="nv">quilt</span><span class="p">)</span>
</span><span class='line'>  <span class="err">            </span><span class="nv">the-png-path</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The final thing is to write the function to translate between our
colours and Racket’s colors. For simplicity, I’ve made a stronger
colouring than my wife wanted. She didn’t want some colours to connect
across corners, but I have treated every color uniformly. Even though
she will use six colours, I’m really only using four and delaying the
selection of which of the two variations of green and red she uses for
the end.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;color-definitions&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">colours</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="o">&#39;</span><span class="p">(</span><span class="nv">red-or-pink</span><span class="err"> </span><span class="nv">green-or-green-plaid</span><span class="err"> </span><span class="nv">yellow</span><span class="err"> </span><span class="nv">blue</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">quilt-colour-&gt;racket-color</span>              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-lambda</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="ss">&#39;green-or-green-plaid</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">zero?</span><span class="err"> </span><span class="p">(</span><span class="nf">random</span><span class="err"> </span><span class="mi">2</span><span class="p">))</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="s">&quot;Green&quot;</span>                                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="s">&quot;DarkGreen&quot;</span><span class="p">)</span><span class="err">]</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="ss">&#39;yellow</span><span class="err"> </span><span class="s">&quot;Yellow&quot;</span><span class="err">]</span>                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="ss">&#39;blue</span><span class="err"> </span><span class="s">&quot;Blue&quot;</span><span class="err">]</span>                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="ss">&#39;red-or-pink</span>                                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">zero?</span><span class="err"> </span><span class="p">(</span><span class="nf">random</span><span class="err"> </span><span class="mi">2</span><span class="p">))</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="s">&quot;Red&quot;</span>                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="s">&quot;DeepPink&quot;</span><span class="p">)</span><span class="err">]</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can see an example colouring:</p>

<p><a href="http://jeapostrophe.github.com/downloads/code/tmp/2012-05-07-quilt-colouring.png"><img
src="http://jeapostrophe.github.com/downloads/code/tmp/2012-05-07-quilt-colouring.png" align="center"
/></a></p>

<p>When she finishes the quilt, I’ll update this post with a picture of
what she went with.</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&amp;lt</span><span class="c1">;*&gt; ::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">racket/list</span>      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/function</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/match</span>     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/system</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/runtime-path</span>
</span><span class='line'>  <span class="err">         </span><span class="mi">2</span><span class="nv">htdp/image</span><span class="p">)</span>     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;color-definitions&gt;</span>       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;the-nodes&gt;</span>               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;the-edges&gt;</span>               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;print-it&gt;</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;the-graph&gt;</span>               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;colouring&gt;</span>               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;render&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="/downloads/code/2012-05-07-quilt-colouring.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Professor Layton and the Last Specter, Puzzle #146]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/05/07/professor-layton-and-the-last-specter-puzzle-146/"/>
    <updated>2012-05-07T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/05/07/professor-layton-and-the-last-specter-puzzle-146</id>
    <content type="html"><![CDATA[<p>This is for <a href="http://tinyurl.com/7yefk76">Puzzle 146</a>. Here is the
puzzle:</p>

<blockquote><p>A bookcase has seven shelves each filled with 10 books of the same
size.</p>

<p>When you choose a book, you must also take the two books above, below,
to the left, and to the right of the one you actually want. If there are
fewer than two books in any of these directions, you cannot choose that
book.</p>

<p>Choosing as many books as possible, how many books will you end up
taking?</p></blockquote>

<!-- more -->


<p>I encoded the bookcase as a hash table in Racket, where the key is the
coordinate of the book and the value is whether the book has been taken.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;bookcase&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">bookcase</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for*/hash</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">shelf</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">7</span><span class="p">)</span><span class="err">]</span>        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">              [</span><span class="nv">book</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">10</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">values</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">shelf</span><span class="err"> </span><span class="nv">book</span><span class="p">)</span><span class="err"> </span><span class="no">#t</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I didn’t know when I wrote it, but I assumed that it would not matter
what order you picked the books in, so I just considered taking them
from left to right, and top to bottom. After consider each book, I would
return the new bookcase, after having removed some books. The number of
books in this bookcase, subtracted from 70, would give me the number
selected:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;selecting&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">final-bookcase</span>          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for*/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">bookcase</span><span class="err"> </span><span class="nv">bookcase</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">shelf</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">7</span><span class="p">)</span><span class="err">]</span>     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       [</span><span class="nv">book</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">10</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="nv">&lt;loop-body&gt;</span><span class="p">))</span>               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="mi">70</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-count</span><span class="err"> </span><span class="nv">final-bookcase</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Inside the loop, it will be convenient to bind an escape continuation to
return early. The actual loop body is divided into three parts. First,
we’ll make sure that the book we’re consider is actually there. Then,
we’ll make sure it has two books in every directions. Finally, we’ll
return the updated bookcase. The code will look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;loop-body&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">let/ec</span><span class="err"> </span><span class="nv">return</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;check-this-book&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;check-others&gt;</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;update-bookcase&gt;</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The first part is really simple: just call our predicate and if it isn’t
there, call the escape continuation to jump past the rest of the code
and leave the bookcase unchanged.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;check-this-book&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">unless</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-has-key?</span><span class="err"> </span><span class="nv">bookcase</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">shelf</span><span class="err"> </span><span class="nv">book</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">return</span><span class="err"> </span><span class="nv">bookcase</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The middle part is the most complicated. Here’s the idea: we’ll loop
over the eight other different books (the two above, below, to the left,
and to the right) and remove them from the bookcase, if they are there.
If any book isn’t there, we’ll return from the outer loop with the
original bookcase, because the conditions aren’t met, using the escape
continuation.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;check-others&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">other-book-offsets</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span>              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">-1</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">-2</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="mi">2</span><span class="p">)</span>              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="mi">-1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="mi">-2</span><span class="p">)))</span>          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">new-bookcase</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for*/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">new-bookcase</span><span class="err"> </span><span class="nv">bookcase</span><span class="err">]</span><span class="p">)</span>     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">diff</span><span class="err"> </span><span class="p">(</span><span class="nf">in-list</span><span class="err"> </span><span class="nv">other-book-offsets</span><span class="p">)</span><span class="err">]</span><span class="p">)</span><span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">new-book</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">shelf</span><span class="err"> </span><span class="p">(</span><span class="nf">car</span><span class="err"> </span><span class="nv">diff</span><span class="p">))</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">book</span><span class="err"> </span><span class="p">(</span><span class="nf">cdr</span><span class="err"> </span><span class="nv">diff</span><span class="p">))))</span>          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-has-key?</span><span class="err"> </span><span class="nv">new-bookcase</span><span class="err"> </span><span class="nv">new-book</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">hash-remove</span><span class="err"> </span><span class="nv">new-bookcase</span><span class="err"> </span><span class="nv">new-book</span><span class="p">)</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">return</span><span class="err"> </span><span class="nv">bookcase</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If the earlier two tests haven’t returned, then when we get to the
third, we’ll know all the right conditions are met, so we can remove the
current book from the bookcase (the one after the other books were
removed):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;update-bookcase&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">hash-remove</span><span class="err"> </span><span class="nv">new-bookcase</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">shelf</span><span class="err"> </span><span class="nv">book</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This technique makes inherent use of functional data-structures, because
the bookcase is not destructively modified during the trial deletions of
the eight books. If it were, then we couldn’t just return the original
bookcase. Instead, we’d have to undo the changes, or do the inner loop
twice: once to check if we should and once to actually remove them.
Either way, we’d be doing about twice as much work.</p>

<p>This program also demonstrates how useful early return, escape
continuations can be. If we didn’t have them, then in the first case,
we’d just have to change the syntactic structure of the program, by
putting the rest of the loop body on the false side of if. In the second
case, however, it would be more complicated, because we’d have to
continue the loop past the point of usefulness and check if it was
successful at the end—maybe seeing how many books were removed or by
keeping a boolean on the side. Either way, escape continuations saved
the day.</p>

<p>In retrospect, I think a good way to solve this would be to think of it
has a packing problem where you have a plus sign where the legs are each
two units and you are trying to fit as many as possible on a 7x10 grid.</p>

<p>Was this faster or slower than doing it the old fashion way...? Who
knows.</p>

<p>Can you work out what the answer is...?</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&amp;lt</span><span class="c1">;*&gt; ::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="nv">&lt;bookcase&gt;</span>
</span><span class='line'>  <span class="nv">&lt;selecting&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="/downloads/code/2012-05-07-professor-layton-and-the-last-specter-puzzle-146.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Professor Layton and the Diabolical Box, Puzzle #132]]></title>
    <link href="http://jeapostrophe.github.com/blog/2011/06/30/professor-layton-and-the-diabolical-box-puzzle-132/"/>
    <updated>2011-06-30T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2011/06/30/professor-layton-and-the-diabolical-box-puzzle-132</id>
    <content type="html"><![CDATA[<p>I try to solve a puzzle of some kind every morning. I use
<a href="https://en.wikipedia.org/wiki/Sudoku">Sudoku</a>,
<a href="https://en.wikipedia.org/wiki/Picross">Picross</a>, and often, <a href="https://en.wikipedia.org/wiki/Professor_Layton">Professor
Layton</a>. Sometimes it is
convenient to write a program to solve some of the more annoying
"search" puzzles. I’ll post the Racket programs with a little bit of
commentary.</p>

<!-- more -->


<p>This is for <a href="http://tinyurl.com/6pjbzrs">Puzzle 132</a>. Here is the
puzzle:</p>

<blockquote><p>Two brothers have inherited their parents’ five-piece art collection.
According to the will, the older brother will get a set of paintings
worth twice what the younger brother gets. In order to ascertain the
value of the paintings, the brothers called in an appraiser, who valued
each painting as shown below. For his services, the appraiser was
promised the one painting left over after the brothers divided the art
according to their parents’ wishes.</p>

<p>Assuming that individual paintings can’t be divided, which one does
the appraiser get?</p></blockquote>

<p>There is then a picture of five paintings with prices underneath. They
are: A worth 20,000, B worth 60,000, C worth 55,000, D worth 45,000, E
worth 95,000.</p>

<p>I encoded this information into a vector in Racket:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;paintings&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">paintings</span>       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">vector</span><span class="err"> </span><span class="mi">20</span><span class="err"> </span><span class="mi">60</span><span class="err"> </span><span class="mi">55</span><span class="err"> </span><span class="mi">45</span><span class="err"> </span><span class="mi">95</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We won’t keep track of the labels, we’ll just remember that, for
example, 0 is A and 4 is E. Also, we divide everything by 1,000 so we
don’t have to type so much.</p>

<p>The basic algorithm we’ll use is a trivial search: try assigning each
painting to each brother and stop when the value of the older brother’s
paintings is twice that of the younger.</p>

<p>The trick, however, is that we’ll represent the assignment as the older
brother’s set combined with the younger brother’s set. We’ll do this
simultaneously with a bit-vector, where the 1s indicate that the older
brother gets it and the 0s indicate that the younger brother does. We’ll
independently pick one painting which will be "left over" that the
appraiser will get. Here’s the main loop:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;solver&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">for&lt;em&gt;</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">assignment</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="mi">31</span><span class="p">))</span><span class="err">]</span>              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       [</span><span class="nv">appraiser</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="p">(</span><span class="nf">vector-length</span><span class="err"> </span><span class="nv">paintings</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">older-value</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">assignment-&gt;value</span><span class="err"> </span><span class="nv">assignment</span><span class="err"> </span><span class="nv">appraiser</span><span class="err"> </span><span class="no">#t</span><span class="p">))</span>      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">younger-value</span>                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">assignment-&gt;value</span><span class="err"> </span><span class="nv">assignment</span><span class="err"> </span><span class="nv">appraiser</span><span class="err"> </span><span class="no">#f</span><span class="p">))</span>      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">when</span><span class="err"> </span><span class="p">(</span><span class="nf">=</span><span class="err"> </span><span class="nv">older-value</span><span class="err"> </span><span class="p">(</span><span class="nf">&lt;/em&gt;</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="nv">younger-value</span><span class="p">))</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">return</span><span class="err"> </span><span class="nv">appraiser</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>One thing to note here: for* is like a nested for—we loop over the
assignments /and/ loop over every painting each round. (This, by the
way, means that we do twice as much work because we consider both
assignments for the appraiser’s painting.)</p>

<p>Two other cute things: First, we use a literal binary number to write
down the completely full set, but we have to add one to actually visit
it. Second, the assignment->value function (below) will take an argument
to determine whether to add up the 1s or the 0s. Here’s it’s definition</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;valuation&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">assignment-&gt;value</span><span class="err"> </span><span class="nv">assignment</span><span class="err"> </span><span class="nv">ignored</span><span class="err"> </span><span class="nv">which</span><span class="p">)</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for/sum</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">painting</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="p">(</span><span class="nf">vector-length</span><span class="err"> </span><span class="nv">paintings</span><span class="p">))</span><span class="err">]</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">            </span><span class="o">#</span><span class="nv">:unless</span><span class="err"> </span><span class="p">(</span><span class="nf">=</span><span class="err"> </span><span class="nv">painting</span><span class="err"> </span><span class="nv">ignored</span><span class="p">))</span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">           </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">eq?</span><span class="err"> </span><span class="nv">which</span><span class="err"> </span><span class="p">(</span><span class="nf">bitwise-bit-set?</span><span class="err"> </span><span class="nv">assignment</span><span class="err"> </span><span class="nv">painting</span><span class="p">))</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">vector-ref</span><span class="err"> </span><span class="nv">paintings</span><span class="err"> </span><span class="nv">painting</span><span class="p">)</span>                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">             </span><span class="mi">0</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The for/sum variant adds up the result of each iteration of the loop,
the #:unless clause skips the iteration where the appraiser’s painting
is considered, and the if determines which brother we’re considering.</p>

<p>If you know anything about Racket, there may be one more confusing thing
about the code in <valuation>... return! Expressions in Racket don’t
normally have non-local returns like that. How can we make the inner
area of the loop stop and return the appraiser painting that works? It’s
simple: bind return to an escape continuation:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;escape-continuation&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">let/ec</span><span class="err"> </span><span class="nv">return</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;solver&gt;</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Was this faster or slower than doing it the old fashion way...? Who
knows.</p>

<p>Can you work out what the answer is...?</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&amp;lt</span><span class="c1">;*&gt; ::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="nv">&lt;paintings&gt;</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;valuation&gt;</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">vector-ref </span>          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">vector</span><span class="err"> </span><span class="ss">&#39;A</span><span class="err"> </span><span class="ss">&#39;B</span><span class="err"> </span><span class="ss">&#39;C</span><span class="err"> </span><span class="ss">&#39;D</span><span class="err"> </span><span class="ss">&#39;E</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">&lt;escape-continuation&gt;</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="/downloads/code/2011-06-30-professor-layton-and-the-diabolical-box-puzzle-132.rkt">Download</a></p>
]]></content>
  </entry>
  
</feed>
