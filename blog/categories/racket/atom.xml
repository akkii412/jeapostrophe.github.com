<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Racket | Jay McCarthy]]></title>
  <link href="http://jeapostrophe.github.com/blog/categories/racket/atom.xml" rel="self"/>
  <link href="http://jeapostrophe.github.com/"/>
  <updated>2012-07-30T15:11:06-06:00</updated>
  <id>http://jeapostrophe.github.com/</id>
  <author>
    <name><![CDATA[Jay McCarthy]]></name>
    <email><![CDATA[jay.mccarthy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Continuation Marks, part III: Marks themselves]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/07/30/cont-marks3/"/>
    <updated>2012-07-30T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/07/30/cont-marks3</id>
    <content type="html"><![CDATA[<p>The last two weeks we’ve seen the basic ideas behind continuation marks,
but we’ve never actually used them. This week we show the actual
feature.</p>

<!-- more -->


<p>As usual, we’ll return to the example from last time:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;example&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">show-structure</span>                              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-lambda</span>                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="nv">e</span><span class="err"> </span><span class="o">...</span><span class="p">)</span>                                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">with-indentation</span>                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">for-each</span><span class="err"> </span><span class="nv">show-structure</span><span class="err"> </span><span class="nv">e</span><span class="p">)))</span><span class="err">]</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">?</span><span class="err"> </span><span class="nv">number?</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>                                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">displayln/indent</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span><span class="err">]</span><span class="p">))</span>                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">show-structure</span>                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="mi">2</span><span class="p">)</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">4</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err"> </span><span class="mi">6</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">7</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">8</span><span class="p">)</span><span class="err"> </span><span class="mi">9</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>which prints as:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;br/>
</span><span class='line'> 1                &lt;br/>
</span><span class='line'> 2                &lt;br/>
</span><span class='line'>3                 &lt;br/>
</span><span class='line'> 4                &lt;br/>
</span><span class='line'> 5                &lt;br/>
</span><span class='line'>6                 &lt;br/>
</span><span class='line'> 7                &lt;br/>
</span><span class='line'>  8               &lt;br/>
</span><span class='line'> 9</span></code></pre></td></tr></table></div></figure></notextile></div>
 </p>

<p>where we relied on the parameter feature of Racket to implement the
indentation tracking:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;params&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="p">(</span><span class="nf">make-parameter</span><span class="err"> </span><span class="mi">0</span><span class="p">))</span>        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">with-indentation</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">originally</span><span class="err"> </span><span class="p">(</span><span class="nf">indent-level</span><span class="p">))</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">parameterize</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">indent-level</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">originally</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">t</span><span class="p">)))</span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">displayln/indent</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="p">(</span><span class="nf">indent-level</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">display</span><span class="err"> </span><span class="s">&quot; &quot;</span><span class="p">))</span>                              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">displayln</span><span class="err"> </span><span class="nv">x</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can read parameterize as annotating the context of the t evaluation
with information that says "the indentation level is now 3" (or
whatever.) But parameters wrap that annotation in a convenient
interface.</p>

<p>The annotation could be expressed directly by "marking" (annotating) the
"continuation" (context):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;marks&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">indent-level</span><span class="p">)</span>              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">continuation-mark-set-first</span>      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">current-continuation-marks</span><span class="p">)</span>     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="ss">&#39;indent-level</span>                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="mi">0</span><span class="p">))</span>                              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">with-indentation</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">originally</span><span class="err"> </span><span class="p">(</span><span class="nf">indent-level</span><span class="p">))</span><span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">with-continuation-mark</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="ss">&#39;indent-level</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">originally</span><span class="p">)</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">t</span><span class="p">)))</span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">displayln/indent</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="p">(</span><span class="nf">indent-level</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">display</span><span class="err"> </span><span class="s">&quot; &quot;</span><span class="p">))</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">displayln</span><span class="err"> </span><span class="nv">x</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The only apparent differences are that we use with-continuation-mark
rather than parameterize, use the symbol 'indent-level, and have to
write the accessor function ourselves. Indeed, you can almost imagine
that parameters are little more than these differences macro-ized. (As
mentioned before, there are other differences with parameters and
concurrency that this leaves out.)</p>

<p>One crucial difference between parameters and continuation marks,
however, is that with parameters you can only observe the <em>last</em> value,
whereas with marks you can observe <em>all</em> values. Our example only looks
at the last one, so we’ll have to change something else to see them all.</p>

<p>Here’s a factorial function, with continuation marks annotating its
arguments:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;fac&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">fac</span><span class="err"> </span><span class="nv">n</span><span class="p">)</span>                                                                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="k">cond </span>                                                                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">zero?</span><span class="err"> </span><span class="nv">n</span><span class="p">)</span>                                                                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">displayln</span><span class="err"> </span><span class="p">(</span><span class="nf">continuation-mark-set-&gt;list&lt;em&gt;</span><span class="err"> </span><span class="p">(</span><span class="nf">current-continuation-marks</span><span class="p">)</span><span class="err"> </span><span class="o">&#39;</span><span class="p">(</span><span class="nv">fac</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">     </span><span class="mi">1</span><span class="err">]</span>                                                                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="k">else </span>                                                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">with-continuation-mark</span>                                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="ss">&#39;fac</span><span class="err"> </span><span class="nv">n</span>                                                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">&lt;/em&gt;</span><span class="err"> </span><span class="nv">n</span><span class="err"> </span><span class="p">(</span><span class="nf">fac</span><span class="err"> </span><span class="p">(</span><span class="nf">sub1</span><span class="err"> </span><span class="nv">n</span><span class="p">))))</span><span class="err">]</span><span class="p">))</span>                                                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">fac</span><span class="err"> </span><span class="mi">3</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you run this code, it prints out a list containing 1, 2, and 3—the
annotations around the call to (fac 0). This is similar to the
indentation program, except in that case we’d only be able to observe 1,
the last annotation.</p>

<p>Continuation marks like this (noting the name of the function and its
arguments) are the majority of stack traces. Other kinds of marks could
be used for other runtime inspection purposes.</p>

<p>Continuation marks behave specially when the annotation is in tail
position. (Recall that this is why parameterize is more efficient than
dynamic-wind.) Since in tail position there is not a /new/ continuation,
there is only space for one mark, so any new marks destroy old marks. A
tail-recursive version of factorial demonstrates the difference:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;fac-tr&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">fac-tr</span><span class="err"> </span><span class="nv">n</span><span class="err"> </span><span class="nv">acc</span><span class="p">)</span>                                                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="k">cond </span>                                                                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">zero?</span><span class="err"> </span><span class="nv">n</span><span class="p">)</span>                                                                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">displayln</span><span class="err"> </span><span class="p">(</span><span class="nf">continuation-mark-set-&gt;list&lt;em&gt;</span><span class="err"> </span><span class="p">(</span><span class="nf">current-continuation-marks</span><span class="p">)</span><span class="err"> </span><span class="o">&#39;</span><span class="p">(</span><span class="nv">fac</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">     </span><span class="nv">acc</span><span class="err">]</span>                                                                        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="k">else </span>                                                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">with-continuation-mark</span>                                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="ss">&#39;fac</span><span class="err"> </span><span class="nv">n</span>                                                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">fac-tr</span><span class="err"> </span><span class="p">(</span><span class="nf">sub1</span><span class="err"> </span><span class="nv">n</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">&lt;/em&gt;</span><span class="err"> </span><span class="nv">n</span><span class="err"> </span><span class="nv">acc</span><span class="p">)))</span><span class="err">]</span><span class="p">))</span>                                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">fac-tr</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This program only prints out 1, because the single continuation only has
space for one mark and each recursion annihilates it.</p>

<p>This property preserve the Safe-for-Space guarantees of Racket in the
presence of continuation marks.</p>

<p>I find continuation marks very useful when a program must observe the
path that led to it. For example, it can be a convenient way to detect
cycles in a search space. Sometimes I will write a "custom" stack trace
like this just for experimenting purposes to track the evaluation of the
program better.</p>

<p>Continuation marks are also the basis of the stateless
continuation-based Web server that comes with Racket, but that’s another
story.</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&amp;lt</span><span class="c1">;*&gt; ::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">racket/match</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Params\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;params&gt;</span>          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;example&gt;</span><span class="p">)</span>        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Marks\n&quot;</span><span class="p">)</span><span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;marks&gt;</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;example&gt;</span><span class="p">)</span>        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;fac&gt;</span>               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;fac-tr&gt;</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Done\n&quot;</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="/downloads/code/2012-07-30-cont-marks3.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuation Marks, part II: Parameters]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/07/25/cont-marks2/"/>
    <updated>2012-07-25T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/07/25/cont-marks2</id>
    <content type="html"><![CDATA[<p>Last week I started discussing continuation marks with a medium-sized
diversion into dynamic-wind as a way to delimited the effects of a
mutation to the body of a dynamic context so a program’s context can
affect its behavior indirectly.</p>

<p>The pattern we used in the last post is so common that a slightly
improved form of it is integrated into Racket as the concept of
parameters.</p>

<!-- more -->


<p>As a reminder, suppose we have this program:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;show-structure&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">show-structure</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-lambda</span>                        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="nv">e</span><span class="err"> </span><span class="o">...</span><span class="p">)</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">with-indentation</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">for-each</span><span class="err"> </span><span class="nv">show-structure</span><span class="err"> </span><span class="nv">e</span><span class="p">)))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">?</span><span class="err"> </span><span class="nv">number?</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">displayln/indent</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span><span class="err">]</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And with this example</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;example1&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">show-structure</span>                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="mi">2</span><span class="p">)</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">4</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err"> </span><span class="mi">6</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">7</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">8</span><span class="p">)</span><span class="err"> </span><span class="mi">9</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We want it to print as:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;br/>
</span><span class='line'>  1             &lt;br/>
</span><span class='line'>  2             &lt;br/>
</span><span class='line'> 3              &lt;br/>
</span><span class='line'>  4             &lt;br/>
</span><span class='line'>  5             &lt;br/>
</span><span class='line'> 6              &lt;br/>
</span><span class='line'>  7             &lt;br/>
</span><span class='line'>   8            &lt;br/>
</span><span class='line'>  9             &lt;br/></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Last week, we implemented this with</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;mutation-control-dw&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">with-indentation</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">originally</span><span class="err"> </span><span class="nv">indent-level</span><span class="p">)</span>          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nb">dynamic-wind </span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">originally</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">t</span><span class="p">))</span>                                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="nv">originally</span><span class="p">))))</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">displayln/indent</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="nv">indent-level</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">display</span><span class="err"> </span><span class="s">&quot; &quot;</span><span class="p">))</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">displayln</span><span class="err"> </span><span class="nv">x</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This code is practically equivalent to the Racket feature of a
parameter.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;mutation-control-params&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="p">(</span><span class="nf">make-parameter</span><span class="err"> </span><span class="mi">0</span><span class="p">))</span>        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">with-indentation</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">originally</span><span class="err"> </span><span class="p">(</span><span class="nf">indent-level</span><span class="p">))</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">parameterize</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">indent-level</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">originally</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">t</span><span class="p">)))</span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">displayln/indent</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="p">(</span><span class="nf">indent-level</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">display</span><span class="err"> </span><span class="s">&quot; &quot;</span><span class="p">))</span>                              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">displayln</span><span class="err"> </span><span class="nv">x</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Parameters would like this. The make-parameter function takes the
initial value of a parameter and returns a function that returns the
"current" value of the parameter in whatever dynamic context it is
inside. The parameterize form wraps its context with a new value for the
the parameter. The wrapping takes place in a way safe with respect to
control, just like dynamic wind.</p>

<p>(Parameters also have special behavior with respect to threads: when you
start a thread, it inherits its parent context’s values for all
parameters, whereas the mutation behind dynamic-wind would completely
ignore the fact that a new thread was around... the mutations in the
finally part would happen even if the thread was still live when the
rest of the dynamic-wind body completed.)</p>

<p>(Parameters also provide the ability to capture a /parameterization/
which captures the current values of <em>all</em> parameters. Such a value can
later be installed to restore a captured context. The Racket Web server
uses this to restore parameters for Web programs after user
interactions.)</p>

<p>Parameters and dynamic-wind with mutation have slightly different
performance strengths and weaknesses. Namely, parameters are better for
space, whereas dynamic-wind is better for speed.</p>

<p>We’ll first show the space difference by increasing the indentation one
hundred times and then measuring how much memory was used to store the
changes (and the rests to the changes.)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;memory-test&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">before</span><span class="err"> </span><span class="p">(</span><span class="nf">current-memory-use&lt;em&gt;</span><span class="p">))</span>                        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="mi">100</span><span class="err">]</span><span class="p">)</span>                                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="k">cond </span>                                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">zero?</span><span class="err"> </span><span class="nv">i</span><span class="p">)</span>                                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">after</span><span class="err"> </span><span class="p">(</span><span class="nf">current-memory-use&lt;/em&gt;</span><span class="p">))</span>                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;~a MBs\n&quot;</span>                                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">real-&gt;decimal-string</span><span class="err"> </span><span class="p">(</span><span class="nf">/</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">after</span><span class="err"> </span><span class="nv">before</span><span class="p">)</span><span class="err"> </span><span class="mi">1024</span><span class="p">)))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="k">else </span>                                                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">with-indentation</span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="p">(</span><span class="nf">sub1</span><span class="err"> </span><span class="nv">i</span><span class="p">))))</span><span class="err">]</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In this program, parameters use about 2.30 MBs, whereas dynamic-wind
uses 6.61 MBs, on average. The reason is that parameterize is safe for
space—it does not leave residue on the stack when called in
tail-position, as it is here. In contrast, the dynamic-wind finally
handlers are all called to unwind the state change, as so they must be
recorded on the stack.</p>

<p>This reveals, and the threading issue, reveal that dynamic-wind doesn’t
/really/ make a scoped variable change, it actually makes a global
variable and undoes it properly. In contrast, parameterize really is a
local change and when the context that change is active for is gone,
such as when another parameterize overwrites and the call was in
tail-position, it’s no longer necessary to "remember" the intermediate
value.</p>

<p>Next, let’s see the difference in speed by checking the current
indentation level one hundred thousand times.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;speed-test&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">before</span><span class="err"> </span><span class="p">(</span><span class="nf">current-inexact-milliseconds</span><span class="p">))</span>      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">il</span><span class="err"> </span><span class="mi">0</span><span class="err">] [</span><span class="nv">i</span><span class="err"> </span><span class="mi">100000</span><span class="err">]</span><span class="p">)</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="k">cond </span>                                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">zero?</span><span class="err"> </span><span class="nv">i</span><span class="p">)</span>                                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">after</span><span class="err"> </span><span class="p">(</span><span class="nf">current-inexact-milliseconds</span><span class="p">))</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;~a in ~a ms\n&quot;</span>                        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">             </span><span class="nv">il</span>                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">real-&gt;decimal-string</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">after</span><span class="err"> </span><span class="nv">before</span><span class="p">)))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="k">else </span>                                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">il</span><span class="err"> </span><span class="p">(</span><span class="nf">get-indent-level</span><span class="p">))</span><span class="err"> </span><span class="p">(</span><span class="nf">sub1</span><span class="err"> </span><span class="nv">i</span><span class="p">))</span><span class="err">]</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In this program, dynamic-wind uses just 0.98 milliseconds, whereas
parameterize uses 16.35 milliseconds: a major difference in speed.
That’s because the mutation-based version just embeds a reference to a
global variable and can easily look it up, whereas the parameter-based
version has to consult the context.</p>

<p>In general, the parameter-based version is much better for typical use
and it’s easier to use. But, sometimes when you have tight loops that
would consult a parameter, it is important to cache the value. This is
most relevant for code that does input or output in a tight loop,
because those functions consult parameters for the default input/output
ports.</p>

<p>Continuation marks are a lower-level feature than parameters, but
understanding parameters is really useful for understanding marks. Next
time, we’ll finally see what marks are all about.</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&amp;lt</span><span class="c1">;*&gt; ::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">racket/match</span><span class="p">)</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">current-memory-use*</span><span class="p">)</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">collect-garbage</span><span class="p">)</span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">collect-garbage</span><span class="p">)</span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">current-memory-use</span><span class="p">))</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Dynamic Wind\n&quot;</span><span class="p">)</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;mutation-control-dw&gt;</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;show-structure&gt;</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;example1&gt;</span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span><span class="err"> </span><span class="nv">&lt;memory-test&gt;</span><span class="p">)</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">get-indent-level</span><span class="p">)</span><span class="err"> </span><span class="nv">indent-level</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span><span class="err"> </span><span class="nv">&lt;speed-test&gt;</span><span class="p">))</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">collect-garbage</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">collect-garbage</span><span class="p">)</span>     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Parameters\n&quot;</span><span class="p">)</span>               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;mutation-control-params&gt;</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;show-structure&gt;</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;example1&gt;</span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span><span class="err"> </span><span class="nv">&lt;memory-test&gt;</span><span class="p">)</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">get-indent-level</span><span class="err"> </span><span class="nv">indent-level</span><span class="p">)</span><span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span><span class="err"> </span><span class="nv">&lt;speed-test&gt;</span><span class="p">))</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Done\n&quot;</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="/downloads/code/2012-07-25-cont-marks2.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuation Marks, part I: Dynamic Wind]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/07/16/cont-marks/"/>
    <updated>2012-07-16T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/07/16/cont-marks</id>
    <content type="html"><![CDATA[<p>One of my favourite features of Racket is also one of its most unique
features: continuation marks.</p>

<p>Continuation marks allow you to annotate the dynamic context of a
running program and later observe it to respond differently to your
context.</p>

<p>In the next few posts, I’ll talk about continuation marks. But first, we
need to cover a different feature of Racket called dynamic-wind. (Most
people pronounce it like winding a winch, but I like to pronounce it
like a gust of wind and say "Dynaaamic WIND!" as if it was a Street
Fighter move.)</p>

<!-- more -->


<p>The classic example of continuation marks is a flow-sensitive variable,
like the current indentation level of debugging printfs.</p>

<p>For example, suppose you have this program:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;show-structure&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">show-structure</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-lambda</span>                        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="nv">e</span><span class="err"> </span><span class="o">...</span><span class="p">)</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">with-indentation</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">for-each</span><span class="err"> </span><span class="nv">show-structure</span><span class="err"> </span><span class="nv">e</span><span class="p">)))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">?</span><span class="err"> </span><span class="nv">number?</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">displayln/indent</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span><span class="err">]</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And with this example</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;example1&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">show-structure</span>                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="mi">2</span><span class="p">)</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">4</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err"> </span><span class="mi">6</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">7</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">8</span><span class="p">)</span><span class="err"> </span><span class="mi">9</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You want it to print as:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;br/>
</span><span class='line'>  1             &lt;br/>
</span><span class='line'>  2             &lt;br/>
</span><span class='line'> 3              &lt;br/>
</span><span class='line'>  4             &lt;br/>
</span><span class='line'>  5             &lt;br/>
</span><span class='line'> 6              &lt;br/>
</span><span class='line'>  7             &lt;br/>
</span><span class='line'>   8            &lt;br/>
</span><span class='line'>  9             &lt;br/></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>One obvious way is to use a global variable:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;mutation&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span>              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">with-indentation</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">originally</span><span class="err"> </span><span class="nv">indent-level</span><span class="p">)</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">originally</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">t</span><span class="p">)</span>                                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="nv">originally</span><span class="p">))</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">displayln/indent</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="nv">indent-level</span><span class="p">)</span><span class="err">]</span><span class="p">)</span> <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">display</span><span class="err"> </span><span class="s">&quot; &quot;</span><span class="p">))</span>                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">displayln</span><span class="err"> </span><span class="nv">x</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The key is to reset the indentation level after the thunk returns.</p>

<p>However, this is not a robust technique in the presence of control
effects. For example, if the code throws an exception than the reset
will not occur.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;example2&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">with-handlers</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">exn:misc:match?</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="ss">&#39;failed</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">show-structure</span>                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="ss">&#39;error!</span><span class="p">)))))</span>         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">show-structure</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">3</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So it prints as:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;br/>
</span><span class='line'> 1              &lt;br/>
</span><span class='line'>  2             &lt;br/>
</span><span class='line'>   3            &lt;br/>
</span><span class='line'>'failed         &lt;br/>
</span><span class='line'>    1           &lt;br/>
</span><span class='line'>     2          &lt;br/>
</span><span class='line'>      3         &lt;br/></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And every subsequent is off by three. The same problem occurs when
continuations are captured and invoked.</p>

<p>Racket provides a feature called dynamic-wind that helps you write this
mutation code safely with respect to control effects:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;mutation-control-safe&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">with-indentation</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">originally</span><span class="err"> </span><span class="nv">indent-level</span><span class="p">)</span>          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nb">dynamic-wind </span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">originally</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">t</span><span class="p">))</span>                                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="nv">originally</span><span class="p">))))</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">displayln/indent</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="nv">indent-level</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">display</span><span class="err"> </span><span class="s">&quot; &quot;</span><span class="p">))</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">displayln</span><span class="err"> </span><span class="nv">x</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>dynamic-wind takes three functions. The first gets called whenever the
body is "entered", the second is the body and is just called once at the
start, and the third is called whenever the body is exited. In normal
situations, it is just like a sequence of three calls.</p>

<p>But, when control leaves the body somehow—like through an exception,
abort, or continuation invocation—then the third function is called to
"undo" whatever state changes were made when the body was entered.</p>

<p>Similarly, when control enters the body somehow—like when a continuation
is captured inside the body and is invoked after the body has already
returned—then the first function is called again to "redo" whatever
state changes the body relies on.</p>

<p>Try to predict the output of these programs:</p>

<p>Example 1: Just a sequence of printfs.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;dw-1&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="k">begin </span>          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;In\n&quot;</span><span class="p">)</span><span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Body\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Out\n&quot;</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Example 2: An equivalent sequence, but within dynamic-wind.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;dw-2&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="k">begin </span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nb">dynamic-wind </span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;In\n&quot;</span><span class="p">))</span> <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Body\n&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Out\n&quot;</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Example 3: An almost identical sequence, but now with an exception.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;dw-3&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">with-handlers</span>               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="err">[</span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="no">#t</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span><span class="err">]</span><span class="p">)</span> <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nb">dynamic-wind </span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;In\n&quot;</span><span class="p">))</span> <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Body Pre\n&quot;</span><span class="p">)</span><span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">raise</span><span class="err"> </span><span class="ss">&#39;error</span><span class="p">)</span>       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Body Post\n&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Out\n&quot;</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Example 4: Now we replace the raise with continuation capture and invoke
the continuation.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;dw-4&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="k">begin </span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">the-k</span><span class="err"> </span><span class="no">#f</span><span class="p">)</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">when</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nb">dynamic-wind </span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;In\n&quot;</span><span class="p">))</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Body Pre\n&quot;</span><span class="p">)</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">begin0</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">let/cc</span><span class="err"> </span><span class="nv">k</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">the-k</span><span class="err"> </span><span class="nv">k</span><span class="p">))</span>     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Body Post\n&quot;</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Out\n&quot;</span><span class="p">)))</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">the-k</span><span class="err"> </span><span class="no">#f</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Bonus question: Why doesn’t this code infinite loop?</p>

<p>Example 5: Now rather than using mutation, we communicate the
continuation with an exception.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;dw-5&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="k">begin </span>                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">with-handlers</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">continuation?</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">k</span><span class="p">)</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">k</span><span class="err"> </span><span class="mi">0</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nb">dynamic-wind </span>              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;In\n&quot;</span><span class="p">))</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Body Pre\n&quot;</span><span class="p">)</span> <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">let/cc</span><span class="err"> </span><span class="nv">k</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">raise</span><span class="err"> </span><span class="nv">k</span><span class="p">))</span>          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Body Post\n&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Out\n&quot;</span><span class="p">)))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Example 6: Invoking the continuation repeatedly inside the exception
handler.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;dw-6&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="k">begin </span>                                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">with-handlers</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">pair?</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">k&lt;em&gt;n</span><span class="p">)</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Pong\n&quot;</span><span class="p">)</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">((</span><span class="nf">car</span><span class="err"> </span><span class="nv">k&lt;/em&gt;n</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="p">(</span><span class="nf">cdr</span><span class="err"> </span><span class="nv">k*n</span><span class="p">))))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nb">dynamic-wind </span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;In\n&quot;</span><span class="p">))</span>         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Body Pre\n&quot;</span><span class="p">)</span>        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="mi">0</span><span class="err">]</span><span class="p">)</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">unless</span><span class="err"> </span><span class="p">(</span><span class="nf">=</span><span class="err"> </span><span class="nv">i</span><span class="err"> </span><span class="mi">3</span><span class="p">)</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Ping ~a\n&quot;</span><span class="err"> </span><span class="nv">i</span><span class="p">)</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">loop</span>                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">               </span><span class="p">(</span><span class="nf">let/cc</span><span class="err"> </span><span class="nv">k</span>               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                 </span><span class="p">(</span><span class="nf">raise</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">k</span><span class="err"> </span><span class="nv">i</span><span class="p">))))))</span><span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Body Post\n&quot;</span><span class="p">))</span>      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Out\n&quot;</span><span class="p">)))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Next week we’ll go on to how dynamic-wind relates to continuation marks.</p>

<p>And here is the expected output, by the way:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;br/>
</span><span class='line'>Example 1       &lt;br/>
</span><span class='line'>In              &lt;br/>
</span><span class='line'>Body            &lt;br/>
</span><span class='line'>Out             &lt;br/>
</span><span class='line'>                &lt;br/>
</span><span class='line'>Example 2       &lt;br/>
</span><span class='line'>In              &lt;br/>
</span><span class='line'>Body            &lt;br/>
</span><span class='line'>Out             &lt;br/>
</span><span class='line'>                &lt;br/>
</span><span class='line'>Example 3       &lt;br/>
</span><span class='line'>In              &lt;br/>
</span><span class='line'>Body Pre        &lt;br/>
</span><span class='line'>Out             &lt;br/>
</span><span class='line'>'error          &lt;br/>
</span><span class='line'>                &lt;br/>
</span><span class='line'>Example 4       &lt;br/>
</span><span class='line'>In              &lt;br/>
</span><span class='line'>Body Pre        &lt;br/>
</span><span class='line'>Body Post       &lt;br/>
</span><span class='line'>Out             &lt;br/>
</span><span class='line'>In              &lt;br/>
</span><span class='line'>Body Post       &lt;br/>
</span><span class='line'>Out             &lt;br/>
</span><span class='line'>                &lt;br/>
</span><span class='line'>Example 5       &lt;br/>
</span><span class='line'>In              &lt;br/>
</span><span class='line'>Body Pre        &lt;br/>
</span><span class='line'>Out             &lt;br/>
</span><span class='line'>In              &lt;br/>
</span><span class='line'>Body Post       &lt;br/>
</span><span class='line'>Out             &lt;br/>
</span><span class='line'>                &lt;br/>
</span><span class='line'>Example 6       &lt;br/>
</span><span class='line'>In              &lt;br/>
</span><span class='line'>Body Pre        &lt;br/>
</span><span class='line'>Ping 0          &lt;br/>
</span><span class='line'>Out             &lt;br/>
</span><span class='line'>Pong            &lt;br/>
</span><span class='line'>In              &lt;br/>
</span><span class='line'>Ping 1          &lt;br/>
</span><span class='line'>Out             &lt;br/>
</span><span class='line'>Pong            &lt;br/>
</span><span class='line'>In              &lt;br/>
</span><span class='line'>Ping 2          &lt;br/>
</span><span class='line'>Out             &lt;br/>
</span><span class='line'>Pong            &lt;br/>
</span><span class='line'>In              &lt;br/>
</span><span class='line'>Body Post       &lt;br/>
</span><span class='line'>Out             &lt;br/></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&amp;lt</span><span class="c1">;*&gt; ::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">racket/match</span><span class="p">)</span>      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Control un-Safe\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;mutation&gt;</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;show-structure&gt;</span>          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;example1&gt;</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;example2&gt;</span><span class="p">)</span>               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Control Safe\n&quot;</span><span class="p">)</span> <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;mutation-control-safe&gt;</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;show-structure&gt;</span>          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;example1&gt;</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;example2&gt;</span><span class="p">)</span>               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;\nExample 1\n&quot;</span><span class="p">)</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;dw-1&gt;</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;\nExample 2\n&quot;</span><span class="p">)</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;dw-2&gt;</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;\nExample 3\n&quot;</span><span class="p">)</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;dw-3&gt;</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;\nExample 4\n&quot;</span><span class="p">)</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;dw-4&gt;</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;\nExample 5\n&quot;</span><span class="p">)</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;dw-5&gt;</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;\nExample 6\n&quot;</span><span class="p">)</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;dw-6&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="/downloads/code/2012-07-16-cont-marks.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Domain-Specific Operating Systems: Threads, System Calls, and Continuations]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/07/12/cont-syscall/"/>
    <updated>2012-07-12T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/07/12/cont-syscall</id>
    <content type="html"><![CDATA[<p>In the past few posts I’ve been writing about threading system that are
based on continuations in user-land. This post I’ll extend that system
to provide system calls that control access to sensitive resources, such
as files and the thread pool.</p>

<!-- more -->


<p>We’ll be working from the same example program as last week, except that
we’ll be changing printf from a "primitive" function to a system call.
Here’s the program:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;example&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">main</span><span class="p">)</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">N</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">thread</span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">N</span><span class="err"> </span><span class="mi">2</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;iter: ~a\n&quot;</span><span class="err"> </span><span class="nv">i</span><span class="p">))))</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">thread</span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">for/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">sum</span><span class="err"> </span><span class="mi">0</span><span class="err">]</span><span class="p">)</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="nv">N</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;adder: ~a\n&quot;</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">i</span><span class="err"> </span><span class="nv">sum</span><span class="p">))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">i</span><span class="err"> </span><span class="nv">sum</span><span class="p">)))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Recall that this program has the following output:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;br/>
</span><span class='line'>adder: 0        &lt;br/>
</span><span class='line'>iter: 0         &lt;br/>
</span><span class='line'>adder: 1        &lt;br/>
</span><span class='line'>iter: 1         &lt;br/>
</span><span class='line'>adder: 3        &lt;br/>
</span><span class='line'>iter: 2         &lt;br/>
</span><span class='line'>adder: 6        &lt;br/>
</span><span class='line'>iter: 3         &lt;br/>
</span><span class='line'>adder: 10       &lt;br/>
</span><span class='line'>iter: 4         &lt;br/>
</span><span class='line'>iter: 5         &lt;br/>
</span><span class='line'>iter: 6         &lt;br/></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In the original threading system, global mutable variables were used to
handle the state of the threading system:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;basic-threading-system&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">ts</span><span class="err"> </span><span class="nv">empty</span><span class="p">)</span>                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">yield</span><span class="p">)</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">ts</span>                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">list</span><span class="p">)</span>                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">void</span><span class="p">)</span><span class="err">]</span>                                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">next</span><span class="err"> </span><span class="nv">rest</span><span class="p">)</span>                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">let/cc</span><span class="err"> </span><span class="nv">k</span>                                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">ts</span><span class="err"> </span><span class="p">(</span><span class="nf">snoc</span><span class="err"> </span><span class="nv">rest</span><span class="err"> </span><span class="nv">k</span><span class="p">))</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">next</span><span class="p">))</span><span class="err">]</span><span class="p">))</span>                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">thread</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>                              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">ts</span>                                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                </span><span class="p">(</span><span class="nf">abort-current-continuation</span>     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                 </span><span class="p">(</span><span class="nf">default-continuation-prompt-tag</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                 </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                   </span><span class="p">(</span><span class="nf">t</span><span class="p">)</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                   </span><span class="p">(</span><span class="nf">exit</span><span class="p">))))</span>                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">              </span><span class="nv">ts</span><span class="p">)))</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">exit</span><span class="p">)</span>                                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">ts</span>                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">list</span><span class="p">)</span>                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">void</span><span class="p">)</span><span class="err">]</span>                                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">next</span><span class="err"> </span><span class="nv">rest</span><span class="p">)</span>                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">ts</span><span class="err"> </span><span class="nv">rest</span><span class="p">)</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">next</span><span class="p">)</span><span class="err">]</span><span class="p">))</span>                                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="o">.</span> <span class="nv">args</span><span class="p">)</span>                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">begin0</span><span class="err"> </span><span class="p">(</span><span class="nf">apply</span><span class="err"> </span><span class="nv">racket:printf</span><span class="err"> </span><span class="nv">args</span><span class="p">)</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">yield</span><span class="p">)))</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">call-with-continuation-prompt</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">main</span><span class="p">)</span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">exit</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Notice that the "logical" system calls—thread, exit, yield and
printf—all mutate the thread system’s state (ts). This makes the system
difficult to test and analyze.</p>

<p>Our goal is to tease out all this code into a single "kernel" that
actually /is/ the threading system and exists independently from the
state of the various threads. Here’s a sketch of the kernel:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;kernel&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">kernel</span><span class="err"> </span><span class="p">(</span><span class="nf">threads</span><span class="p">))</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">boot</span><span class="err"> </span><span class="nv">main</span><span class="p">)</span>                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">initial</span><span class="err"> </span><span class="p">(</span><span class="nf">kernel</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="nv">main</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">ks</span><span class="err"> </span><span class="nv">initial</span><span class="err">]</span><span class="p">)</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">unless</span><span class="err"> </span><span class="p">(</span><span class="nf">empty?</span><span class="err"> </span><span class="p">(</span><span class="nf">kernel-threads</span><span class="err"> </span><span class="nv">ks</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="p">(</span><span class="nf">step-one-thread</span><span class="err"> </span><span class="nv">ks</span><span class="p">)))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The state of the kernel will simply be the list of threads and all the
kernel really does is continuously call step-one-thread to advance the
state of the kernel until all the threads exit. All the work will, of
course, take place in step-one-thread:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;step-one-thread&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">step-one-thread</span><span class="err"> </span><span class="nv">ks</span><span class="p">)</span>                              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-define</span><span class="err"> </span><span class="p">(</span><span class="nf">kernel</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">top-thread</span><span class="err"> </span><span class="nv">other-threads</span><span class="p">))</span><span class="err"> </span><span class="nv">ks</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">syscall</span><span class="err"> </span><span class="p">(</span><span class="nf">run-thread-until-syscall</span><span class="err"> </span><span class="nv">top-thread</span><span class="p">))</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">execute-syscall</span><span class="err"> </span><span class="nv">syscall</span><span class="err"> </span><span class="p">(</span><span class="nf">kernel</span><span class="err"> </span><span class="nv">other-threads</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Its job is simply to select the first thread, run it until it reaches a
system call and then deal with the system call.</p>

<p>Let’s represent each system call as structure:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;syscalls&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">syscall</span><span class="err"> </span><span class="p">(</span><span class="nf">user-context</span><span class="p">))</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">syscall:thread</span><span class="err"> </span><span class="nv">syscall</span><span class="err"> </span><span class="p">(</span><span class="nf">child-thunk</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">syscall:exit</span><span class="err"> </span><span class="nv">syscall</span><span class="err"> </span><span class="p">())</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">syscall:printf</span><span class="err"> </span><span class="nv">syscall</span><span class="err"> </span><span class="p">(</span><span class="nf">fmt</span><span class="err"> </span><span class="nv">arg</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The thing that all system calls have in common is that the context of
the user program is preserved, but other than that, each is distinct in
the data that it carries.</p>

<p>Once this is in place, we can pretty easily write the code to handle the
system calls and update the kernel’s state:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;execute-syscall&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">execute-syscall</span><span class="err"> </span><span class="nv">call</span><span class="err"> </span><span class="nv">kernel-state</span><span class="p">)</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-define</span><span class="err"> </span><span class="p">(</span><span class="nf">kernel</span><span class="err"> </span><span class="nv">threads</span><span class="p">)</span><span class="err"> </span><span class="nv">kernel-state</span><span class="p">)</span><span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">call</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">syscall:thread</span><span class="err"> </span><span class="nv">user-ctxt</span><span class="err"> </span><span class="nv">child-t</span><span class="p">)</span>       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">kernel</span><span class="err"> </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">user-ctxt</span><span class="err"> </span><span class="nv">child-t</span><span class="err"> </span><span class="nv">threads</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">syscall:exit</span><span class="err"> </span><span class="nv">user-ctxt</span><span class="p">)</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">kernel</span><span class="err"> </span><span class="nv">threads</span><span class="p">)</span><span class="err">]</span>                        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">syscall:printf</span><span class="err"> </span><span class="nv">user-ctxt</span><span class="err"> </span><span class="nv">fmt</span><span class="err"> </span><span class="nv">arg</span><span class="p">)</span>       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">racket:printf</span><span class="err"> </span><span class="nv">fmt</span><span class="err"> </span><span class="nv">arg</span><span class="p">)</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">kernel</span><span class="err"> </span><span class="p">(</span><span class="nf">snoc</span><span class="err"> </span><span class="nv">threads</span><span class="err"> </span><span class="nv">user-ctxt</span><span class="p">))</span><span class="err">]</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A new thread just needs to push both contexts (the parent and the child)
onto the thread queue. (We add them to the top of the queue to preserve
compatibility with the previous versions of this code.) When a thread
exits, the user context is thrown away. When a printf occurs, the string
is displayed and the user context is placed back on the queue, at the
end.</p>

<p>We only need to do two more things: implement run-thread-until-syscall
and implement the code that the user programs call to return system call
structures to the kernel. These are tightly intertwined.</p>

<p>The second is actually simpler, so we’ll do that first. The basic idea
is to capture the continuation going back to the kernel and throw it
back to the kernel as something like an exception (really, an abort,
which you can think of as an exception that can only be caught by
privileged code.)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&amp;lt</span><span class="c1">;syscall-throw:thread&gt; ::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">thread</span><span class="err"> </span><span class="nv">child-t</span><span class="p">)</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">call-with-composable-continuation</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">user-ctxt</span><span class="p">)</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">abort-current-continuation</span>        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="nv">kernel-prompt-tag</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">syscall:thread</span><span class="err"> </span><span class="nv">user-ctxt</span><span class="err"> </span><span class="nv">child-t</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">kernel-prompt-tag</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The other code will be very similar to this, so we’ll write a macro to
simplify it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;syscall-throw&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define-syntax-rule</span>                              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define-syscall-throw</span><span class="err"> </span><span class="nv">user-id</span><span class="err"> </span><span class="nv">syscall-id</span><span class="p">)</span>      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">user-id</span><span class="err"> </span><span class="o">.</span> <span class="nv">syscall-args</span><span class="p">)</span>               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">call-with-composable-continuation</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">user-ctxt</span><span class="p">)</span>                              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">abort-current-continuation</span>               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="nv">kernel-prompt-tag</span>                        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">apply</span><span class="err"> </span><span class="nv">syscall-id</span><span class="err"> </span><span class="nv">user-ctxt</span><span class="err"> </span><span class="nv">syscall-args</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">     </span><span class="nv">kernel-prompt-tag</span><span class="p">)))</span>                        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-syscall-throw</span><span class="err"> </span><span class="nv">thread</span><span class="err"> </span><span class="nv">syscall:thread</span><span class="p">)</span>     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-syscall-throw</span><span class="err"> </span><span class="nv">exit</span><span class="err"> </span><span class="nv">syscall:exit</span><span class="p">)</span>         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-syscall-throw</span><span class="err"> </span><span class="nv">printf</span><span class="err"> </span><span class="nv">syscall:printf</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now that we know how the "thrower" works, we can easily implement the
"catcher":</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;syscall-catch&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">kernel-prompt-tag</span>                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">make-continuation-prompt-tag</span><span class="err"> </span><span class="ss">&#39;kernel</span><span class="p">))</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">run-thread-until-syscall</span><span class="err"> </span><span class="nv">thread-ctxt</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">call-with-continuation-prompt</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">thread-ctxt</span><span class="p">)</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">exit</span><span class="p">))</span>                                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">kernel-prompt-tag</span>                        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">values</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This code says that you just invoke the thread context like a function,
but you wrap it in a new prompt. When the code inside aborts with a
value, then it is returned to the caller of run-thread-until-syscall
(that’s what the values means). We always put in call to exit, in case
the code just ends.</p>

<p>I love this code because it so elegantly separates all the different
features of an operating system: capturing system calls and program
contexts, evaluating the impact on the kernel state for the call, and
running the OS itself. From this foundation you could add other system
calls and scheduling behavior. I call this a "domain-specific operating
system."</p>

<p>One of my pet projects is to build video games in Racket. In that
project, I’m using this idea to implement each agent in the game world
(the enemies, the player, etc) as processes with custom system calls to
interact with each other and the audio/video resources. The kernel there
maintains two separate lists of threads: ones that need to do more work
on this frame and ones that are done until the next frame needs to be
rendered, with a system call to indicate to the OS that all work for a
frame is done. It’s really quite beautiful. Maybe I’ll write more about
it in the future.</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&amp;lt</span><span class="c1">;*&gt; ::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">racket/list</span>                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/match</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">prefix-in</span><span class="err"> </span><span class="nv">racket:</span><span class="err"> </span><span class="nv">racket/base</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span>                                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">snoc</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">append</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="nv">x</span><span class="p">)))</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;kernel&gt;</span>                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;step-one-thread&gt;</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;syscalls&gt;</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;execute-syscall&gt;</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;syscall-throw&gt;</span>                        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;syscall-catch&gt;</span>                        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;example&gt;</span>                              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">boot</span><span class="err"> </span><span class="nv">main</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="/downloads/code/2012-07-12-cont-syscall.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preemptive Threads with Continuations]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/07/02/cont-preempt/"/>
    <updated>2012-07-02T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/07/02/cont-preempt</id>
    <content type="html"><![CDATA[<p>Last week, we covered cooperative threading with continuations. This
week we’ll change the infrastructure to mimic preemption.</p>

<!-- more -->


<p>Before we start, make sure you’ve read last week’s post.</p>

<p>We’ll be working from almost the same example program:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;example&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">main</span><span class="p">)</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">N</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">thread</span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">N</span><span class="err"> </span><span class="mi">2</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;iter: ~a\n&quot;</span><span class="err"> </span><span class="nv">i</span><span class="p">))))</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">thread</span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">for/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">sum</span><span class="err"> </span><span class="mi">0</span><span class="err">]</span><span class="p">)</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="nv">N</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;adder: ~a\n&quot;</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">i</span><span class="err"> </span><span class="nv">sum</span><span class="p">))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">i</span><span class="err"> </span><span class="nv">sum</span><span class="p">)))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The only difference is that I’ve removed the calls to yield after the
calls to printf.</p>

<p>Recall that this program has the following output:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;br/>
</span><span class='line'>adder: 0        &lt;br/>
</span><span class='line'>iter: 0         &lt;br/>
</span><span class='line'>adder: 1        &lt;br/>
</span><span class='line'>iter: 1         &lt;br/>
</span><span class='line'>adder: 3        &lt;br/>
</span><span class='line'>iter: 2         &lt;br/>
</span><span class='line'>adder: 6        &lt;br/>
</span><span class='line'>iter: 3         &lt;br/>
</span><span class='line'>adder: 10       &lt;br/>
</span><span class='line'>iter: 4         &lt;br/>
</span><span class='line'>iter: 5         &lt;br/>
</span><span class='line'>iter: 6         &lt;br/></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We’ll also be using the same basic threading system:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;threading-system&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">ts</span><span class="err"> </span><span class="nv">empty</span><span class="p">)</span>                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">yield</span><span class="p">)</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">ts</span>                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">list</span><span class="p">)</span>                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">void</span><span class="p">)</span><span class="err">]</span>                                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">next</span><span class="err"> </span><span class="nv">rest</span><span class="p">)</span>                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">let/cc</span><span class="err"> </span><span class="nv">k</span>                                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">ts</span><span class="err"> </span><span class="p">(</span><span class="nf">snoc</span><span class="err"> </span><span class="nv">rest</span><span class="err"> </span><span class="nv">k</span><span class="p">))</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">next</span><span class="p">))</span><span class="err">]</span><span class="p">))</span>                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">thread</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>                              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">ts</span>                                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                </span><span class="p">(</span><span class="nf">abort-current-continuation</span>     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                 </span><span class="p">(</span><span class="nf">default-continuation-prompt-tag</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                 </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                   </span><span class="p">(</span><span class="nf">t</span><span class="p">)</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                   </span><span class="p">(</span><span class="nf">exit</span><span class="p">))))</span>                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">              </span><span class="nv">ts</span><span class="p">)))</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">exit</span><span class="p">)</span>                                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">ts</span>                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">list</span><span class="p">)</span>                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">void</span><span class="p">)</span><span class="err">]</span>                                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">next</span><span class="err"> </span><span class="nv">rest</span><span class="p">)</span>                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">ts</span><span class="err"> </span><span class="nv">rest</span><span class="p">)</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">next</span><span class="p">)</span><span class="err">]</span><span class="p">))</span>                                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">call-with-continuation-prompt</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>                                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">main</span><span class="p">)</span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">exit</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, this system is about modeling concurrency through threading, so
there is no actual real concurrency in the system. In contrast, in a
real operating system there is true concurrency because the computer
interacts with concurrently-running pieces of hardware... such as disk
devices, the network card, or an alarm device. When this concurrent
devices message the kernel, through interrupts, it can take control from
the user programs and potentially choose a different user program to
re-use, without the permission of the user process.</p>

<p>This option is not available at the user level, particularly if you do
not assume the pre-existence of a lower-level threading system. Since
I’m a good academic, whenever you face a problem that seems unsolvable,
the one sure path is to redefine success. Thus, we’ll focus on the
"without permission" part of preemptive concurrency—removing the need of
threaded programs from calling yield, but having it called for them,
without their permission, periodically.</p>

<p>The simplest way to realize this is to choose a set of "primitive"
functions provided by the OS and have them call yield on behalf of the
process. For example, printf is a naturally choice.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;primitive-printf&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="o">.</span> <span class="nv">args</span><span class="p">)</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">begin0</span><span class="err"> </span><span class="p">(</span><span class="nf">apply</span><span class="err"> </span><span class="nv">racket:printf</span><span class="err"> </span><span class="nv">args</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">yield</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When we take this approach, we need to ensure that the process has no
other way of getting to these primitives. This is not a very hard thing
to do if we’re implementing a language tower, like Racket, but is more
difficult if we are simply writing a library atop Racket.</p>

<p>This approach has a fundamental trade-off with regards to fairness: the
fewer primitive functions, the more likely it is that the other
processes will starve, as the current thread may not ever call a
primitive, such as printf. A typical solution to this is to call yield
on every function return, including tail-calls (i.e. loops), because
every program must do this very often.</p>

<p>However, if primitive functions always call yield and there are many
such primitive functions, then we’re likely to have too many context
switches. In that case, it’s wise to use some sort of "fuel" counter
that indicates how many function calls are allowed before switching. We
can realize this in the printf code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;fuel-printf&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">INITIAL-FUEL</span><span class="err"> </span><span class="mi">2</span><span class="p">)</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">FUEL</span><span class="err"> </span><span class="nv">INITIAL-FUEL</span><span class="p">)</span>        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="o">.</span> <span class="nv">args</span><span class="p">)</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">begin0</span><span class="err"> </span><span class="p">(</span><span class="nf">apply</span><span class="err"> </span><span class="nv">racket:printf</span><span class="err"> </span><span class="nv">args</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">FUEL</span><span class="err"> </span><span class="p">(</span><span class="nf">sub1</span><span class="err"> </span><span class="nv">FUEL</span><span class="p">))</span> <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">when</span><span class="err"> </span><span class="p">(</span><span class="nf">zero?</span><span class="err"> </span><span class="nv">FUEL</span><span class="p">)</span>      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">FUEL</span><span class="err"> </span><span class="nv">INITIAL-FUEL</span><span class="p">)</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">yield</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In this example I used a fuel of two, which renders the following
output:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;br/>
</span><span class='line'>adder: 0        &lt;br/>
</span><span class='line'>adder: 1        &lt;br/>
</span><span class='line'>iter: 0         &lt;br/>
</span><span class='line'>iter: 1         &lt;br/>
</span><span class='line'>adder: 3        &lt;br/>
</span><span class='line'>adder: 6        &lt;br/>
</span><span class='line'>iter: 2         &lt;br/>
</span><span class='line'>iter: 3         &lt;br/>
</span><span class='line'>adder: 10       &lt;br/>
</span><span class='line'>iter: 4         &lt;br/>
</span><span class='line'>iter: 5         &lt;br/>
</span><span class='line'>iter: 6         &lt;br/></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A nice side-effect of a fuel system like this is that you can give
different processes different amounts of fuel to represent priorities.</p>

<p>This is actually how the Racket threading system is implemented,
although all the continuation capturing, context switching, primitive
functions, and fuel manipulation is done in the C virtual machine. You
can see the macros that manage fuel around line 1581 of include/scheme.h
in the Racket VM source.</p>

<p>Next week, we’ll look at system calls in this infrastructure.</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&amp;lt</span><span class="c1">;*&gt; ::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">racket/list</span>                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/match</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">prefix-in</span><span class="err"> </span><span class="nv">racket:</span><span class="err"> </span><span class="nv">racket/base</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span>                                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">snoc</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">append</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="nv">x</span><span class="p">)))</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;fuel-printf&gt;</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;example&gt;</span>                              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;threading-system&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="/downloads/code/2012-07-02-cont-preempt.rkt">Download</a></p>
]]></content>
  </entry>
  
</feed>
