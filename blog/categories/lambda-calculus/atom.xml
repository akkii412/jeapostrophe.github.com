<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Lambda Calculus | Jay McCarthy]]></title>
  <link href="http://jeapostrophe.github.com/blog/categories/lambda-calculus/atom.xml" rel="self"/>
  <link href="http://jeapostrophe.github.com/"/>
  <updated>2012-09-10T19:38:22-06:00</updated>
  <id>http://jeapostrophe.github.com/</id>
  <author>
    <name><![CDATA[Jay McCarthy]]></name>
    <email><![CDATA[jay.mccarthy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[System F: Interpreter and Type Checker, HOAS style]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/09/03/system-f-hoas-2/"/>
    <updated>2012-09-03T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/09/03/system-f-hoas-2</id>
    <content type="html"><![CDATA[<p>Last time we implemented the obvious version of a System F interpreter
and type-checker. But, it was annoying to have to implement substitution
and a type environment, because they are tedious and error-prone
(especially w.r.t renaming free variables.) This week, we’ll re-present
them using the binding technique, higher-order abstract syntax, or HOAS
(which has a bit of an unsightly pronunciation.)</p>

<!-- more -->


<p>In our last version, we represented terms (types and programs) as
first-order, recursive data. This included representing program
identifiers as symbols. With HOAS, we use identifiers in the
meta-language (Racket) to represent identifiers in the object-language
(System F) and functions in the meta-language (Racket) to represent
binding in the object-language (System F).</p>

<p>Here are the new terms:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;program-terms&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">APP</span><span class="err"> </span><span class="p">(</span><span class="nf">rator</span><span class="err"> </span><span class="nv">rand</span><span class="p">))</span>     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">TYAPP</span><span class="err"> </span><span class="p">(</span><span class="nf">rator</span><span class="err"> </span><span class="nv">rand</span><span class="p">))</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">ABS</span><span class="err"> </span><span class="p">(</span><span class="nf">typ</span><span class="err"> </span><span class="nv">val-&gt;body</span><span class="p">))</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">TYABS</span><span class="err"> </span><span class="p">(</span><span class="nf">type-&gt;body</span><span class="p">))</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">NUM</span><span class="err"> </span><span class="p">(</span><span class="nf">val</span><span class="p">)</span><span class="err"> </span><span class="o">#</span><span class="nv">:transparent</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">SUCC</span><span class="err"> </span><span class="p">())</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The thing to notice is that we’ve removed the ID constructed and removed
the binding names from ABS and TYABS, replacing the body with a function
that accepts the substitution that would have been inserted where the
name was used.</p>

<p>We do the same thing TYID and TYARR ("for all") in the types:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;type-terms&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">ARR</span><span class="err"> </span><span class="p">(</span><span class="nf">dom</span><span class="err"> </span><span class="nv">rng</span><span class="p">)</span><span class="err"> </span><span class="o">#</span><span class="nv">:transparent</span><span class="p">)</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">TYARR</span><span class="err"> </span><span class="p">(</span><span class="nf">type-&gt;body</span><span class="p">)</span><span class="err"> </span><span class="o">#</span><span class="nv">:transparent</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">TYNUM</span><span class="err"> </span><span class="p">()</span><span class="err"> </span><span class="o">#</span><span class="nv">:transparent</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here’s an new version of the example, DOUBLE function.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;double&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">DOUBLE</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">TYABS</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">X</span><span class="p">)</span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">ABS</span><span class="err"> </span><span class="p">(</span><span class="nf">ARR</span><span class="err"> </span><span class="nv">X</span><span class="err"> </span><span class="nv">X</span><span class="p">)</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">f</span><span class="p">)</span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">ABS</span><span class="err"> </span><span class="nv">X</span>                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                 </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">a</span><span class="p">)</span>              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                   </span><span class="p">(</span><span class="nf">APP</span><span class="err"> </span><span class="nv">f</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                        </span><span class="p">(</span><span class="nf">APP</span><span class="err"> </span><span class="nv">f</span>       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                             </span><span class="nv">a</span><span class="p">)))))))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And example use of the function gives it the successor function and
calls it with the number 3.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;example&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">APP</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">APP</span><span class="err"> </span><span class="p">(</span><span class="nf">TYAPP</span><span class="err"> </span><span class="nv">DOUBLE</span><span class="err"> </span><span class="p">(</span><span class="nf">TYNUM</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">SUCC</span><span class="p">))</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">NUM</span><span class="err"> </span><span class="mi">3</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When we run this program, we would expect it to return 5.</p>

<p>The interpreter for this language is still mostly the same, except
wherever we called substitution before, we now have a function that will
do the substitution for us.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;eval&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">eval</span>                        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-lambda</span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">APP</span><span class="err"> </span><span class="nv">rator</span><span class="err"> </span><span class="nv">rand</span><span class="p">)</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="p">(</span><span class="nf">eval</span><span class="err"> </span><span class="nv">rator</span><span class="p">)</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">ABS</span><span class="err"> </span><span class="nv">_</span><span class="err"> </span><span class="nv">val-&gt;body</span><span class="p">)</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">eval</span><span class="err"> </span><span class="p">(</span><span class="nf">val-&gt;body</span><span class="err"> </span><span class="p">(</span><span class="nf">eval</span><span class="err"> </span><span class="nv">rand</span><span class="p">)))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">SUCC</span><span class="p">)</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="p">(</span><span class="nf">eval</span><span class="err"> </span><span class="nv">rand</span><span class="p">)</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         [</span><span class="p">(</span><span class="nf">NUM</span><span class="err"> </span><span class="nv">n</span><span class="p">)</span>                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">NUM</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">n</span><span class="p">))</span><span class="err">]</span><span class="p">)</span><span class="err">]</span><span class="p">)</span><span class="err">]</span>       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">TYAPP</span><span class="err"> </span><span class="nv">rator</span><span class="err"> </span><span class="nv">rand</span><span class="p">)</span>              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="p">(</span><span class="nf">eval</span><span class="err"> </span><span class="nv">rator</span><span class="p">)</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">TYABS</span><span class="err"> </span><span class="nv">type-&gt;body</span><span class="p">)</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">eval</span><span class="err"> </span><span class="p">(</span><span class="nf">type-&gt;body</span><span class="err"> </span><span class="nv">rand</span><span class="p">))</span><span class="err">]</span><span class="p">)</span><span class="err">]</span>  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="nv">val</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="nv">val</span><span class="err">]</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The beautiful thing about this is that we can totally ignore
substitution, because Racket implemented it for us.</p>

<p>HOAS is an amazing technique because of this convenience. If you want to
learn more about HOAS, I suggest starting from <a href="http://barzilay.org/research.html">Eli Barzilay’s various
publications on it</a>.</p>

<p>But, HOAS is not without its problems. The first is that the binding
structure of the meta-language and object-language should be similar, or
at least binding in the object-language should not have any exotic
analysis tied to it that would not be reflected in the meta-language.
This makes using HOAS to implement Scheme and Racket macros challenging.
Another problem is that HOAS terms are not easy to do induction on, so
it is difficult to just "open them up for a look", because the only way
to get at the inside is to perform the substitution. For example, let’s
look at how we need to change the type-checker.</p>

<p>Recall our type checker examples, the doubling example and this program,
which contains a type error:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;type-error&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">APP</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">APP</span><span class="err"> </span><span class="p">(</span><span class="nf">TYAPP</span><span class="err"> </span><span class="nv">DOUBLE</span><span class="err"> </span><span class="p">(</span><span class="nf">TYNUM</span><span class="p">))</span>         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">ABS</span><span class="err"> </span><span class="p">(</span><span class="nf">TYNUM</span><span class="p">)</span>                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">           </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">N</span><span class="p">)</span>                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">ABS</span><span class="err"> </span><span class="p">(</span><span class="nf">TYNUM</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">U</span><span class="p">)</span><span class="err"> </span><span class="nv">N</span><span class="p">)))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">NUM</span><span class="err"> </span><span class="mi">3</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The first thing about the type-checker is that it doesn’t use an
environment or substitution, as it did before. Instead, for type
applications, where it used type substitution it simply uses the HOAS
substitution. But, the situation is more complicated for the replacement
of the environment. The environment was used to map value identifiers to
their types during the analysis. But during type-checking, we have no
values, so we don’t have anything to substitute in place of the
identifier so we can inspect the body of the function.</p>

<p>We could create a new kind of value term that "is" a type that we could
substitute in with the expected type. I don’t like this approach because
these terms don’t have any meaningful run-time behavior. Instead, I like
to write a function that takes a type and creates a value that has that
type: type->val.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;type-&gt;val&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">type-&gt;val</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-lambda</span>                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">TYNUM</span><span class="p">)</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">NUM</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span><span class="err">]</span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">ARR</span><span class="err"> </span><span class="nv">dom</span><span class="err"> </span><span class="nv">rng</span><span class="p">)</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">ABS</span><span class="err"> </span><span class="nv">dom</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">val</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">type-&gt;val</span><span class="err"> </span><span class="nv">rng</span><span class="p">)))</span><span class="err">]</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once this function is in place, it is simple to write the type-of
function (I’ve put the most interesting cases on top):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;type-of&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">type-of</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-lambda</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">ABS</span><span class="err"> </span><span class="nv">ty</span><span class="err"> </span><span class="nv">val-&gt;body</span><span class="p">)</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">ARR</span><span class="err"> </span><span class="nv">ty</span><span class="err"> </span><span class="p">(</span><span class="nf">type-of</span><span class="err"> </span><span class="p">(</span><span class="nf">val-&gt;body</span><span class="err"> </span><span class="p">(</span><span class="nf">type-&gt;val</span><span class="err"> </span><span class="nv">ty</span><span class="p">))))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">TYAPP</span><span class="err"> </span><span class="nv">rator</span><span class="err"> </span><span class="nv">rand</span><span class="p">)</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="p">(</span><span class="nf">type-of</span><span class="err"> </span><span class="nv">rator</span><span class="p">)</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">TYARR</span><span class="err"> </span><span class="nv">type-&gt;body</span><span class="p">)</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">type-of</span><span class="err"> </span><span class="p">(</span><span class="nf">type-&gt;body</span><span class="err"> </span><span class="nv">rand</span><span class="p">))</span><span class="err">]</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      [</span><span class="nv">&lt;em&gt;</span>                                        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="no">#f</span><span class="err">]</span><span class="p">)</span><span class="err">]</span>                                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">APP</span><span class="err"> </span><span class="nv">rator</span><span class="err"> </span><span class="nv">rand</span><span class="p">)</span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="p">(</span><span class="nf">type-of</span><span class="err"> </span><span class="nv">rator</span><span class="p">)</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">ARR</span><span class="err"> </span><span class="nv">dom</span><span class="err"> </span><span class="nv">rng</span><span class="p">)</span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">and</span><span class="err"> </span><span class="p">(</span><span class="nf">equal?</span><span class="err"> </span><span class="nv">dom</span><span class="err"> </span><span class="p">(</span><span class="nf">type-of</span><span class="err"> </span><span class="nv">rand</span><span class="p">))</span>         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">            </span><span class="nv">rng</span><span class="p">)</span><span class="err">]</span>                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      [</span><span class="nv">&lt;/em&gt;</span>                                        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="no">#f</span><span class="err">]</span><span class="p">)</span><span class="err">]</span>                                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">TYABS</span><span class="err"> </span><span class="nv">type-&gt;body</span><span class="p">)</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">TYARR</span><span class="err"> </span><span class="nv">type-&gt;body</span><span class="p">)</span><span class="err">]</span>                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">SUCC</span><span class="p">)</span>                                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">ARR</span><span class="err"> </span><span class="p">(</span><span class="nf">TYNUM</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">TYNUM</span><span class="p">))</span><span class="err">]</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">NUM</span><span class="err"> </span><span class="nv">&lt;em&gt;</span><span class="p">)</span>                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">TYNUM</span><span class="p">)</span><span class="err">]</span>                                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="nv">&lt;/em&gt;</span>                                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="no">#f</span><span class="err">]</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And now we have another implementation of System F.</p>

<p>One other great thing about HOAS though, that could inspire another
implementation, is that it becomes easier to use GADTs to enforce /in
the meta-language/ the type-correctness of the object-language terms. My
student, Dan Burton, has written about that in <a href="https://github.com/DanBurton/Blog/blob/master/Literate%20Haskell/SystemF.lhs">this literate Haskell
file</a>.</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&amp;lt</span><span class="c1">;*&gt; ::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">racket/match</span><span class="p">)</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;program-terms&gt;</span>                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;type-terms&gt;</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;double&gt;</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;eval&gt;</span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;type-&gt;val&gt;</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;type-of&gt;</span>                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">rackunit</span><span class="p">)</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span><span class="err"> </span><span class="p">(</span><span class="nf">eval</span><span class="err"> </span><span class="nv">&lt;example&gt;</span><span class="p">)</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">NUM</span><span class="err"> </span><span class="mi">5</span><span class="p">))</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span><span class="err"> </span><span class="p">(</span><span class="nf">type-of</span><span class="err"> </span><span class="nv">&lt;example&gt;</span><span class="p">)</span> <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">TYNUM</span><span class="p">))</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span><span class="err"> </span><span class="p">(</span><span class="nf">type-of</span><span class="err"> </span><span class="nv">&lt;type-error&gt;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">              </span><span class="no">#f</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[System F: Interpreter and Type Checker]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/08/28/system-f-hoas/"/>
    <updated>2012-08-28T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/08/28/system-f-hoas</id>
    <content type="html"><![CDATA[<p>System F is a very powerful programming and type system. It is fun to
make an interpreter for, but I think it is even more fun to write such
an interpreter using higher-order abstract syntax. In this post, I
describe how a normal System F interpreter works and next week we’ll see
the HOAS version.</p>

<!-- more -->


<p>System F is basically the same as the normal Lambda Calculus, except
that it has first-class, explicit polymorphism.</p>

<p>Its program terms are: identifiers, applications, type applications (for
instantiating polymorphism), abstractions (value
functions), and type abstractions (type functions, or points of
polymorphism). For the purposes of making the code more meaningful, I’ll
also add primitive numbers and the successor function.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;program-terms&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">ID</span><span class="err"> </span><span class="p">(</span><span class="nf">sym</span><span class="p">))</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">APP</span><span class="err"> </span><span class="p">(</span><span class="nf">rator</span><span class="err"> </span><span class="nv">rand</span><span class="p">))</span>     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">TYAPP</span><span class="err"> </span><span class="p">(</span><span class="nf">rator</span><span class="err"> </span><span class="nv">rand</span><span class="p">))</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">ABS</span><span class="err"> </span><span class="p">(</span><span class="nf">typ</span><span class="err"> </span><span class="nv">sym</span><span class="err"> </span><span class="nv">body</span><span class="p">))</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">TYABS</span><span class="err"> </span><span class="p">(</span><span class="nf">sym</span><span class="err"> </span><span class="nv">body</span><span class="p">))</span>     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">NUM</span><span class="err"> </span><span class="p">(</span><span class="nf">val</span><span class="p">)</span><span class="err"> </span><span class="o">#</span><span class="nv">:transparent</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">SUCC</span><span class="err"> </span><span class="p">())</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Its type terms are: type identifiers, arrows and type arrows (for the
two kinds of abstraction). I’ll also add a primitive number type.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;type-terms&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">TYID</span><span class="err"> </span><span class="p">(</span><span class="nf">sym</span><span class="p">)</span><span class="err"> </span><span class="o">#</span><span class="nv">:transparent</span><span class="p">)</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">ARR</span><span class="err"> </span><span class="p">(</span><span class="nf">dom</span><span class="err"> </span><span class="nv">rng</span><span class="p">)</span><span class="err"> </span><span class="o">#</span><span class="nv">:transparent</span><span class="p">)</span> <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">TYARR</span><span class="err"> </span><span class="p">(</span><span class="nf">sym</span><span class="err"> </span><span class="nv">body</span><span class="p">)</span><span class="err"> </span><span class="o">#</span><span class="nv">:transparent</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">TYNUM</span><span class="err"> </span><span class="p">()</span><span class="err"> </span><span class="o">#</span><span class="nv">:transparent</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here’s an example function: the polymorphic doubling function that
applies its argument twice.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;double&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">DOUBLE</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">TYABS</span><span class="err"> </span><span class="ss">&#39;X</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">ABS</span><span class="err"> </span><span class="p">(</span><span class="nf">ARR</span><span class="err"> </span><span class="p">(</span><span class="nf">TYID</span><span class="err"> </span><span class="ss">&#39;X</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">TYID</span><span class="err"> </span><span class="ss">&#39;X</span><span class="p">))</span> <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">              </span><span class="ss">&#39;f</span>                        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">ABS</span><span class="err"> </span><span class="p">(</span><span class="nf">TYID</span><span class="err"> </span><span class="ss">&#39;X</span><span class="p">)</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                   </span><span class="ss">&#39;a</span>                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                   </span><span class="p">(</span><span class="nf">APP</span><span class="err"> </span><span class="p">(</span><span class="nf">ID</span><span class="err"> </span><span class="ss">&#39;f</span><span class="p">)</span>         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                        </span><span class="p">(</span><span class="nf">APP</span><span class="err"> </span><span class="p">(</span><span class="nf">ID</span><span class="err"> </span><span class="ss">&#39;f</span><span class="p">)</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                             </span><span class="p">(</span><span class="nf">ID</span><span class="err"> </span><span class="ss">&#39;a</span><span class="p">)))))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And example use of the function gives it the successor function and
calls it with the number 3.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;example&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">APP</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">APP</span><span class="err"> </span><span class="p">(</span><span class="nf">TYAPP</span><span class="err"> </span><span class="nv">DOUBLE</span><span class="err"> </span><span class="p">(</span><span class="nf">TYNUM</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">SUCC</span><span class="p">))</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">NUM</span><span class="err"> </span><span class="mi">3</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When we run this program, we would expect it to return 5.</p>

<p>An interpreter for this language is fairly obvious:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;eval&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">eval</span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-lambda</span>                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">APP</span><span class="err"> </span><span class="nv">rator</span><span class="err"> </span><span class="nv">rand</span><span class="p">)</span>                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="p">(</span><span class="nf">eval</span><span class="err"> </span><span class="nv">rator</span><span class="p">)</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">ABS</span><span class="err"> </span><span class="nv">_</span><span class="err"> </span><span class="nv">id</span><span class="err"> </span><span class="nv">body</span><span class="p">)</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">eval</span><span class="err"> </span><span class="p">(</span><span class="nf">subst</span><span class="err"> </span><span class="nv">id</span><span class="err"> </span><span class="p">(</span><span class="nf">eval</span><span class="err"> </span><span class="nv">rand</span><span class="p">)</span><span class="err"> </span><span class="nv">body</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">SUCC</span><span class="p">)</span>                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="p">(</span><span class="nf">eval</span><span class="err"> </span><span class="nv">rand</span><span class="p">)</span>               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">         [</span><span class="p">(</span><span class="nf">NUM</span><span class="err"> </span><span class="nv">n</span><span class="p">)</span>                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">NUM</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">n</span><span class="p">))</span><span class="err">]</span><span class="p">)</span><span class="err">]</span><span class="p">)</span><span class="err">]</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">TYAPP</span><span class="err"> </span><span class="nv">rator</span><span class="err"> </span><span class="nv">rand</span><span class="p">)</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="p">(</span><span class="nf">eval</span><span class="err"> </span><span class="nv">rator</span><span class="p">)</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">TYABS</span><span class="err"> </span><span class="nv">id</span><span class="err"> </span><span class="nv">body</span><span class="p">)</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">eval</span><span class="err"> </span><span class="p">(</span><span class="nf">type-subst</span><span class="err"> </span><span class="nv">id</span><span class="err"> </span><span class="nv">rand</span><span class="err"> </span><span class="nv">body</span><span class="p">))</span><span class="err">]</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">   [</span><span class="nv">val</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="nv">val</span><span class="err">]</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>But it relies on two substitution functions: one for value abstractions
and another for type abstractions. These functions, while not especially
complicated, are tedious to write and only get more complicated as
binding rules become more complex.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;subst&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">subst</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">v</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">t</span>                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">ID</span><span class="err"> </span><span class="nv">sym</span><span class="p">)</span>                        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">eq?</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">sym</span><span class="p">)</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="nv">v</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="nv">t</span><span class="p">)</span><span class="err">]</span>                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">SUCC</span><span class="p">)</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="nv">t</span><span class="err">]</span>                              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">APP</span><span class="err"> </span><span class="nv">rator</span><span class="err"> </span><span class="nv">rand</span><span class="p">)</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">APP</span><span class="err"> </span><span class="p">(</span><span class="nf">subst</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">v</span><span class="err"> </span><span class="nv">rator</span><span class="p">)</span>          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">subst</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">v</span><span class="err"> </span><span class="nv">rand</span><span class="p">))</span><span class="err">]</span>         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">ABS</span><span class="err"> </span><span class="nv">ty</span><span class="err"> </span><span class="nv">id</span><span class="err"> </span><span class="nv">body</span><span class="p">)</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">eq?</span><span class="err"> </span><span class="nv">id</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="nv">t</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">ABS</span><span class="err"> </span><span class="nv">ty</span><span class="err"> </span><span class="nv">id</span><span class="err"> </span><span class="p">(</span><span class="nf">subst</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">v</span><span class="err"> </span><span class="nv">body</span><span class="p">)))</span><span class="err">]</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">type-subst</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">v</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">t</span>                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">SUCC</span><span class="p">)</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="nv">t</span><span class="err">]</span>                              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">TYID</span><span class="err"> </span><span class="nv">sym</span><span class="p">)</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">eq?</span><span class="err"> </span><span class="nv">sym</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="nv">v</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="nv">t</span><span class="p">)</span><span class="err">]</span>                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">APP</span><span class="err"> </span><span class="nv">rator</span><span class="err"> </span><span class="nv">rand</span><span class="p">)</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">APP</span><span class="err"> </span><span class="p">(</span><span class="nf">type-subst</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">v</span><span class="err"> </span><span class="nv">rator</span><span class="p">)</span>     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">type-subst</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">v</span><span class="err"> </span><span class="nv">rand</span><span class="p">))</span><span class="err">]</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">ABS</span><span class="err"> </span><span class="nv">ty</span><span class="err"> </span><span class="nv">id</span><span class="err"> </span><span class="nv">body</span><span class="p">)</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">ABS</span><span class="err"> </span><span class="p">(</span><span class="nf">type-subst</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">v</span><span class="err"> </span><span class="nv">ty</span><span class="p">)</span>        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="nv">id</span>                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">type-subst</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">v</span><span class="err"> </span><span class="nv">body</span><span class="p">))</span><span class="err">]</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">ARR</span><span class="err"> </span><span class="nv">dom</span><span class="err"> </span><span class="nv">rng</span><span class="p">)</span>                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">ARR</span><span class="err"> </span><span class="p">(</span><span class="nf">type-subst</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">v</span><span class="err"> </span><span class="nv">dom</span><span class="p">)</span>       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">type-subst</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">v</span><span class="err"> </span><span class="nv">rng</span><span class="p">))</span><span class="err">]</span>     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">ID</span><span class="err"> </span><span class="nv">sym</span><span class="p">)</span>                        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="nv">t</span><span class="err">]</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>But, this language does not just have runtime behavior, we also need a
type checker. As test cases, we’ll type the example and this program,
which contains a type error:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;type-error&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">APP</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">APP</span><span class="err"> </span><span class="p">(</span><span class="nf">TYAPP</span><span class="err"> </span><span class="nv">DOUBLE</span><span class="err"> </span><span class="p">(</span><span class="nf">TYNUM</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">ABS</span><span class="err"> </span><span class="p">(</span><span class="nf">TYNUM</span><span class="p">)</span><span class="err"> </span><span class="ss">&#39;N</span>     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">           </span><span class="p">(</span><span class="nf">ABS</span><span class="err"> </span><span class="p">(</span><span class="nf">TYNUM</span><span class="p">)</span><span class="err"> </span><span class="ss">&#39;U&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">                </span><span class="p">(</span><span class="nf">ID</span><span class="err"> </span><span class="ss">&#39;N</span><span class="p">))))</span><span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">NUM</span><span class="err"> </span><span class="mi">3</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The type checker is fairly straight-forward relative to the evaluator.
We won’t do substitution for value abstraction, instead we’ll keep a
type environment. We will need to do substitution for type applications,
though.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;type-of&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">type-of</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">type-of/env</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="p">)</span><span class="err"> </span><span class="nv">t</span><span class="p">))</span>                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">type-of/env</span><span class="err"> </span><span class="nv">env</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">t</span>                                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">ID</span><span class="err"> </span><span class="nv">sym</span><span class="p">)</span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">env</span><span class="err"> </span><span class="nv">sym</span><span class="p">)</span><span class="err">]</span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">ABS</span><span class="err"> </span><span class="nv">ty</span><span class="err"> </span><span class="nv">id</span><span class="err"> </span><span class="nv">body</span><span class="p">)</span>                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">ARR</span><span class="err"> </span><span class="nv">ty</span><span class="err"> </span><span class="p">(</span><span class="nf">type-of/env</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-set</span><span class="err"> </span><span class="nv">env</span><span class="err"> </span><span class="nv">id</span><span class="err"> </span><span class="nv">ty</span><span class="p">)</span><span class="err"> </span><span class="nv">body</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">APP</span><span class="err"> </span><span class="nv">rator</span><span class="err"> </span><span class="nv">rand</span><span class="p">)</span>                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="p">(</span><span class="nf">type-of/env</span><span class="err"> </span><span class="nv">env</span><span class="err"> </span><span class="nv">rator</span><span class="p">)</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       [</span><span class="p">(</span><span class="nf">ARR</span><span class="err"> </span><span class="nv">dom</span><span class="err"> </span><span class="nv">rng</span><span class="p">)</span>                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">and</span><span class="err"> </span><span class="p">(</span><span class="nf">equal?</span><span class="err"> </span><span class="nv">dom</span><span class="err"> </span><span class="p">(</span><span class="nf">type-of/env</span><span class="err"> </span><span class="nv">env</span><span class="err"> </span><span class="nv">rand</span><span class="p">))</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">             </span><span class="nv">rng</span><span class="p">)</span><span class="err">]</span>                                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       [</span><span class="nv">&lt;em&gt;</span>                                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="no">#f</span><span class="err">]</span><span class="p">)</span><span class="err">]</span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">TYAPP</span><span class="err"> </span><span class="nv">rator</span><span class="err"> </span><span class="nv">rand</span><span class="p">)</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="p">(</span><span class="nf">type-of/env</span><span class="err"> </span><span class="nv">env</span><span class="err"> </span><span class="nv">rator</span><span class="p">)</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       [</span><span class="p">(</span><span class="nf">TYARR</span><span class="err"> </span><span class="nv">id</span><span class="err"> </span><span class="nv">body</span><span class="p">)</span>                             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">type-of/env</span><span class="err"> </span><span class="nv">env</span><span class="err"> </span><span class="p">(</span><span class="nf">type-subst</span><span class="err"> </span><span class="nv">id</span><span class="err"> </span><span class="nv">rand</span><span class="err"> </span><span class="nv">body</span><span class="p">))</span><span class="err">]</span><span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       [</span><span class="nv">&lt;/em&gt;</span>                                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="no">#f</span><span class="err">]</span><span class="p">)</span><span class="err">]</span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">TYABS</span><span class="err"> </span><span class="nv">id</span><span class="err"> </span><span class="nv">body</span><span class="p">)</span>                                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">TYARR</span><span class="err"> </span><span class="nv">id</span><span class="err"> </span><span class="nv">body</span><span class="p">)</span><span class="err">]</span>                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">SUCC</span><span class="p">)</span>                                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">ARR</span><span class="err"> </span><span class="p">(</span><span class="nf">TYNUM</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">TYNUM</span><span class="p">))</span><span class="err">]</span>                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">NUM</span><span class="err"> </span><span class="nv">&lt;em&gt;</span><span class="p">)</span>                                        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">TYNUM</span><span class="p">)</span><span class="err">]</span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    [</span><span class="nv">&lt;/em&gt;</span>                                              <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">     </span><span class="no">#f</span><span class="err">]</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>At this point, we have a basic and obvious implementation of System F.
There are a few things annoying about it though, mainly to do with how
we have to deal with identifiers through the tedious substitution
function and the ugly use of a type environment.</p>

<p>In the next post, we’ll see how to remedy this through the use of
higher-order abstract syntax.</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&amp;lt</span><span class="c1">;*&gt; ::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">racket/match</span><span class="p">)</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;program-terms&gt;</span>                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;type-terms&gt;</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;double&gt;</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;eval&gt;</span>                            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;subst&gt;</span>                           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;type-of&gt;</span>                         <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">rackunit</span><span class="p">)</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span><span class="err"> </span><span class="p">(</span><span class="nf">eval</span><span class="err"> </span><span class="nv">&lt;example&gt;</span><span class="p">)</span>    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">NUM</span><span class="err"> </span><span class="mi">5</span><span class="p">))</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span><span class="err"> </span><span class="p">(</span><span class="nf">type-of</span><span class="err"> </span><span class="nv">&lt;example&gt;</span><span class="p">)</span> <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">TYNUM</span><span class="p">))</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span><span class="err"> </span><span class="p">(</span><span class="nf">type-of</span><span class="err"> </span><span class="nv">&lt;type-error&gt;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">              </span><span class="no">#f</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Church Encoding]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/08/20/church-encoding/"/>
    <updated>2012-08-20T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/08/20/church-encoding</id>
    <content type="html"><![CDATA[<p>One of my favourite ideas in the Lambda Calculus in Church Encoding.
This is the basis of how the Lambda Calculus, with only functions, can
represent other kinds of data.</p>

<!-- more -->


<p>The Lambda Calculus is a very simple language. It just has variable
references, unary functions, and unary applications. Yet, it can express
all computations. A natural question is how this simple language can
represent things like numbers, lists, and other complex data structures?</p>

<h1>Booleans</h1>

<p>I think it is actually easier to start with the most basic of
data-structures: the boolean.</p>

<p>Everyone knows booleans. There are just two of them: true and false. And
what do we do with them? We decide whether to launch the missiles or to
bake a cake:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;boolean-example&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="nv">&lt;some-boolean&gt;</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">launch-the-missiles</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">bake-a-cake</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The essence of being a boolean is being able to decide between two
choices. We can represent this idea in Lambda simply:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;booleans&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">TRUE</span>        <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">first-choice</span><span class="p">)</span> <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">second-choice</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="nv">first-choice</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">FALSE</span>       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">first-choice</span><span class="p">)</span> <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">second-choice</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="nv">second-choice</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The booleans are just functions that when given two choices, return one
or the other. These values can easily be used with if:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;if&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">IF</span>                                                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">condition</span><span class="p">)</span>                                               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">true-side-thunk</span><span class="p">)</span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">false-side-thunk</span><span class="p">)</span>                                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(((</span><span class="nf">condition</span><span class="err"> </span><span class="nv">true-side-thunk</span><span class="p">)</span><span class="err"> </span><span class="nv">false-side-thunk</span><span class="p">)</span><span class="err"> </span><span class="nv">UNIT</span><span class="p">)))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>IF simply takes a boolean, deliver the thunks, and calls the one that
the condition selects. This example makes the right choice:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;real-boolean-example&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(((</span><span class="nf">IF</span><span class="err"> </span><span class="nv">FALSE</span><span class="p">)</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="ss">&#39;launch-the-missiles</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="ss">&#39;bake-a-cake</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Booleans are a microcosm of the idea of Church Encoding: represent data
by what it /does/ rather than "is". Other to put it another way, data
"isn’t" anything, it is just what it does. Booleans make choices, so
encode them as functions that make choices.</p>

<p>All boolean functions can be build with these definitions. There’s
normally an obvious way and clever way. Here are two implementations of
and:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;and&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">AND-OBVIOUS</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">left-side</span><span class="p">)</span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">right-side</span><span class="p">)</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(((</span><span class="nf">IF</span><span class="err"> </span><span class="nv">left-side</span><span class="p">)</span>               <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="nv">right-side</span><span class="p">))</span>          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">       </span><span class="nv">FALSE</span><span class="p">))))</span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">AND-CLEVER</span>                   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">left-side</span><span class="p">)</span>                     <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">right-side</span><span class="p">)</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">((</span><span class="nf">left-side</span><span class="err"> </span><span class="nv">right-side</span><span class="p">)</span><span class="err"> </span><span class="nv">FALSE</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The "obvious" way is based on the traditional understanding of data
where we must use functions like IF, whereas the "clever" way is based
on the understanding that booleans <em>are</em> IF, so we don’t need to call
it.</p>

<h1>Natural numbers</h1>

<p>Let’s do something a little bit more complicated: numbers.</p>

<p>The traditional Church Encoding of numbers all starts with two things:
zero and the "plus one"—or successor—function.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;numbers&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">ZERO</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">f</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">z</span><span class="p">)</span><span class="err"> </span><span class="nv">z</span><span class="p">)))</span>                  <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">SUCC</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">n</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">f</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">z</span><span class="p">)</span><span class="err"> </span><span class="p">((</span><span class="nf">n</span><span class="err"> </span><span class="nv">f</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">f</span><span class="err"> </span><span class="nv">z</span><span class="p">))))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Using these definitions you can implement stuff like addition and derive
other numbers, like one and two:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;addition&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">ONE</span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">f</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">z</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">f</span><span class="err"> </span><span class="nv">z</span><span class="p">))))</span>                          <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">TWO</span>                                       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">f</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">z</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">f</span><span class="err"> </span><span class="p">(</span><span class="nf">f</span><span class="err"> </span><span class="nv">z</span><span class="p">)))))</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">PLUS</span>                                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">n</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">m</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">f</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">z</span><span class="p">)</span><span class="err"> </span><span class="p">((</span><span class="nf">n</span><span class="err"> </span><span class="nv">f</span><span class="p">)</span><span class="err"> </span><span class="p">((</span><span class="nf">m</span><span class="err"> </span><span class="nv">f</span><span class="p">)</span><span class="err"> </span><span class="nv">z</span><span class="p">)))))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>But what do these functions even mean? If Church Encoding is about
representing data with what it <em>does</em>... what do numbers <em>do</em>?</p>

<p>Let’s take a small detour in the land of my second favourite
programming, Coq. This is the type of natural number induction:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;br/>
</span><span class='line'>forall P : nat -> Prop,           &lt;br/>
</span><span class='line'>    P 0                           &lt;br/>
</span><span class='line'> -> (forall m : nat, P m -> P (S m))
</span><span class='line'> -> forall n : nat,               &lt;br/>
</span><span class='line'>     P n</span></code></pre></td></tr></table></div></figure></notextile></div>        <br/>
 </p>

<p>This say that if you have a property about numbers, and give a proof of
that property for zero, then give a way of taking a proof about m and
returning a proof about m + 1, then for any number n, you can have a
proof about n. How could this function be implemented?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;nat_ind&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">nat_ind</span><span class="err"> </span><span class="nv">Pz</span><span class="err"> </span><span class="nv">Pm2PSm</span><span class="p">)</span>   <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">n</span><span class="p">)</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">zero?</span><span class="err"> </span><span class="nv">n</span><span class="p">)</span>             <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="nv">Pz</span>                      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">Pm2PSm</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="p">(</span><span class="nf">sub1</span><span class="err"> </span><span class="nv">n</span><span class="p">)))))</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">loop</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Natural number induction’s type suggests that it would do interesting
work, but really it was you that did all the work. You gave the proof
about zero, which it returns to you if you call it with zero. You gave
the proof from m to m + 1, which it just uses in case the number isn’t
zero. All natural number induction does is do a trivial loop calling
functions you gave it.</p>

<p>Consider calling this with two. Here’s the trace:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&lt;nat_ind_trace2&gt;</span> <span class="nv">::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="mi">2</span><span class="p">)</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Pm2PSm</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="mi">1</span><span class="p">))</span>       <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Pm2PSm</span><span class="err"> </span><span class="p">(</span><span class="nf">Pm2PSm</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Pm2PSm</span><span class="err"> </span><span class="p">(</span><span class="nf">Pm2PSm</span><span class="err"> </span><span class="nv">Pz</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Hmm... that looks familiar.</p>

<p>Now what does all this natural number induction have to do with Church
Encoding?</p>

<p>Well, Church Encoding of natural numbers represents them as their own
induction functions. The Church Encoding of ’two’ IS “(Pm2PSm (Pm2PSm
Pz))“ where the proof for zero and the proof for the successor are
passed as arguments.</p>

<p>In the same way the essence of booleans is choice, the essence of
natural numbers is induction.</p>

<p>Isn’t that awesome?</p>

<p>As an aside, Church Encoding is Ur-Object-Oriented Programming. For more
on this, read William Cook’s great paper: <a href="http://www.cs.utexas.edu/~wcook/Drafts/2009/essay.pdf">On understanding data
abstraction,
revisited</a>.</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;&amp;lt</span><span class="c1">;*&gt; ::=&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">UNIT</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="nv">x</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span>                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;booleans&gt;</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;if&gt;</span>                 <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;real-boolean-example&gt;</span>
</span><span class='line'>  <span class="err"> </span>                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;and&gt;</span>                <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;numbers&gt;</span>            <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;addition&gt;</span>           <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="err"> </span>                    <span class="nv">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nv">&lt;nat_ind&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
