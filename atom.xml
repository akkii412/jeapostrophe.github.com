<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jay McCarthy]]></title>
  <link href="http://jeapostrophe.github.com/atom.xml" rel="self"/>
  <link href="http://jeapostrophe.github.com/"/>
  <updated>2012-06-19T12:29:22-06:00</updated>
  <id>http://jeapostrophe.github.com/</id>
  <author>
    <name><![CDATA[Jay McCarthy]]></name>
    <email><![CDATA[jay.mccarthy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Delimited Pipes]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/06/18/pipe/"/>
    <updated>2012-06-18T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/06/18/pipe</id>
    <content type="html"><![CDATA[<p>I love continuations. We couldn’t do much of anything on a computer
without them. But, I love first-class access to continuations (i.e.
call/cc) even more.</p>

<p>The standard reason is that call/cc allows you to express things that
are not possible at the user-level without it. For example, generators,
implicit back-tracking search, threads, etc.</p>

<p>However, many of these use-cases for call/cc use mutation in an
essential way and have let some to criticize useful uses of call/cc to
be necessarily tied to mutation.</p>

<p>In this post, I’ll show how call/cc saves use from mutation and produces
something pretty elegant.</p>

<!-- more -->


<p>Suppose you are parsing a parenthetical language (for some crazy reason)
and you need to associate parens and then deal with the list structure
later.</p>

<p>The obvious way to do that is:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;obvious&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">parse</span><span class="err"> </span><span class="nv">ip</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">inside?</span><span class="err"> </span><span class="no">#f</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="p">(</span><span class="nf">read-char</span><span class="err"> </span><span class="nv">ip</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      [</span><span class="sc">#\(</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="no">#t</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">inside?</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="sc">#\)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="nv">inside?</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">empty</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;parse</span><span class="err"> </span><span class="s">&quot;Mismatching right paren&quot;</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">?</span><span class="err"> </span><span class="nv">eof-object?</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="nv">inside?</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;parse</span><span class="err"> </span><span class="s">&quot;Mismatching left paren&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">empty</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="nv">this</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">inside?</span><span class="p">))</span><span class="err">]</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here’s a little test suite:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;tests&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">test</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">=&gt;</span><span class="err"> </span><span class="nv">empty</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="s">&quot;a&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">=&gt;</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="sc">#\a</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="s">&quot;(&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">=error&gt;</span><span class="err"> </span><span class="o">#</span><span class="nv">rx</span><span class="s">&quot;left paren&quot;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="s">&quot;)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">=error&gt;</span><span class="err"> </span><span class="o">#</span><span class="nv">rx</span><span class="s">&quot;right paren&quot;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="s">&quot;b(a)c&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">=&gt;</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="sc">#\b</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="sc">#\a</span><span class="p">)</span><span class="err"> </span><span class="sc">#\c</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="s">&quot;(a((a)a))b(a)c&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">=&gt;</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="sc">#\a</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="sc">#\a</span><span class="p">)</span><span class="err"> </span><span class="sc">#\a</span><span class="p">))</span><span class="err"> </span><span class="sc">#\b</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="sc">#\a</span><span class="p">)</span><span class="err"> </span><span class="sc">#\c</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem with this solution is that it uses side-effects! Each call
to read-char is mutation of the input-port data-structure’s
next-position-to-read field. It would be more elegant to use a stream to
represent the input.</p>

<p>Unfortunately, the obvious stream-based solution is broken:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;obvious-list&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">parse</span><span class="err"> </span><span class="nv">i</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="nv">i</span><span class="err">] [</span><span class="nv">inside?</span><span class="err"> </span><span class="no">#f</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">i</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="sc">#\(</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">more</span><span class="err"> </span><span class="no">#t</span><span class="p">)</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">more</span><span class="err"> </span><span class="nv">inside?</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="sc">#\)</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="nv">inside?</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">empty</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;parse</span><span class="err"> </span><span class="s">&quot;Mismatching right paren&quot;</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="nv">inside?</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;parse</span><span class="err"> </span><span class="s">&quot;Mismatching left paren&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">empty</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">more</span><span class="err"> </span><span class="nv">inside?</span><span class="p">))</span><span class="err">]</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem is that after the matching right-paren is found for a given
left-paren, you must &#8220;skip&#8221; the interleaving characters on the
recursion. In the code, the problem is the first case of the match,
where more is used in two recursive calls.</p>

<p>The correct version is written monadically:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;monad-list&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">parse</span><span class="err"> </span><span class="nv">i</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="nv">i</span><span class="err">] [</span><span class="nv">inside?</span><span class="err"> </span><span class="no">#f</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">i</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="sc">#\(</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">define-values</span><span class="err"> </span><span class="p">(</span><span class="nf">this</span><span class="err"> </span><span class="nv">more-p</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">more</span><span class="err"> </span><span class="no">#t</span><span class="p">))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">define-values</span><span class="err"> </span><span class="p">(</span><span class="nf">that</span><span class="err"> </span><span class="nv">more-pp</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">more-p</span><span class="err"> </span><span class="nv">inside?</span><span class="p">))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">values</span><span class="err"> </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="nv">that</span><span class="p">)</span>
</span><span class='line'>  <span class="err">               </span><span class="nv">more-pp</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="sc">#\)</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="nv">inside?</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">values</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;parse</span><span class="err"> </span><span class="s">&quot;Mismatching right paren&quot;</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="nv">inside?</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;parse</span><span class="err"> </span><span class="s">&quot;Mismatching left paren&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">values</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">empty</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">define-values</span><span class="err"> </span><span class="p">(</span><span class="nf">that</span><span class="err"> </span><span class="nv">more-p</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">more</span><span class="err"> </span><span class="nv">inside?</span><span class="p">))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">values</span><span class="err"> </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="nv">that</span><span class="p">)</span><span class="err"> </span><span class="nv">more-p</span><span class="p">)</span><span class="err">]</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, monadic programming is effectful programming, just with
more pain, because you have to do the plumbing yourself or contaminate
the rest of your program with the effectful type sewage.</p>

<p>If we look at the monadic program, though, we can see that the only
useful threading is between the first and second cases of the match. The
stuff after the right-paren gets passed out to the left-paren context.
Why not just implement that &#8220;piping&#8221; to the calling context directly as
a feature?</p>

<p>The final code will look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;pipe-list&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">parse</span><span class="err"> </span><span class="nv">i</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="nv">i</span><span class="err">] [</span><span class="nv">inside?</span><span class="err"> </span><span class="no">#f</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">i</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="sc">#\(</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">define-values</span><span class="err"> </span><span class="p">(</span><span class="nf">more-p</span><span class="err"> </span><span class="nv">pipe-in</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">pipe</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">more</span><span class="err"> </span><span class="no">#t</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="p">(</span><span class="nf">pipe-in</span><span class="err"> </span><span class="nv">empty</span><span class="p">)</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">more-p</span><span class="err"> </span><span class="nv">inside?</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="sc">#\)</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="nv">inside?</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">pipe-out</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;parse</span><span class="err"> </span><span class="s">&quot;Mismatching right paren&quot;</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="nv">inside?</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;parse</span><span class="err"> </span><span class="s">&quot;Mismatching left paren&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">empty</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">more</span><span class="err"> </span><span class="nv">inside?</span><span class="p">))</span><span class="err">]</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The crucial point is that when we recur, looking for the right-paren, we
use the pipe form, which allows the body to communicate with the
context. The body then calls pipe-out, which returns a value to the
context. The context receives the value (more-p) as well as a function
to call when it should communicate back (pipe-in). The context then
sends back the empty list, which the body will return at the end of the
list it constructed, the call to pipe-in returns with the final answer
from the body&#8230; the inner list.</p>

<p>It is fairly simple to imagine implementing such a piping-system with
concurrency: every call to pipe creates a new thread with a line of
communication back to the calling context, which waits for
communication. This is easy to realize in code, but there are some gross
details, especially with getting exceptions to throw in the parent:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;pipes-as-threads&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-syntax-rule</span><span class="err"> </span><span class="p">(</span><span class="nf">pipe</span><span class="err"> </span><span class="nv">e</span><span class="err"> </span><span class="o">...</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">pipe*</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="nv">e</span><span class="err"> </span><span class="o">...</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">pipe-channel</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">make-parameter</span><span class="err"> </span><span class="no">#f</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">pipe*</span><span class="err"> </span><span class="nv">f</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="p">(</span><span class="nf">make-channel</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">thread</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">parameterize</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">pipe-channel</span><span class="err"> </span><span class="nv">c</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">channel-put</span><span class="err"> </span><span class="nv">c</span>
</span><span class='line'>  <span class="err">                    </span><span class="p">(</span><span class="nf">with-handlers</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">exn?</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                      </span><span class="p">(</span><span class="nf">f</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">intermediate</span><span class="err"> </span><span class="p">(</span><span class="nf">channel-get*</span><span class="err"> </span><span class="nv">c</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">values</span><span class="err"> </span><span class="nv">intermediate</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">response</span><span class="p">)</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">channel-put</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">response</span><span class="p">)</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">channel-get*</span><span class="err"> </span><span class="nv">c</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">channel-get*</span><span class="err"> </span><span class="nv">c</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">v</span><span class="err"> </span><span class="p">(</span><span class="nf">channel-get</span><span class="err"> </span><span class="nv">c</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">exn?</span><span class="err"> </span><span class="nv">v</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">raise</span><span class="err"> </span><span class="nv">v</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="nv">v</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">pipe-out</span><span class="err"> </span><span class="nv">v</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="p">(</span><span class="nf">pipe-channel</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">channel-put</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">v</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">channel-get</span><span class="err"> </span><span class="nv">c</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, this has many hidden effects, much more than the original
port-based code! So it’s not exactly an advisable way of solving the
problem.</p>

<p>Luckily we can get the same feature in a tiny amount of
continuation-based code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;pipes-as-conts&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">pipe-tag</span><span class="err"> </span><span class="p">(</span><span class="nf">make-continuation-prompt-tag</span><span class="err"> </span><span class="ss">&#39;pipe</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">pipe*</span><span class="err"> </span><span class="nv">f</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let/ec</span><span class="err"> </span><span class="nv">esc</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">call-with-continuation-prompt</span><span class="err"> </span><span class="nv">f</span><span class="err"> </span><span class="nv">pipe-tag</span><span class="err"> </span><span class="nv">esc</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;pipe</span><span class="err"> </span><span class="s">&quot;did not pipe-out&quot;</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-syntax-rule</span><span class="err"> </span><span class="p">(</span><span class="nf">pipe</span><span class="err"> </span><span class="nv">e</span><span class="err"> </span><span class="o">...</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">pipe*</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="nv">e</span><span class="err"> </span><span class="o">...</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">pipe-out</span><span class="err"> </span><span class="nv">v</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">call-with-composable-continuation</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">come-back</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">abort-current-continuation</span><span class="err"> </span><span class="nv">pipe-tag</span><span class="err"> </span><span class="nv">v</span><span class="err"> </span><span class="nv">come-back</span><span class="p">))</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">pipe-tag</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The basic idea is to turn the call to pipe into a new continuation
prompt, then pipe-out captures the continuation back to that point, and
then aborts back to the prompt, delivering an intermediate value and
then the continuation which resumes the computation from outside the
calling context. This system is particularly beautiful because it allows
the inside to be resumed multiple times.</p>

<p>In my opinion this is the perfect example of the power of first-class
continuations: we are able to seamlessly implement a powerful new
feature that no other language supports in 12 simple lines. And, there’s
no mutation anywhere!</p>

<p>The only objection to first-class continuations I feel is reasonable is
that it can be difficult to reason about contexts. If you’re not sure
that you agree with that statement, try to figure what this returns,
without evaluating it:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;puzzle&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="mi">5</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="k">cond </span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">&lt;=</span><span class="err"> </span><span class="nv">i</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="nv">empty</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="k">else </span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">define-values</span><span class="err"> </span><span class="p">(</span><span class="nf">j</span><span class="err"> </span><span class="nv">pipe-in</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">pipe</span><span class="err"> </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="p">(</span><span class="nf">pipe-out</span><span class="err"> </span><span class="p">(</span><span class="nf">sub1</span><span class="err"> </span><span class="nv">i</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">j</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">append</span><span class="err"> </span><span class="p">(</span><span class="nf">pipe-in</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">j</span><span class="err"> </span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="err">                    </span><span class="p">(</span><span class="nf">pipe-in</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">j</span><span class="err"> </span><span class="mi">2</span><span class="p">))))</span><span class="err">]</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">tests/eli-tester</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/list</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/match</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">test</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;obvious&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="nv">s</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">parse</span><span class="err"> </span><span class="p">(</span><span class="nf">open-input-string</span><span class="err"> </span><span class="nv">s</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;tests&gt;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;obvious-list&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="nv">s</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">parse</span><span class="err"> </span><span class="p">(</span><span class="nf">string-&gt;list</span><span class="err"> </span><span class="nv">s</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;tests&gt;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;monad-list&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="nv">s</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">define-values</span><span class="err"> </span><span class="p">(</span><span class="nf">this</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">parse</span><span class="err"> </span><span class="p">(</span><span class="nf">string-&gt;list</span><span class="err"> </span><span class="nv">s</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">     </span><span class="nv">this</span><span class="p">)</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;tests&gt;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;pipes-as-threads&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;pipe-list&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="nv">s</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">parse</span><span class="err"> </span><span class="p">(</span><span class="nf">string-&gt;list</span><span class="err"> </span><span class="nv">s</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;tests&gt;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;pipes-as-conts&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;pipe-list&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="nv">s</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">parse</span><span class="err"> </span><span class="p">(</span><span class="nf">string-&gt;list</span><span class="err"> </span><span class="nv">s</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;tests&gt;</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;The answer to the puzzle is... ~a\n&quot;</span>
</span><span class='line'>  <span class="err">           </span><span class="nv">&lt;puzzle&gt;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2012-06-18-pipe.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LaTeX and Word Counts]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/06/05/word-count/"/>
    <updated>2012-06-05T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/06/05/word-count</id>
    <content type="html"><![CDATA[<p>A few years ago, a proposal came to a committee I was on to limit the
documents we evaluated based on their word count, rather than their page
length.</p>

<p>The rationale was that so-called &#8220;graphics&#8221; research would include many
pictures which would increase the page length, but not necessarily the
word count.</p>

<p>I was opposed to this proposal on technical grounds.</p>

<!-- more -->


<p>My rationale was that it is easy to manually count pages, but difficult
(and not worth it) to count words AND manual counting is the only
reliable method to discover the number of words.</p>

<p>This proposal was made by someone who uses Word (ugh) to prepare their
documents, so it was easy, in their mind, to find the word count of a
document and report it when the document was turned in.</p>

<p>I, however, like all True Computer Scientists use LaTeX (and Scribble)
to prepare my documents, via rendering to PostScript or PDF.</p>

<h1>Word Counts from PostScript</h1>

<p>You may think that you could just count the words directly from the
PostScript. This is not the case, however.</p>

<p>PostScript is a very low-level programming language with a basic set of
vector-graphic-like primitives for moving the pen and drawing shapes,
letters, etc. A sentence like &#8220;The quick brown fox jumped over the lazy
dog.&#8221; could get warped into many drawing commands, particularly when
effects like sentence spacing, rivers, justifications are taking into
consideration during the compilation process. Compilers to PostScript,
like LaTeX, in fact do this, making the PostScript practically un-usable
for analysis.</p>

<p>PDF improves on PostScript in numerous ways for analysis purposes (such
as computing where a new page will occur in the code) but it is not
significant enough discover individual words in the presence of advanced
typography and styling.</p>

<p>But, is it really surprising that it is hard to learn higher-level
things about a program from its compiled form? What if we looked
directly at the LaTeX?</p>

<h1>Word Counts from LaTeX</h1>

<p>Unfortunately, LaTeX is a Lambda-complete language due to its advanced
macro system. By writing macros, you can add new output (words) to the
document and change the meaning of terms later in the document by
introducing new macros and/or changing the environment.</p>

<p>This means that you can’t analyze pieces of LaTeX independent from
everything that came before them and that pretty much the only way to
analyze them is to run them, but because of the Lambda-completeness,
evaluation may not terminate.</p>

<p>I wanted to demonstrate this to those on the committee, so I wrote a
short example program that had a very difficult to discover word count.</p>

<h1>The Collatz Conjecture</h1>

<p>The Collatz Conjecture, proposed in 1937, states that if you take any
natural number, n, and repeat on either n/2 if n is even or 3n+1 if n is
odd, then you will eventually reach 1.</p>

<p>Every natural number, n, has a Collatz sequence, or the sequence of
numbers visited starting from n. (The conjecture says that all such
sequences include 1.) For example, the sequence for 6 is 6, 3, 10, 5,
16, 8, 4, 2, 1.</p>

<p>The Collatz Conjecture has not been proved, nor has any counter-example
been discovered.</p>

<h1>The Collatz Sequence in LaTeX</h1>

<p>Below is a short LaTeX file that renders to the Collatz sequence of a
random integer between 0 and 1,000,000,000:</p>

<figure class='code'><figcaption><span>collatz.tex </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='tex'><span class='line'><span class="k">\documentclass</span><span class="nb">{</span>article<span class="nb">}</span>
</span><span class='line'><span class="k">\usepackage</span><span class="nb">{</span>fp<span class="nb">}</span>
</span><span class='line'> 
</span><span class='line'><span class="k">\FPrandom</span> <span class="k">\n</span>
</span><span class='line'><span class="k">\FPmul</span> <span class="k">\n</span> <span class="k">\n</span> <span class="nb">{</span>1000000000<span class="nb">}</span>
</span><span class='line'><span class="k">\FPround</span> <span class="k">\n</span> <span class="k">\n</span> 0
</span><span class='line'> 
</span><span class='line'><span class="k">\newcommand</span><span class="nb">{</span><span class="k">\collatz</span><span class="nb">}</span>
</span><span class='line'><span class="nb">{</span>
</span><span class='line'> <span class="k">\FPclip</span> <span class="k">\n</span> <span class="k">\n</span>
</span><span class='line'> <span class="k">\FPprint</span> <span class="k">\n</span>
</span><span class='line'> <span class="k">\FPifeq</span> <span class="k">\n</span> 1
</span><span class='line'> <span class="k">\else</span>
</span><span class='line'><span class="k">\ifodd</span> <span class="k">\FPprint</span> <span class="k">\n</span>
</span><span class='line'>    <span class="k">\FPmul</span> <span class="k">\n</span> 3 <span class="k">\n</span>
</span><span class='line'>     <span class="k">\FPadd</span> <span class="k">\n</span> <span class="k">\n</span> 1
</span><span class='line'>     <span class="k">\collatz</span>
</span><span class='line'> <span class="k">\else</span>
</span><span class='line'>    <span class="k">\FPdiv</span> <span class="k">\n</span> <span class="k">\n</span> 2
</span><span class='line'>     <span class="k">\collatz</span>
</span><span class='line'> <span class="k">\fi</span>
</span><span class='line'> <span class="k">\fi</span>
</span><span class='line'><span class="nb">}</span>
</span><span class='line'> 
</span><span class='line'><span class="k">\begin</span><span class="nb">{</span>document<span class="nb">}</span>
</span><span class='line'><span class="k">\collatz</span>
</span><span class='line'><span class="k">\end</span><span class="nb">{</span>document<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This 27 line program demonstrates the absurd power of LaTeX. When you
run it, sometimes you get pages and pages of numbers. Other times, the
number of words will be so small it fits on just a few lines.</p>

<h1>Word Counts from LaTeX (redux)</h1>

<p>The beauty of this program is that you can’t tell how many words will be
in the output by looking at the program source or the output, because
the output is only visible in the PostScript in a way that can’t really
be discovered automatically.</p>

<p>The only way to get the word count is either manually or, perhaps, a
hacked version of LaTeX that computer the word count as it went. But, of
course, there are ways around the hacked version like by inserting
negative space sequences:</p>

<figure class='code'><figcaption><span>negspace.tex </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='tex'><span class='line'>
</span><span class='line'><span class="k">\documentclass</span><span class="nb">{</span>article<span class="nb">}</span>
</span><span class='line'><span class="k">\begin</span><span class="nb">{</span>document<span class="nb">}</span>
</span><span class='line'>The qui <span class="k">\hspace</span><span class="nb">{</span>+9.5px<span class="nb">}</span>brown<span class="k">\hspace</span><span class="nb">{</span>-39.5px<span class="nb">}</span>ck
</span><span class='line'> 
</span><span class='line'>The quick brown
</span><span class='line'><span class="k">\end</span><span class="nb">{</span>document<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This document appears to have six words to the human eye, but I am
highly skeptical of any analysis that would decide that from the seven
word-like tokens in the source.</p>

<h1>The Resolution</h1>

<p>Naturally, this argument swayed the rest of the committee and we stuck
with page limits rather than switching to word limits.</p>

<p>Luckily, no one noticed the problem with the program. You see, it only
considers numbers between 10<sup>0</sup> and 10<sup>9,</sup> which have all been verified to
not repeat. We’d have to go up past 10<sup>18,</sup> but the LaTeX fp package only
handles up to the top of 10<sup>17,</sup> so we could never get to a number where
there is doubt about termination. Of course, the program still has a
very unpredictable output, which is computationally challenging to
discover. Additionally, it is natural to imagine putting more work into
the fp package, such as reimplementing GMP in it to get arbitrary length
integers.</p>

<p>Thus we see that LaTeX will always dominate Word. (And, of course, since
Scribble allows embedding Racket directly, potentially non-terminating
documents like this are much easier to write.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[exec and Tail-call Optimization]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/05/28/exec-vs-system/"/>
    <updated>2012-05-28T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/05/28/exec-vs-system</id>
    <content type="html"><![CDATA[<p>I’m often bothered by programs that fail to use exec properly and
instead use system. In this article, we’ll review the difference and
relate it to tail-call optimization.</p>

<!-- more -->


<p>In Unix, there’s not really a way to start a totally new process.
Instead, every process comes into being by another process duplicating
itself with fork(). The two processes are identical at that point,
except that the fork() call returns 0 to the child and the child’s PID
to the parent. Using this information, the two can behave differently.</p>

<p>Often, what the child will do is change the program entirely by loading
a system binary and executing its main function. That task is taken care
of by the exec function, which receives the path to the binary, plus the
arguments, and, optionally, the environment.</p>

<p>Most programming languages give you access to a function named exec
which is a wrapper for this functionality. Its also likely that they
will also give a function named system that behaves almost the same.
It’s main difference is that it returns the exit code of the program
when it exits and it invokes the shell to parse the command-line
arguments and look up the binary’s full path.</p>

<p>If your program calls system in tail-position, meaning that the program
does nothing with the exit code nor does anything else after ward, then
you are wasting memory. In particular, the memory of the parent process
which has nothing to do. You should have just exec’d, not forked and
then exec’d.</p>

<p>Here’s an example:</p>

<figure class='code'><figcaption><span>bad.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'> 
</span><span class='line'><span class="nv">x</span><span class="o">=</span><span class="k">${</span><span class="nv">1</span><span class="k">:-</span><span class="nv">10</span><span class="k">}</span>
</span><span class='line'> 
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$x</span> -eq 0 <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'>    read
</span><span class='line'>    echo <span class="k">done                    </span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    ./bad.sh <span class="k">$(</span>expr <span class="nv">$x</span> - 1<span class="k">)</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>The process tree for this bad code looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/bin/zsh                                                
</span><span class='line'> \_ bash bad.sh                                         
</span><span class='line'>|   \_ bash bad.sh 9                                    
</span><span class='line'>|       \_ bash bad.sh 8                                
</span><span class='line'>|           \_ bash bad.sh 7                            
</span><span class='line'>|               \_ bash bad.sh 6                        
</span><span class='line'>|                   \_ bash bad.sh 5                    
</span><span class='line'>|                       \_ bash bad.sh 4                
</span><span class='line'>|                           \_ bash bad.sh 3            
</span><span class='line'>|                               \_ bash bad.sh 2        
</span><span class='line'>|                                   \_ bash bad.sh 1    
</span><span class='line'>|                                       \_ bash bad.sh 0
</span><span class='line'> \_ ps f</span></code></pre></td></tr></table></div></figure>


<p>Compared to:</p>

<figure class='code'><figcaption><span>good.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'> 
</span><span class='line'><span class="nv">x</span><span class="o">=</span><span class="k">${</span><span class="nv">1</span><span class="k">:-</span><span class="nv">10</span><span class="k">}</span>
</span><span class='line'> 
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$x</span> -eq 0 <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'>    read
</span><span class='line'>    echo <span class="k">done                     </span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    exec ./good.sh <span class="k">$(</span>expr <span class="nv">$x</span> - 1<span class="k">)</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Notice that line 9 is different—we’ve explicitly used exec.)</p>

<p>This good code has a process tree like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/bin/zsh          
</span><span class='line'> \_ bash good.sh 0
</span><span class='line'> \_ ps f</span></code></pre></td></tr></table></div></figure>


<p>This is very similar to the concept of safe-for-space, or tail-call
optimization, in programming languages. As you can see, unfortunately
bash is not safe-for-space by default. That is, it doesn’t keep track of
when a call is in tail-position and automatically use exec rather than
system.</p>

<p>It’s not just a problem with bash either, I’ve never known any shell
that can run this program correctly.</p>

<p>In most cases, this is not problematic because the stack is unlikely to
grow very large and the executed program is unlikely to run for a long
time. However, it most often shows up as a problem with X11 window
managers and menu programs.</p>

<p>Your Xsession initialization should always exec your window manager,
because there’s nothing else it needs to do afterward.</p>

<p>An X11 menu program should also use exec to run the program, otherwise
whenever you start, for example Emacs, the shell that started it will
persist for the entire time you are running Emacs (presumably the entire
time you are at the computer.) In addition, you should exec your menu
program so that the shell that starts it is replaced as well.</p>

<p>For example, the default Xmonad configuration does not do this correctly
and will invoke dmenu without an exec, leaving around the shell forever.
(dmenu is programmed correctly, though.)</p>

<p>So, raise your right arm and say with me: &#8220;I will always exec in
tail-position!&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An LZ78 Implementation]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/05/22/lz78/"/>
    <updated>2012-05-22T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/05/22/lz78</id>
    <content type="html"><![CDATA[<p>For a long time I’ve known about and relied on the LZ77/78 compression
algorithms. Once when I was in middle school, I told a friend an idea I
had about compression, and the friend—who was in college at the
time—said it sounded exactly like LZ77. I don’t remember what my idea
was, but I do remember that incident.</p>

<p>Despite this long connection, I’d never implemented the algorithm
before. I sought to rectify that situation.</p>

<!-- more -->


<p>First, I read about the algorithm on Wikipedia. The
<a href="https://en.wikipedia.org/wiki/LZ77">article</a> is pretty informative.
I’ll briefly recap it.</p>

<p>As you read through the content to compress, you keep track of a
dictionary of previously seen phrases. Whenever you discover a yet
undiscovered phrase, add it to the dictionary and encode it as the
previously-seen prefix and the new character. Decoding works in reverse.
Since the very first character of the encoded output is necessarily not
in the dictionary, its prefix will be empty and it will establish the
first phrase. As you read the encoding, you maintain the same dictionary
and decode by following the phrase-reference backwards and then emitting
the new character.</p>

<p>For an implementation, the signature of the function is pretty
straight-forward: it takes a character source, which I’ll use an
input-port for, and it returns a list of pairs of the previously seen
reference and the new character.</p>

<p>However, there’s one hitch. If the last phrase of the input is
previously seen, then there will be no right-hand side of the output
pair. You could add a special character to indicate that. I decided to
output just the phrase reference, in that case.</p>

<h1>Compression</h1>

<p>My compression code looks like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;compress&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">compress</span><span class="err"> </span><span class="nv">ip</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;next-unseen&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">outer-loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">next</span><span class="err"> </span><span class="mi">1</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="p">(</span><span class="nf">next-unseen</span><span class="err"> </span><span class="nv">next</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">?</span><span class="err"> </span><span class="nv">number?</span><span class="err"> </span><span class="nv">ref</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">stream</span><span class="err"> </span><span class="nv">ref</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">and</span><span class="err"> </span><span class="nv">W</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ref</span><span class="err"> </span><span class="nv">c</span><span class="p">))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">stream-cons</span><span class="err"> </span><span class="nv">W</span><span class="err"> </span><span class="p">(</span><span class="nf">outer-loop</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">next</span><span class="p">)))</span><span class="err">]</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The main work all happens in next-unseen which takes the reference that
the next phrase will be given and either returns a number, for the final
reference in the stream, or a cons of the last reference and the new
character, which is added to the output and then the compression
continues. The dictionary itself is totally maintained by the
next-unseen function.</p>

<p>next-unseen runs in a loop keeping track of the current dictionary and
prefix phrase reference. At each iteration it reads a byte from the
input. There are then three cases:</p>

<ol>
<li><p>The input is empty, in which case, the last seen phrase reference is
returned.</p></li>
<li><p>The current dictionary has a reference starting with that byte, in
which case, the prefix phrase is extended. This means the loop is
continued with a new dictionary and a new prefix phrase. For example, if
the current phrase is A, named 1, and the next input is B, and AB is
previously seen and named 2, then the dictionary will have a mapping in
it from B to a new dictionary and the number 2, which are used in the
next iteration of the loop.</p></li>
<li><p>The current dictionary does <em>not</em> have a reference for this byte,
meaning that we’ve encoded a new phrase. In that case, we can add this
byte to current dictionary and allocate a new name for it, then return
that new name.</p></li>
</ol>


<p>Here’s that in code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;next-unseen&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">top-dict</span><span class="err"> </span><span class="p">(</span><span class="nf">make-hasheq</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">next-unseen</span><span class="err"> </span><span class="nv">this</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">dict</span><span class="err"> </span><span class="nv">top-dict</span><span class="err">]</span>
</span><span class='line'>  <span class="err">             [</span><span class="nv">last</span><span class="err"> </span><span class="mi">0</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">b</span><span class="err"> </span><span class="p">(</span><span class="nf">read-byte</span><span class="err"> </span><span class="nv">ip</span><span class="p">))</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="k">cond </span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">eof-object?</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="nv">last</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">dict</span><span class="err"> </span><span class="nv">b</span><span class="err"> </span><span class="no">#f</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="k">=&gt; </span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">next</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="p">(</span><span class="nf">cdr</span><span class="err"> </span><span class="nv">next</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">car</span><span class="err"> </span><span class="nv">next</span><span class="p">)))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="k">else </span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">hash-set!</span><span class="err"> </span><span class="nv">dict</span><span class="err"> </span><span class="nv">b</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="p">(</span><span class="nf">make-hasheq</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">last</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err">]</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code uses a similar dictionary structure to my Boggle solver, from
the previous blog post. However, in this code, it’s mutable because the
dictionary is extended as we go and it would be tedious to thread the
state.</p>

<p>I’m kind of amazed that the compression can fit in 23 lines!</p>

<p>Here’s a little example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;compress-example&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">some-input</span><span class="err"> </span><span class="o">#</span><span class="s">&quot;AABABBBABAABABBBABBABB&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">compressed</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">compress</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">open-input-bytes</span><span class="err"> </span><span class="nv">some-input</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">A</span><span class="err"> </span><span class="p">(</span><span class="nf">char-&gt;integer</span><span class="err"> </span><span class="sc">#\A</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">B</span><span class="err"> </span><span class="p">(</span><span class="nf">char-&gt;integer</span><span class="err"> </span><span class="sc">#\B</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">stream-&gt;list</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">compressed</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="nv">A</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="nv">A</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">5</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">4</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="nv">A</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="mi">7</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, the final dictionary looks like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;compress-example-dict&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">hasheq</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">B</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">4</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="nv">B</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">7</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="p">))))</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">A</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">1</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="nv">B</span>
</span><span class='line'>  <span class="err">               </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">2</span>
</span><span class='line'>  <span class="err">                     </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="nv">B</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="nv">A</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">8</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="p">))))</span>
</span><span class='line'>  <span class="err">                             </span><span class="nv">A</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">5</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="nv">B</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">6</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="p">)))))))))</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Decompression</h1>

<p>Naturally, decompression is dual to compression. It will also maintain a
dictionary, but it will have the opposite information: rather than
mapping characters to references and suffixes, it will map references to
characters and prefixes.</p>

<p>The code is considerably simpler because there is a single dictionary
(rather than a structured one) and the decompression is a fold over the
input stream, rather than a more generative loop.</p>

<p>Here’s the core of it:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;decompress&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">decompress</span><span class="err"> </span><span class="nv">str</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">dict</span><span class="err"> </span><span class="p">(</span><span class="nf">make-hasheq</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;output-from-dict&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">next</span><span class="err"> </span><span class="mi">1</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">p</span><span class="err"> </span><span class="p">(</span><span class="nf">in-stream</span><span class="err"> </span><span class="nv">str</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">p</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ref</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">hash-set!</span><span class="err"> </span><span class="nv">dict</span><span class="err"> </span><span class="nv">next</span><span class="err"> </span><span class="nv">p</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">output-from-dict</span><span class="err"> </span><span class="nv">next</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">next</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">?</span><span class="err"> </span><span class="nv">number?</span><span class="err"> </span><span class="nv">ref</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">output-from-dict</span><span class="err"> </span><span class="nv">ref</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="nv">next</span><span class="err">]</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically, each element of the stream is either a new dictionary entry,
in which case we remember it and output it, or it’s just a reference and
we output without remembering. Pretty simple. (We could use a functional
hash, but there’s no benefit here.)</p>

<p>When you get a reference and need to output it, it’s also quite easy:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;output-from-dict&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">output-from-dict</span><span class="err"> </span><span class="nv">this</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">dict</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="no">#f</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    [</span><span class="no">#f</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">void</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">last</span><span class="err"> </span><span class="nv">this-b</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">output-from-dict</span><span class="err"> </span><span class="nv">last</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">write-byte</span><span class="err"> </span><span class="nv">this-b</span><span class="p">)</span><span class="err">]</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Either the reference isn’t in the dictionary, so you stop, or it is, so
you output its prefix and then the byte associated with it. We use the
stack as our data-structure to keep track of bytes to write, because the
dictionary stores the prefixes, not the suffixes.</p>

<p>The whole decompression is just 20 lines. Wow!</p>

<p>We can check that the output is the same as the input:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;decompress-example&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">with-output-to-bytes</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">decompress</span><span class="err"> </span><span class="nv">compressed</span><span class="p">)))</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">some-input</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the example, the dictionary is:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;decompress-example-dict&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="mi">8</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="nv">A</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">7</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">4</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">6</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">5</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">5</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="nv">A</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">4</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">3</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">2</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">1</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="nv">A</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that’s it!</p>

<h1>Further work</h1>

<p>One strange thing about this implementation is that the output is just a
stream of pairs rather than bytes. The easiest way to encode it as bytes
is to write each pair as two bytes. That’s not totally correct, however,
because the number of prefixes may exceed the number of bytes, so you’ll
need to use the length of the input log-2 for the number of bits per
reference. You can do a little bit better by having the decoder keep
track of this number during decoding and gradually use more bits.</p>

<p>It is interesting to think of what kinds of input this algorithm fails
to compress. It’s those without common prefixes. For example, if you had
all the bytes from 0 to 255, then the output would be double (plus one!
Why?) the input. If you then added each byte to every other byte, then
you’d double again.</p>

<p>Another surprising thing about the algorithm is that the dictionary is
just as long as the compressed output because the compressed output IS
the dictionary. The compression algorithm is inherently non-random
access because you need to read it linearly to know the context of the
prefix references.</p>

<p>This was a very fun thing to implement. I hope you enjoy it!</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">rackunit</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/list</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/match</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/stream</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/port</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;compress&gt;</span>
</span><span class='line'>  <span class="nv">&lt;compress-example&gt;</span>
</span><span class='line'>  <span class="nv">&lt;compress-example-dict&gt;</span>
</span><span class='line'>  <span class="nv">&lt;decompress&gt;</span>
</span><span class='line'>  <span class="nv">&lt;decompress-example&gt;</span>
</span><span class='line'>  <span class="nv">&lt;decompress-example-dict&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2012-05-22-lz78.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Boggle Solver]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/05/14/boggle/"/>
    <updated>2012-05-14T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/05/14/boggle</id>
    <content type="html"><![CDATA[<p>Boggle is a classic word game that lends itself well to algorithmic
attacks. A student of mine wanted to show me his solution (as it is an
assignment in one of BYU early classes), but I have a hard time
evaluating things like this unless I’ve done them myself. So, I decided
to make an attempt. I was able to do it in about 19 lines of code, minus
the 24 to set up the data-structures. Let’s see how it goes&#8230;</p>

<!-- more -->


<p>Let’s review the rules of Boggle. You have a square board of characters.
You are trying to find words from a dictionary of valid words. The
standard word list does not have words under three letters, etc. The
word may be constructed from any string of adjacent characters—including
the diagonals—provided it does not use the same board position twice.</p>

<p>The two most important decision we make in the algorithm are
representing the dictionary and representing the board. Once these are
in place, the result is pretty obvious.</p>

<h1>The board</h1>

<p>Let’s start with the board. We’ll represent it as a hash table mapping
coordinates, like (0,0), to the letter at that coordinate. The program
will generate a random board configuration before solving it.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;board&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">board-n</span><span class="err"> </span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">board</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for*/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">cell-&gt;char</span><span class="err"> </span><span class="p">(</span><span class="nf">hash</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">row</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="nv">board-n</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">       [</span><span class="nv">col</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="nv">board-n</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">hash-set</span><span class="err"> </span><span class="nv">cell-&gt;char</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">row</span><span class="err"> </span><span class="nv">col</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">random-letter</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The standard game of Boggle is played on a 4x4 gird, but we’ll be
parameterized over board-n.</p>

<p>The hash table doesn’t have any particular order, but that’s fine
because we’ll be using the coordinates directly. Still, printing out the
board is pretty convenient:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;printing&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">row</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="nv">board-n</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">col</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="nv">board-n</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">display</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">board</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">row</span><span class="err"> </span><span class="nv">col</span><span class="p">))))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">newline</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, we have six essential lines of code. (I don’t count the
printer.)</p>

<h1>The dictionary</h1>

<p>The more interesting decision comes from how we’ll represent the
dictionary. The core idea is to use a regular expression derivative,
where the regular expression is accepting when the string is in the
dictionary. The representation will be tabled and gradually constructed
by adding the words one at a time.</p>

<p>We’ll define a dictionary as a hash mapping characters to a boolean and
another dictionary. The boolean will describe if the string is accepted
(i.e. corresponds to a word) and the dictionary will be the transitions
from this string prefix. For example, the dictionary that only contains
&#8220;cat&#8221; and &#8220;cats&#8221; is:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;dict-example&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="sc">#\c</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="no">#f</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="sc">#\a</span>
</span><span class='line'>  <span class="err">                      </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="no">#f</span>
</span><span class='line'>  <span class="err">                            </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="sc">#\t</span>
</span><span class='line'>  <span class="err">                                    </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="no">#t</span>
</span><span class='line'>  <span class="err">                                          </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="sc">#\s</span>
</span><span class='line'>  <span class="err">                                                  </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="no">#t</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="p">)))))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The following provdes the necessary function for extending an empty
dictionary like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;dict&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">empty-dict</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">empty-entry</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="no">#f</span><span class="err"> </span><span class="nv">empty-dict</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">dict-add</span><span class="err"> </span><span class="nv">d</span><span class="err"> </span><span class="nv">w</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">empty?</span><span class="err"> </span><span class="nv">w</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="nv">d</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">hash-update</span><span class="err"> </span><span class="nv">d</span><span class="err"> </span><span class="p">(</span><span class="nf">first</span><span class="err"> </span><span class="nv">w</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                 </span><span class="p">(</span><span class="nf">match-lambda</span>
</span><span class='line'>  <span class="err">                  [</span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">word?</span><span class="err"> </span><span class="nv">rest-d</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                   </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">or</span><span class="err"> </span><span class="nv">word?</span><span class="err"> </span><span class="p">(</span><span class="nf">empty?</span><span class="err"> </span><span class="p">(</span><span class="nf">rest</span><span class="err"> </span><span class="nv">w</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">                         </span><span class="p">(</span><span class="nf">dict-add</span><span class="err"> </span><span class="nv">rest-d</span><span class="err"> </span><span class="p">(</span><span class="nf">rest</span><span class="err"> </span><span class="nv">w</span><span class="p">)))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                 </span><span class="nv">empty-entry</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">dict-add*</span><span class="err"> </span><span class="nv">d</span><span class="err"> </span><span class="nv">s</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">dict-add</span><span class="err"> </span><span class="nv">d</span><span class="err"> </span><span class="p">(</span><span class="nf">string-&gt;list</span><span class="err"> </span><span class="nv">s</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>dict-add* breaks a string into a list of characters, which are read
one-by-one extending the dictionary gradually. If the rest of the list
after a given character is ever empty, then the dictionary entry
corresponds to a complete word.</p>

<p>We can test to make sure this function works by comparing to our
manually constructed example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;dict-test&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">cat-dict</span><span class="err"> </span><span class="nv">&lt;dict-example&gt;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">dict-add*</span><span class="err"> </span><span class="p">(</span><span class="nf">dict-add*</span><span class="err"> </span><span class="nv">empty-dict</span><span class="err"> </span><span class="s">&quot;cat&quot;</span><span class="p">)</span><span class="err"> </span><span class="s">&quot;cats&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">cat-dict</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">dict-add*</span><span class="err"> </span><span class="p">(</span><span class="nf">dict-add*</span><span class="err"> </span><span class="nv">empty-dict</span><span class="err"> </span><span class="s">&quot;cats&quot;</span><span class="p">)</span><span class="err"> </span><span class="s">&quot;cat&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">cat-dict</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can build the whole dictionary from a standard word list, like so:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;dict-parse&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">dict-pth</span><span class="err"> </span><span class="s">&quot;/usr/share/dict/words&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">the-dictionary</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">d</span><span class="err"> </span><span class="nv">empty-dict</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">w</span><span class="err"> </span><span class="p">(</span><span class="nf">in-lines</span><span class="err"> </span><span class="p">(</span><span class="nf">open-input-file</span><span class="err"> </span><span class="nv">dict-pth</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">dict-add*</span><span class="err"> </span><span class="nv">d</span><span class="err"> </span><span class="nv">w</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The standard dictionary is not Boggle-legal, because it contains words
under three letters, apostrophes, proper names, etc. But the algorithm
wouldn’t change with a different list.</p>

<p>At this point, we have 18 more lines of essential code, bringing the
total to 24. (I don’t count the test.)</p>

<h1>The solver</h1>

<p>Now that we have our data-structures ready, it’s a pretty straight path.
We’ll be exploring the board like a graph, looking for paths where the
nodes correspond to accepting strings. After visiting a node, we’ll
remove it from the graph and proceed to all the neighbors, provided that
the dictionary is not empty from the current path.</p>

<p>The main loop simply starts this process from every possible square with
the complete board, the complete dictionary, and an empty path:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;main&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">k</span><span class="err"> </span><span class="p">(</span><span class="nf">in-hash-keys</span><span class="err"> </span><span class="nv">board</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">solutions-from</span><span class="err"> </span><span class="nv">board</span><span class="err"> </span><span class="nv">the-dictionary</span><span class="err"> </span><span class="nv">k</span><span class="err"> </span><span class="nv">empty</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We make use of a slight pun by iterating through the board’s hash keys,
which correspond to the cell coordinates.</p>

<p>(Solution so far: 2 lines)</p>

<p>The solutions-from function is a bit more complicated.</p>

<p>Its first task will be to determine if a cell is actually on the board
(i.e. it has not been removed already and was there in the first place):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;solutions-from&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">solutions-from</span><span class="err"> </span><span class="nv">board</span><span class="err"> </span><span class="nv">dict</span><span class="err"> </span><span class="nv">k</span><span class="err"> </span><span class="nv">path</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">board</span><span class="err"> </span><span class="nv">k</span><span class="err"> </span><span class="no">#f</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">when</span><span class="err"> </span><span class="nv">c</span>
</span><span class='line'>  <span class="err">    </span><span class="nv">&lt;step-one&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="nv">&lt;step-two&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="nv">&lt;step-three&gt;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Solution so far: 5 lines)</p>

<p>If it was there, then we’ll want to know if the new path is a word, what
the new state machine is, and what the new path is:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;step-one&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">match-define</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">word?</span><span class="err"> </span><span class="nv">new-dict</span><span class="p">)</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">dict</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">empty-entry</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">new-path</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">path</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Solution so far: 8 lines)</p>

<p>If the current path is a word, then we can print it out, which is a bit
complicated since we’re just storing the path backwards, so we have to
reverse the list (to make it forwards) and then turn the list of
characters into a string:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;step-two&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">when</span><span class="err"> </span><span class="nv">word?</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">displayln</span><span class="err"> </span><span class="p">(</span><span class="nf">list-&gt;string</span><span class="err"> </span><span class="p">(</span><span class="nf">reverse</span><span class="err"> </span><span class="nv">new-path</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Solution so far: 10 lines)</p>

<p>If it possible to have any more words from this path (i.e. if the new
dictionary isn’t empty), then we’ll want to remove this node from the
board and vist all adjacent positions:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;step-three&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">unless</span><span class="err"> </span><span class="p">(</span><span class="nf">zero?</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-count</span><span class="err"> </span><span class="nv">new-dict</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">new-board</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-remove</span><span class="err"> </span><span class="nv">board</span><span class="err"> </span><span class="nv">k</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-define</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">row</span><span class="err"> </span><span class="nv">col</span><span class="p">)</span><span class="err"> </span><span class="nv">k</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for*</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">drow</span><span class="err"> </span><span class="p">(</span><span class="nf">in-list</span><span class="err"> </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">-1</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="mi">1</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">         [</span><span class="nv">dcol</span><span class="err"> </span><span class="p">(</span><span class="nf">in-list</span><span class="err"> </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">-1</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="mi">1</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">solutions-from</span><span class="err"> </span><span class="nv">new-board</span><span class="err"> </span><span class="nv">new-dict</span>
</span><span class='line'>  <span class="err">                    </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">row</span><span class="err"> </span><span class="nv">drow</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                          </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">col</span><span class="err"> </span><span class="nv">dcol</span><span class="p">))</span>
</span><span class='line'>  <span class="err">                    </span><span class="nv">new-path</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We make some fun abuses for the sake of simplicity. For example, this
will re-visit the current node, but we’ve already removed it from the
board, so the body of the function will be skipped. Similarly, we don’t
care about going off the board, because the same test will find those.
This is by far the largest block of the solution, but it is still quite
simple.</p>

<p>This actually concludes the solution, which is a whopping 19 lines!</p>

<h1>The whole program</h1>

<p>The whole program is a mere 43 lines of essential code but is a complete
and efficient Boggle solver.</p>

<p>Regarding the efficiency, it takes about a 56x56 board to take more than
1 second, but that time is dominated by printing. When I turn off
printing (but not the construction of the string to be printed), it is
under a second until about 110x110.</p>

<p>The major wins are:</p>

<ol>
<li><p>A good data-structure for the dictionary, corresponding to top-notch
regular expression matching theory.</p></li>
<li><p>A functional representation of the board, so we can safely remove
nodes from the board without doing any bookkeeping or undo-ing.</p></li>
<li><p>A snoc-list of the path backwards to maximize sharing. (Exercise:
Change the code so that it doesn’t need to do any allocation for
successes. Right now it has to allocate another list and then convert it
into a string. Try to print out a list backwards without allocation.)</p></li>
<li><p>Eliminating duplicate work: it never explores any path more than
once, but will discover the same word through multiple paths, if
possible.</p></li>
</ol>


<p>Returning to the student, he sent me about 700 lines of complicated and
inefficent C++ code and was working on a new version that was currently
500 lines and broken. Maybe this will be a good push in the right
direction?</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">racket/list</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/match</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">rackunit</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">letters</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">string-&gt;list</span><span class="err"> </span><span class="s">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">random-list-ref</span><span class="err"> </span><span class="nv">l</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">list-ref</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="p">(</span><span class="nf">random</span><span class="err"> </span><span class="p">(</span><span class="nf">length</span><span class="err"> </span><span class="nv">l</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">random-letter</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">random-list-ref</span><span class="err"> </span><span class="nv">letters</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;board&gt;</span>
</span><span class='line'>  <span class="nv">&lt;printing&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">newline</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nv">&lt;dict-test&gt;</span>
</span><span class='line'>  <span class="nv">&lt;dict-parse&gt;</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;solutions-from&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">time</span><span class="err"> </span><span class="nv">&lt;main&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2012-05-14-boggle.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quilt Colouring]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/05/07/quilt-colouring/"/>
    <updated>2012-05-07T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/05/07/quilt-colouring</id>
    <content type="html"><![CDATA[<p>I got this email from my wife:</p>

<blockquote><p>Honey,</p>

<p>I’m making a quilt with 25 blocks. Each block has four colors on it.
The colors I’m using are red, pink, green, yellow, blue, and green
plaid.</p>

<p>I don’t want to duplicate colors in a block or in the corners and I
don’t want pink and red in the same corner (but pink and red in a block
is okay.) Similarly with green and green plaid.</p></blockquote>

<p>She’s a <a href="http://icme.stanford.edu/index.php">mathematician</a>, so she
knows about the <a href="https://en.wikipedia.org/wiki/Four_color_theorem">Four color
theorem</a>. But she
wasn’t sure if the graph was planar, and didn’t want to lay it out
manually anyways.</p>

<p>Let’s work through the solution.</p>

<!-- more -->


<p>The first thing I wanted to do was see the structure of the quilt as a
graph. Naturally, <a href="http://graphviz.org/">Graphviz</a> is a natural choice.
But, first I’d have to represent the graph in some way. I decided to go
with a 5x5 matrix of blocks where each block was a structure of the four
corner colors. The values of the nodes won’t really matter, so I’m just
using unique symbols.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;the-nodes&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">block</span><span class="err"> </span><span class="p">(</span><span class="nf">ul</span><span class="err"> </span><span class="nv">ur</span><span class="err"> </span><span class="nv">ll</span><span class="err"> </span><span class="nv">lr</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">make-block</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">block</span><span class="err"> </span><span class="p">(</span><span class="nf">gensym</span><span class="err"> </span><span class="ss">&#39;ul</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">gensym</span><span class="err"> </span><span class="ss">&#39;ur</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">gensym</span><span class="err"> </span><span class="ss">&#39;ll</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">gensym</span><span class="err"> </span><span class="ss">&#39;lr</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">quilt</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for*/hash</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">x</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">              [</span><span class="nv">y</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">values</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">y</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                     </span><span class="p">(</span><span class="nf">make-block</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is, of course, just a representation of the nodes. A graph also has
edges. I decided to make another list of those. The first step is to
turn a block into a list of edges. That’s pretty trivial:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;block-to-edges&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">block-&gt;edges</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-lambda</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">block</span><span class="err"> </span><span class="nv">ul</span><span class="err"> </span><span class="nv">ur</span><span class="err"> </span><span class="nv">ll</span><span class="err"> </span><span class="nv">lr</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ul</span><span class="err"> </span><span class="nv">ur</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ul</span><span class="err"> </span><span class="nv">ll</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ul</span><span class="err"> </span><span class="nv">lr</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ur</span><span class="err"> </span><span class="nv">ul</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ur</span><span class="err"> </span><span class="nv">ll</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ur</span><span class="err"> </span><span class="nv">lr</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ll</span><span class="err"> </span><span class="nv">ul</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ll</span><span class="err"> </span><span class="nv">ur</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ll</span><span class="err"> </span><span class="nv">lr</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">lr</span><span class="err"> </span><span class="nv">ul</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">lr</span><span class="err"> </span><span class="nv">ur</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">lr</span><span class="err"> </span><span class="nv">ll</span><span class="p">))</span><span class="err">]</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we loop through each of the blocks and call this, appending the
results together, we’d get a bunch of disconnected sub-graphs. We’d just
need to add in the block-crossing (i.e. corner) edges. The structure
will look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;the-edges&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">&lt;block-to-edges&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">edges</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nb">apply </span>
</span><span class='line'>  <span class="err">   </span><span class="nv">append</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">for*/list</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">x</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">               [</span><span class="nv">y</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="nv">&lt;edges-per-block&gt;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I briefly thought about making a new for form that did the appending as
it went, rather than using the (apply append &#8230;.) pattern, but decided
it wasn’t worth the time right here.</p>

<p>The inner part of the loop is a little bit complicated though, at least
if we want to do it elegantly. The problem is that on the edges there
aren’t adjacent blocks, so we don’t want to try connect them with the
block under consideration. I use a cute little macro that sets up an
exception handler that will just return an empty list if an inner
hash-ref fails.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;edges-per-block&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-syntax-rule</span><span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="nv">e</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">with-handlers</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">eq?</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="ss">&#39;bot</span><span class="p">))</span>
</span><span class='line'>  <span class="err">                   </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="nv">empty</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="nv">e</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">y</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">quilt</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">y</span><span class="p">)</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">raise</span><span class="err"> </span><span class="ss">&#39;bot</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">b</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">y</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">append </span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ul</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-lr</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ul</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ur</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ul</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ll</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">0</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ur</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-lr</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">0</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ur</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ll</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ur</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ul</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ll</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-lr</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ll</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ur</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ll</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ul</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">0</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-lr</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ll</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-lr</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ul</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-lr</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ur</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">0</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">block-&gt;edges</span><span class="err"> </span><span class="nv">b</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I thought about working out which edges I didn’t need to write down
because the graph is undirected, but figure that since the size of the
graph is so small it doesn’t really matter if I have a few extra edges.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;print-it&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-runtime-path</span><span class="err"> </span><span class="nv">the-graph-path</span>
</span><span class='line'>  <span class="err">  </span><span class="s">&quot;tmp/2012-05-07-quilt-colouring.graph.dot&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-runtime-path</span><span class="err"> </span><span class="nv">the-graph-png-path</span>
</span><span class='line'>  <span class="err">  </span><span class="s">&quot;tmp/2012-05-07-quilt-colouring.graph.png&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">with-output-to-file </span>
</span><span class='line'>  <span class="err">    </span><span class="nv">the-graph-path</span>
</span><span class='line'>  <span class="err">  </span><span class="o">#</span><span class="nv">:exists</span><span class="err"> </span><span class="ss">&#39;replace</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;graph {\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">e</span><span class="err"> </span><span class="p">(</span><span class="nf">in-list</span><span class="err"> </span><span class="nv">edges</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">match-define</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">u</span><span class="err"> </span><span class="nv">v</span><span class="p">)</span><span class="err"> </span><span class="nv">e</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;\t~a -- ~a;\n&quot;</span><span class="err"> </span><span class="nv">u</span><span class="err"> </span><span class="nv">v</span><span class="p">))</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;}\n&quot;</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">unless</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">system*</span><span class="err"> </span><span class="p">(</span><span class="nf">find-executable-path</span><span class="err"> </span><span class="s">&quot;dot&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">             </span><span class="s">&quot;-Tpng&quot;</span>
</span><span class='line'>  <span class="err">             </span><span class="nv">the-graph-path</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">format</span><span class="err"> </span><span class="s">&quot;-o~a&quot;</span><span class="err"> </span><span class="nv">the-graph-png-path</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;quilt-colouring</span><span class="err"> </span><span class="s">&quot;dot failed :(&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see the dot file here: <a href="http://jeapostrophe.github.com/downloads/code/tmp/2012-05-07-quilt-colouring.graph.dot">dot
file</a>, but
unfortunately the picture wasn’t very helpful. You can see it here:
<a href="http://jeapostrophe.github.com/downloads/code/tmp/2012-05-07-quilt-colouring.graph.png">graph PNG</a>.</p>

<p>Now that I have the edges, I can create an adjacency list really simply:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;the-graph&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">graph</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">graph</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">e</span><span class="err"> </span><span class="p">(</span><span class="nf">in-list</span><span class="err"> </span><span class="nv">edges</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match-define</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">u</span><span class="err"> </span><span class="nv">v</span><span class="p">)</span><span class="err"> </span><span class="nv">e</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">hash-update</span><span class="err"> </span><span class="nv">graph</span><span class="err"> </span><span class="nv">u</span><span class="err"> </span><span class="p">(</span><span class="nf">curry</span><span class="err"> </span><span class="nv">list*</span><span class="err"> </span><span class="nv">v</span><span class="p">)</span><span class="err"> </span><span class="nv">empty</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that I have graph structure, it’s a simple matter of selecting
colors. I decided to write it as an exhaustive greedy search, with
randomness (for artistic reasons). For every node u connected to nodes
vs, figure out what the options are, shuffle them, and try them in
order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;colour-per-node&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">vs-colours</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">append-map</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">v</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">colouring</span><span class="err"> </span><span class="nv">v</span><span class="err"> </span><span class="nv">empty</span><span class="p">))</span>
</span><span class='line'>  <span class="err">              </span><span class="nv">vs</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">u-options</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">shuffle</span><span class="err"> </span><span class="p">(</span><span class="nf">remq*</span><span class="err"> </span><span class="nv">vs-colours</span><span class="err"> </span><span class="nv">colours</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I decided to have the colouring be a hash table where the values where
singleton lists (to facilitate the call to append-map.)</p>

<p>The interesting thing comes from properly handling back-tracking in case
a choice leads to an empty option list eventually. In addition to
folding the colouring, I also have a fail procedure that goes back.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;colouring&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">*backtracks*</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-values</span><span class="err"> </span><span class="p">(</span><span class="nf">colouring</span><span class="err"> </span><span class="nv">fail</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">colouring</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">             [</span><span class="nv">fail</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;quilt-colouring</span><span class="err"> </span><span class="s">&quot;Can&#39;t colour :(&quot;</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="p">(</span><span class="nf">u</span><span class="err"> </span><span class="nv">vs</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">in-hash</span><span class="err"> </span><span class="nv">graph</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err">    </span><span class="nv">&lt;colour-per-node&gt;</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">let/ec</span><span class="err"> </span><span class="nv">return</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">option</span><span class="err"> </span><span class="p">(</span><span class="nf">in-list</span><span class="err"> </span><span class="nv">u-options</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">let/cc</span><span class="err"> </span><span class="nv">try-another-option</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">return</span>
</span><span class='line'>  <span class="err">           </span><span class="p">(</span><span class="nf">hash-set</span><span class="err"> </span><span class="nv">colouring</span><span class="err"> </span><span class="nv">u</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="nv">option</span><span class="p">))</span>
</span><span class='line'>  <span class="err">           </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">try-another-option</span><span class="p">)))))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">*backtracks*</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">*backtracks*</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">fail</span><span class="p">))))</span>
</span><span class='line'>  <span class="nv">*backtracks*</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the heck of it, I decided to keep track of how many back-trackings
happened. While the use of continuations to implement back-tracking is
definitely neat, unfortunately I’ve never run it and observed any
failures. (Unless I reduce the number of colours to three, in which case
it fails.)</p>

<p>Now that I have a colouring, how can I show it to my wife? Well, I’ll
just render it out. Racket’s 2htdp/image library supports an algebra of
images that will make this really simple.</p>

<p>First, we’ll render each individual square in the quilt as a square,
assuming we have a way of turning our colours into colors that Racket
supports.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;render-square&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">render-square</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">square</span><span class="err"> </span><span class="mi">10</span><span class="err"> </span><span class="ss">&#39;solid</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">quilt-colour-&gt;racket-color</span><span class="err"> </span><span class="p">(</span><span class="nf">first</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">n</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, we’ll assemble each block (and give it a nice thick outline):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;render-block&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">render-block</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-define</span><span class="err"> </span><span class="p">(</span><span class="nf">block</span><span class="err"> </span><span class="nv">ul</span><span class="err"> </span><span class="nv">ur</span><span class="err"> </span><span class="nv">ll</span><span class="err"> </span><span class="nv">lr</span><span class="p">)</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">overlay</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">above</span><span class="err"> </span><span class="p">(</span><span class="nf">beside</span><span class="err"> </span><span class="p">(</span><span class="nf">render-square</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">ul</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                  </span><span class="p">(</span><span class="nf">render-square</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">ur</span><span class="p">))</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">beside</span><span class="err"> </span><span class="p">(</span><span class="nf">render-square</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">ll</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                  </span><span class="p">(</span><span class="nf">render-square</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">lr</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">square</span><span class="err"> </span><span class="mi">23</span><span class="err"> </span><span class="ss">&#39;solid</span><span class="err"> </span><span class="s">&quot;black&quot;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we go through and put each block in the right order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;render-quilt&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">render-quilt</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">quilt</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for*/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">image</span><span class="err"> </span><span class="nv">empty-image</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">x</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">above</span><span class="err"> </span><span class="nv">image</span>
</span><span class='line'>  <span class="err">           </span><span class="p">(</span><span class="nf">for*/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">image</span><span class="err"> </span><span class="nv">empty-image</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">               </span><span class="p">(</span><span class="err">[</span><span class="nv">y</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">beside</span><span class="err"> </span><span class="nv">image</span>
</span><span class='line'>  <span class="err">                     </span><span class="p">(</span><span class="nf">render-block</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">quilt</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">y</span><span class="p">))))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then stitch it all together and save it to a file:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;render&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-runtime-path</span><span class="err"> </span><span class="nv">the-png-path</span>
</span><span class='line'>  <span class="err">  </span><span class="s">&quot;tmp/2012-05-07-quilt-colouring.png&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">&lt;render-square&gt;</span>
</span><span class='line'>  <span class="nv">&lt;render-block&gt;</span>
</span><span class='line'>  <span class="nv">&lt;render-quilt&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">save-image</span><span class="err"> </span><span class="p">(</span><span class="nf">render-quilt</span><span class="err"> </span><span class="nv">colouring</span><span class="err"> </span><span class="nv">quilt</span><span class="p">)</span>
</span><span class='line'>  <span class="err">            </span><span class="nv">the-png-path</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The final thing is to write the function to translate between our
colours and Racket’s colors. For simplicity, I’ve made a stronger
colouring than my wife wanted. She didn’t want some colours to connect
across corners, but I have treated every color uniformly. Even though
she will use six colours, I’m really only using four and delaying the
selection of which of the two variations of green and red she uses for
the end.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;color-definitions&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">colours</span>
</span><span class='line'>  <span class="err">  </span><span class="o">&#39;</span><span class="p">(</span><span class="nv">red-or-pink</span><span class="err"> </span><span class="nv">green-or-green-plaid</span><span class="err"> </span><span class="nv">yellow</span><span class="err"> </span><span class="nv">blue</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">quilt-colour-&gt;racket-color</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-lambda</span>
</span><span class='line'>  <span class="err">   [</span><span class="ss">&#39;green-or-green-plaid</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">zero?</span><span class="err"> </span><span class="p">(</span><span class="nf">random</span><span class="err"> </span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="s">&quot;Green&quot;</span>
</span><span class='line'>  <span class="err">      </span><span class="s">&quot;DarkGreen&quot;</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">   [</span><span class="ss">&#39;yellow</span><span class="err"> </span><span class="s">&quot;Yellow&quot;</span><span class="err">]</span>
</span><span class='line'>  <span class="err">   [</span><span class="ss">&#39;blue</span><span class="err"> </span><span class="s">&quot;Blue&quot;</span><span class="err">]</span>
</span><span class='line'>  <span class="err">   [</span><span class="ss">&#39;red-or-pink</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">zero?</span><span class="err"> </span><span class="p">(</span><span class="nf">random</span><span class="err"> </span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="s">&quot;Red&quot;</span>
</span><span class='line'>  <span class="err">      </span><span class="s">&quot;DeepPink&quot;</span><span class="p">)</span><span class="err">]</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see an example colouring:</p>

<p><a href="http://jeapostrophe.github.com/downloads/code/tmp/2012-05-07-quilt-colouring.png"><img
src="http://jeapostrophe.github.com/downloads/code/tmp/2012-05-07-quilt-colouring.png" align="center"
/></a></p>

<p>When she finishes the quilt, I’ll update this post with a picture of
what she went with.</p>

<p>(<em>UPDATE</em> Here’s her blog post about the finished quilt: <a
href="http://madlibster.blogspot.jp/2012/05/quilt-for-iris.html">read
it</a>!)</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">racket/list</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/function</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/match</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/system</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/runtime-path</span>
</span><span class='line'>  <span class="err">         </span><span class="mi">2</span><span class="nv">htdp/image</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;color-definitions&gt;</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;the-nodes&gt;</span>
</span><span class='line'>  <span class="nv">&lt;the-edges&gt;</span>
</span><span class='line'>  <span class="nv">&lt;print-it&gt;</span>
</span><span class='line'>  <span class="nv">&lt;the-graph&gt;</span>
</span><span class='line'>  <span class="nv">&lt;colouring&gt;</span>
</span><span class='line'>  <span class="nv">&lt;render&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2012-05-07-quilt-colouring.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Professor Layton and the Last Specter, Puzzle #146]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/05/07/professor-layton-and-the-last-specter-puzzle-146/"/>
    <updated>2012-05-07T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/05/07/professor-layton-and-the-last-specter-puzzle-146</id>
    <content type="html"><![CDATA[<p>This is for <a href="http://tinyurl.com/7yefk76">Puzzle 146</a>. Here is the
puzzle:</p>

<blockquote><p>A bookcase has seven shelves each filled with 10 books of the same
size.</p>

<p>When you choose a book, you must also take the two books above, below,
to the left, and to the right of the one you actually want. If there are
fewer than two books in any of these directions, you cannot choose that
book.</p>

<p>Choosing as many books as possible, how many books will you end up
taking?</p></blockquote>

<!-- more -->


<p>I encoded the bookcase as a hash table in Racket, where the key is the
coordinate of the book and the value is whether the book has been taken.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;bookcase&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">bookcase</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for*/hash</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">shelf</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">7</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">              [</span><span class="nv">book</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">10</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">values</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">shelf</span><span class="err"> </span><span class="nv">book</span><span class="p">)</span><span class="err"> </span><span class="no">#t</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I didn’t know when I wrote it, but I assumed that it would not matter
what order you picked the books in, so I just considered taking them
from left to right, and top to bottom. After consider each book, I would
return the new bookcase, after having removed some books. The number of
books in this bookcase, subtracted from 70, would give me the number
selected:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;selecting&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">final-bookcase</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for*/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">bookcase</span><span class="err"> </span><span class="nv">bookcase</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">shelf</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">7</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">       [</span><span class="nv">book</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">10</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="nv">&lt;loop-body&gt;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="mi">70</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-count</span><span class="err"> </span><span class="nv">final-bookcase</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside the loop, it will be convenient to bind an escape continuation to
return early. The actual loop body is divided into three parts. First,
we’ll make sure that the book we’re consider is actually there. Then,
we’ll make sure it has two books in every directions. Finally, we’ll
return the updated bookcase. The code will look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;loop-body&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">let/ec</span><span class="err"> </span><span class="nv">return</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;check-this-book&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;check-others&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;update-bookcase&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first part is really simple: just call our predicate and if it isn’t
there, call the escape continuation to jump past the rest of the code
and leave the bookcase unchanged.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;check-this-book&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">unless</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-has-key?</span><span class="err"> </span><span class="nv">bookcase</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">shelf</span><span class="err"> </span><span class="nv">book</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">return</span><span class="err"> </span><span class="nv">bookcase</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The middle part is the most complicated. Here’s the idea: we’ll loop
over the eight other different books (the two above, below, to the left,
and to the right) and remove them from the bookcase, if they are there.
If any book isn’t there, we’ll return from the outer loop with the
original bookcase, because the conditions aren’t met, using the escape
continuation.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;check-others&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">other-book-offsets</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">-1</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">-2</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="mi">-1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="mi">-2</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">new-bookcase</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for*/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">new-bookcase</span><span class="err"> </span><span class="nv">bookcase</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">diff</span><span class="err"> </span><span class="p">(</span><span class="nf">in-list</span><span class="err"> </span><span class="nv">other-book-offsets</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">new-book</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">shelf</span><span class="err"> </span><span class="p">(</span><span class="nf">car</span><span class="err"> </span><span class="nv">diff</span><span class="p">))</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">book</span><span class="err"> </span><span class="p">(</span><span class="nf">cdr</span><span class="err"> </span><span class="nv">diff</span><span class="p">))))</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-has-key?</span><span class="err"> </span><span class="nv">new-bookcase</span><span class="err"> </span><span class="nv">new-book</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">hash-remove</span><span class="err"> </span><span class="nv">new-bookcase</span><span class="err"> </span><span class="nv">new-book</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">return</span><span class="err"> </span><span class="nv">bookcase</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the earlier two tests haven’t returned, then when we get to the
third, we’ll know all the right conditions are met, so we can remove the
current book from the bookcase (the one after the other books were
removed):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;update-bookcase&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">hash-remove</span><span class="err"> </span><span class="nv">new-bookcase</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">shelf</span><span class="err"> </span><span class="nv">book</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This technique makes inherent use of functional data-structures, because
the bookcase is not destructively modified during the trial deletions of
the eight books. If it were, then we couldn’t just return the original
bookcase. Instead, we’d have to undo the changes, or do the inner loop
twice: once to check if we should and once to actually remove them.
Either way, we’d be doing about twice as much work.</p>

<p>This program also demonstrates how useful early return, escape
continuations can be. If we didn’t have them, then in the first case,
we’d just have to change the syntactic structure of the program, by
putting the rest of the loop body on the false side of if. In the second
case, however, it would be more complicated, because we’d have to
continue the loop past the point of usefulness and check if it was
successful at the end—maybe seeing how many books were removed or by
keeping a boolean on the side. Either way, escape continuations saved
the day.</p>

<p>In retrospect, I think a good way to solve this would be to think of it
has a packing problem where you have a plus sign where the legs are each
two units and you are trying to fit as many as possible on a 7x10 grid.</p>

<p>Was this faster or slower than doing it the old fashion way&#8230;? Who
knows.</p>

<p>Can you work out what the answer is&#8230;?</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">&lt;bookcase&gt;</span>
</span><span class='line'>  <span class="nv">&lt;selecting&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2012-05-07-professor-layton-and-the-last-specter-puzzle-146.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stupid Interview Questions - Introduction + Reversing a Doubly Linked List]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/03/31/siq-reverse-dll/"/>
    <updated>2012-03-31T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/03/31/siq-reverse-dll</id>
    <content type="html"><![CDATA[<p>Stupid interviews ask applicants to write programs on whiteboards or
pieces of paper without the resources that are normally available when
programming. These questions purport to be able understanding the
applicant’s algorithmic design process, but the problems in question are
almost always so trivial that no interesting thinking is necessary.
Worse, many of these questions are really more about knowing inane
tricks than having good design abilities.</p>

<p>Some students in my lab are always talking and worrying about such
problems. I like to provide unnecessarily silly solutions to some of the
questions. In this introduction to the series:</p>

<p>How do you reverse a doubly linked list?</p>

<!-- more -->


<h1>The Obvious</h1>

<p>The naive implementation looks like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;naive-impl&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-reverse!</span><span class="err"> </span><span class="nv">l</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">head</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-head</span><span class="err"> </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">last</span><span class="err"> </span><span class="no">#f</span><span class="err">] [</span><span class="nv">current</span><span class="err"> </span><span class="nv">head</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">when</span><span class="err"> </span><span class="nv">last</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">set-node-last!</span><span class="err"> </span><span class="nv">last</span><span class="err"> </span><span class="nv">current</span><span class="p">))</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">when</span><span class="err"> </span><span class="nv">current</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">next</span><span class="err"> </span><span class="p">(</span><span class="nf">node-next</span><span class="err"> </span><span class="nv">current</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">set-node-next!</span><span class="err"> </span><span class="nv">current</span><span class="err"> </span><span class="nv">last</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">current</span><span class="err"> </span><span class="nv">next</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">set-dll-head!</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-tail</span><span class="err"> </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">set-dll-tail!</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="nv">head</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The thing to notice about this implementation is that it takes O(n) time
and is a tiny bit hairy in the order that the effects have to happen in,
plus the swapping at the end.</p>

<p>I assume that getting this right is what interviewers are looking for
when they ask a question like this. It would be even better if they
asked about how you would validate that your code worked. Here’s what I
did:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;naive-tests&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-test</span><span class="err"> </span><span class="nv">make-dll</span><span class="err"> </span><span class="nv">dll-cons!</span><span class="err"> </span><span class="nv">dll-snoc!</span>
</span><span class='line'>  <span class="err">                  </span><span class="nv">dll-fold</span><span class="err"> </span><span class="nv">dll-rfold</span><span class="err"> </span><span class="nv">dll-reverse!</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">c123</span><span class="err"> </span><span class="p">(</span><span class="nf">make-dll</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">dll-cons!</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">dll-cons!</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">dll-snoc!</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">check-equal?</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-fold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="mi">3</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">check-equal?</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-rfold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">3</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">dll-reverse!</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">check-equal?</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-fold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">3</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">check-equal?</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-rfold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="mi">3</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">dll-cons!</span><span class="err"> </span><span class="mi">4</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">dll-reverse!</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">dll-cons!</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">check-equal?</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-fold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">0</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="mi">4</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">check-equal?</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-rfold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">4</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">dll-test</span><span class="err"> </span><span class="nv">make-dll</span><span class="err"> </span><span class="nv">dll-cons!</span><span class="err"> </span><span class="nv">dll-snoc!</span>
</span><span class='line'>  <span class="err">          </span><span class="nv">dll-fold</span><span class="err"> </span><span class="nv">dll-rfold</span><span class="err"> </span><span class="nv">dll-reverse!</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Remember how we parameterize these tests over the implementation of the
functions. We’ll pass in different implementations later.) And, by the
way, this assumes we have this definition of doubly-linked-lists:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;dll&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">node</span><span class="err"> </span><span class="p">(</span><span class="nf">last</span><span class="err"> </span><span class="nv">element</span><span class="err"> </span><span class="nv">next</span><span class="p">)</span><span class="err"> </span><span class="o">#</span><span class="nv">:transparent</span><span class="err"> </span><span class="o">#</span><span class="nv">:mutable</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">dll</span><span class="err"> </span><span class="p">(</span><span class="nf">head</span><span class="err"> </span><span class="nv">tail</span><span class="p">)</span><span class="err"> </span><span class="o">#</span><span class="nv">:transparent</span><span class="err"> </span><span class="o">#</span><span class="nv">:mutable</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">make-dll</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">dll</span><span class="err"> </span><span class="no">#f</span><span class="err"> </span><span class="no">#f</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">((</span><span class="nf">make-dll-cons!</span>
</span><span class='line'>  <span class="err">          </span><span class="nv">dll-head</span><span class="err"> </span><span class="nv">node</span><span class="err"> </span><span class="nv">set-node-last!</span>
</span><span class='line'>  <span class="err">          </span><span class="nv">dll-tail</span><span class="err"> </span><span class="nv">set-dll-tail!</span><span class="err"> </span><span class="nv">set-dll-head!</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">e</span><span class="err"> </span><span class="nv">l</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">head</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-head</span><span class="err"> </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">new</span><span class="err"> </span><span class="p">(</span><span class="nf">node</span><span class="err"> </span><span class="no">#f</span><span class="err"> </span><span class="nv">e</span><span class="err"> </span><span class="nv">head</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">when</span><span class="err"> </span><span class="nv">head</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">set-node-last!</span><span class="err"> </span><span class="nv">head</span><span class="err"> </span><span class="nv">new</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">unless</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-tail</span><span class="err"> </span><span class="nv">l</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">set-dll-tail!</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="nv">new</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">set-dll-head!</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="nv">new</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">dll-cons!</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">make-dll-cons!</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">dll-head</span><span class="err"> </span><span class="nv">node</span><span class="err"> </span><span class="nv">set-node-last!</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">dll-tail</span><span class="err"> </span><span class="nv">set-dll-tail!</span><span class="err"> </span><span class="nv">set-dll-head!</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">dll-snoc!</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">make-dll-cons!</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">dll-tail</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">last</span><span class="err"> </span><span class="nv">element</span><span class="err"> </span><span class="nv">next</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">node</span><span class="err"> </span><span class="nv">next</span><span class="err"> </span><span class="nv">element</span><span class="err"> </span><span class="nv">last</span><span class="p">))</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">set-node-next!</span><span class="err"> </span><span class="nv">dll-head</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">set-dll-head!</span><span class="err"> </span><span class="nv">set-dll-tail!</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">make-dll-fold</span><span class="err"> </span><span class="nv">dll-head</span><span class="err"> </span><span class="nv">node-next</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-fold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">node</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="nv">node</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">node-element</span><span class="err"> </span><span class="nv">node</span><span class="p">)</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">dll-fold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="p">(</span><span class="nf">node-next</span><span class="err"> </span><span class="nv">node</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">      </span><span class="nv">empty</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">list</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">dll-fold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-head</span><span class="err"> </span><span class="nv">list</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">dll-fold</span><span class="err"> </span><span class="p">(</span><span class="nf">make-dll-fold</span><span class="err"> </span><span class="nv">dll-head</span><span class="err"> </span><span class="nv">node-next</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">dll-rfold</span><span class="err"> </span><span class="p">(</span><span class="nf">make-dll-fold</span><span class="err"> </span><span class="nv">dll-tail</span><span class="err"> </span><span class="nv">node-last</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>But, remember, my whole goal is to show silly ways to &#8220;solve&#8221; these
interview problems&#8230; so let’s think of a trick.</p>

<h1>The Trick</h1>

<p>An important trick that functional programmers should always be ready to
employ is delaying. Rather than actually doing work, just record that
you should do in the future, so future operations will act as-if the
operation has been done, or perhaps do (some) of it for you.</p>

<p>In this case, we’ll make dll-reverse! O(1) by simply recording that we
should consider the list reversed for all future uses.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;rdll-impl&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">rdll-reverse!</span><span class="err"> </span><span class="nv">l</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">set-rdll-reversed?!</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">l</span><span class="err"> </span><span class="p">(</span><span class="nf">not</span><span class="err"> </span><span class="p">(</span><span class="nf">rdll-reversed?</span><span class="err"> </span><span class="nv">l</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This, of course, assumes that the rest of the doubly-linked-list code is
ready to pay attention to this flag. Luckily, it is pretty easy to do
that, without really writing anything again:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;rdll&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">rdll</span><span class="err"> </span><span class="p">(</span><span class="nf">reversed?</span><span class="err"> </span><span class="nv">dll</span><span class="p">)</span><span class="err"> </span><span class="o">#</span><span class="nv">:transparent</span><span class="err"> </span><span class="o">#</span><span class="nv">:mutable</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">make-rdll</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">rdll</span><span class="err"> </span><span class="no">#f</span><span class="err"> </span><span class="p">(</span><span class="nf">make-dll</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-syntax-rule</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define-rdll</span><span class="err"> </span><span class="p">(</span><span class="nf">id</span><span class="err"> </span><span class="nv">arg</span><span class="err"> </span><span class="o">...</span><span class="err"> </span><span class="nv">rl</span><span class="p">)</span><span class="err"> </span><span class="nv">reversed-dll</span><span class="err"> </span><span class="nv">normal-dll</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">id</span><span class="err"> </span><span class="nv">arg</span><span class="err"> </span><span class="o">...</span><span class="err"> </span><span class="nv">rl</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="p">(</span><span class="nf">rdll-dll</span><span class="err"> </span><span class="nv">rl</span><span class="p">))</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">rdll-reversed?</span><span class="err"> </span><span class="nv">rl</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">reversed-dll</span><span class="err"> </span><span class="nv">arg</span><span class="err"> </span><span class="o">...</span><span class="err"> </span><span class="nv">l</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">normal-dll</span><span class="err"> </span><span class="nv">arg</span><span class="err"> </span><span class="o">...</span><span class="err"> </span><span class="nv">l</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-rdll</span><span class="err"> </span><span class="p">(</span><span class="nf">rdll-cons!</span><span class="err"> </span><span class="nv">e</span><span class="err"> </span><span class="nv">rl</span><span class="p">)</span><span class="err"> </span><span class="nv">dll-snoc!</span><span class="err"> </span><span class="nv">dll-cons!</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-rdll</span><span class="err"> </span><span class="p">(</span><span class="nf">rdll-snoc!</span><span class="err"> </span><span class="nv">e</span><span class="err"> </span><span class="nv">rl</span><span class="p">)</span><span class="err"> </span><span class="nv">dll-cons!</span><span class="err"> </span><span class="nv">dll-snoc!</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-rdll</span><span class="err"> </span><span class="p">(</span><span class="nf">rdll-fold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">rl</span><span class="p">)</span><span class="err"> </span><span class="nv">dll-rfold</span><span class="err"> </span><span class="nv">dll-fold</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-rdll</span><span class="err"> </span><span class="p">(</span><span class="nf">rdll-rfold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">rl</span><span class="p">)</span><span class="err"> </span><span class="nv">dll-fold</span><span class="err"> </span><span class="nv">dll-rfold</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that that’s all setup, we can re-run the earlier tests with these
new functions:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;rdll-tests&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">dll-test</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">make-rdll</span><span class="err"> </span><span class="nv">rdll-cons!</span><span class="err"> </span><span class="nv">rdll-snoc!</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">rdll-fold</span><span class="err"> </span><span class="nv">rdll-rfold</span><span class="err"> </span><span class="nv">rdll-reverse!</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Conclusion</h1>

<p>This idea is the basis of a lot of efficient functional data structures.
For example, if you want to make append fast, then just store &#8220;append
nodes&#8221; in your &#8220;list&#8221;. (<a href="http://news.ycombinator.com/item?id=814632">These are called &#8220;conc&#8221;
lists.</a>) If you want to make
snoc/last fast, then store two lists—one starting from the head and one
starting from the tail—and deal with one going empty when you get to it.</p>

<h1>Exercises</h1>

<ol>
<li><p>In this code, I’ve used a functional/structure oriented approach. In
this case, an object-oriented approach could be more convenient for the
user, because then they would be inherently parameterized over the set
of doubly linked-list functions. For your homework, translate this idea
to an OO setting, where &#8220;fast reversible&#8221; lists and normal lists just
implement a common interface.</p></li>
<li><p>In this code, nodes and lists are distinguished from each other.
Rewrite it so there is no such distinction, while maintaining the O(1)
reversibility. (Hint: The hard part is telling each node that the list
is reversed simultaneously.) (Spoiler: Have them store a pointer to a
flag rather than a flag itself.)</p></li>
</ol>


<h1>Whole Program</h1>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">rackunit</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/list</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">&lt;dll&gt;</span>
</span><span class='line'>  <span class="nv">&lt;naive-impl&gt;</span>
</span><span class='line'>  <span class="nv">&lt;naive-tests&gt;</span>
</span><span class='line'>  <span class="nv">&lt;rdll&gt;</span>
</span><span class='line'>  <span class="nv">&lt;rdll-impl&gt;</span>
</span><span class='line'>  <span class="nv">&lt;rdll-tests&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2012-03-31-siq-reverse-dll.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Professor Layton and the Diabolical Box, Puzzle #132]]></title>
    <link href="http://jeapostrophe.github.com/blog/2011/06/30/professor-layton-and-the-diabolical-box-puzzle-132/"/>
    <updated>2011-06-30T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2011/06/30/professor-layton-and-the-diabolical-box-puzzle-132</id>
    <content type="html"><![CDATA[<p>I try to solve a puzzle of some kind every morning. I use
<a href="https://en.wikipedia.org/wiki/Sudoku">Sudoku</a>,
<a href="https://en.wikipedia.org/wiki/Picross">Picross</a>, and often, <a href="https://en.wikipedia.org/wiki/Professor_Layton">Professor
Layton</a>. Sometimes it is
convenient to write a program to solve some of the more annoying
&#8220;search&#8221; puzzles. I’ll post the Racket programs with a little bit of
commentary.</p>

<!-- more -->


<p>This is for <a href="http://tinyurl.com/6pjbzrs">Puzzle 132</a>. Here is the
puzzle:</p>

<blockquote><p>Two brothers have inherited their parents’ five-piece art collection.
According to the will, the older brother will get a set of paintings
worth twice what the younger brother gets. In order to ascertain the
value of the paintings, the brothers called in an appraiser, who valued
each painting as shown below. For his services, the appraiser was
promised the one painting left over after the brothers divided the art
according to their parents’ wishes.</p>

<p>Assuming that individual paintings can’t be divided, which one does
the appraiser get?</p></blockquote>

<p>There is then a picture of five paintings with prices underneath. They
are: A worth 20,000, B worth 60,000, C worth 55,000, D worth 45,000, E
worth 95,000.</p>

<p>I encoded this information into a vector in Racket:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;paintings&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">paintings</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">vector</span><span class="err"> </span><span class="mi">20</span><span class="err"> </span><span class="mi">60</span><span class="err"> </span><span class="mi">55</span><span class="err"> </span><span class="mi">45</span><span class="err"> </span><span class="mi">95</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We won’t keep track of the labels, we’ll just remember that, for
example, 0 is A and 4 is E. Also, we divide everything by 1,000 so we
don’t have to type so much.</p>

<p>The basic algorithm we’ll use is a trivial search: try assigning each
painting to each brother and stop when the value of the older brother’s
paintings is twice that of the younger.</p>

<p>The trick, however, is that we’ll represent the assignment as the older
brother’s set combined with the younger brother’s set. We’ll do this
simultaneously with a bit-vector, where the 1s indicate that the older
brother gets it and the 0s indicate that the younger brother does. We’ll
independently pick one painting which will be &#8220;left over&#8221; that the
appraiser will get. Here’s the main loop:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;solver&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">for*</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">assignment</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="mi">31</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">       [</span><span class="nv">appraiser</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="p">(</span><span class="nf">vector-length</span><span class="err"> </span><span class="nv">paintings</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">older-value</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">assignment-&gt;value</span><span class="err"> </span><span class="nv">assignment</span><span class="err"> </span><span class="nv">appraiser</span><span class="err"> </span><span class="no">#t</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">younger-value</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">assignment-&gt;value</span><span class="err"> </span><span class="nv">assignment</span><span class="err"> </span><span class="nv">appraiser</span><span class="err"> </span><span class="no">#f</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">when</span><span class="err"> </span><span class="p">(</span><span class="nf">=</span><span class="err"> </span><span class="nv">older-value</span><span class="err"> </span><span class="p">(</span><span class="nf">*</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="nv">younger-value</span><span class="p">))</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">return</span><span class="err"> </span><span class="nv">appraiser</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>One thing to note here: for* is like a nested for—we loop over the
assignments /and/ loop over every painting each round. (This, by the
way, means that we do twice as much work because we consider both
assignments for the appraiser’s painting.)</p>

<p>Two other cute things: First, we use a literal binary number to write
down the completely full set, but we have to add one to actually visit
it. Second, the assignment->value function (below) will take an argument
to determine whether to add up the 1s or the 0s. Here’s it’s definition</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;valuation&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">assignment-&gt;value</span><span class="err"> </span><span class="nv">assignment</span><span class="err"> </span><span class="nv">ignored</span><span class="err"> </span><span class="nv">which</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for/sum</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">painting</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="p">(</span><span class="nf">vector-length</span><span class="err"> </span><span class="nv">paintings</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">            </span><span class="o">#</span><span class="nv">:unless</span><span class="err"> </span><span class="p">(</span><span class="nf">=</span><span class="err"> </span><span class="nv">painting</span><span class="err"> </span><span class="nv">ignored</span><span class="p">))</span>
</span><span class='line'>  <span class="err">           </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">eq?</span><span class="err"> </span><span class="nv">which</span><span class="err"> </span><span class="p">(</span><span class="nf">bitwise-bit-set?</span><span class="err"> </span><span class="nv">assignment</span><span class="err"> </span><span class="nv">painting</span><span class="p">))</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">vector-ref</span><span class="err"> </span><span class="nv">paintings</span><span class="err"> </span><span class="nv">painting</span><span class="p">)</span>
</span><span class='line'>  <span class="err">             </span><span class="mi">0</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The for/sum variant adds up the result of each iteration of the loop,
the #:unless clause skips the iteration where the appraiser’s painting
is considered, and the if determines which brother we’re considering.</p>

<p>If you know anything about Racket, there may be one more confusing thing
about the code in <valuation>&#8230; return! Expressions in Racket don’t
normally have non-local returns like that. How can we make the inner
area of the loop stop and return the appraiser painting that works? It’s
simple: bind return to an escape continuation:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;escape-continuation&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">let/ec</span><span class="err"> </span><span class="nv">return</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;solver&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Was this faster or slower than doing it the old fashion way&#8230;? Who
knows.</p>

<p>Can you work out what the answer is&#8230;?</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">&lt;paintings&gt;</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;valuation&gt;</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nb">vector-ref </span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">vector</span><span class="err"> </span><span class="ss">&#39;A</span><span class="err"> </span><span class="ss">&#39;B</span><span class="err"> </span><span class="ss">&#39;C</span><span class="err"> </span><span class="ss">&#39;D</span><span class="err"> </span><span class="ss">&#39;E</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">&lt;escape-continuation&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2011-06-30-professor-layton-and-the-diabolical-box-puzzle-132.rkt">Download</a></p>
]]></content>
  </entry>
  
</feed>
