<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jay McCarthy]]></title>
  <link href="http://jeapostrophe.github.com/atom.xml" rel="self"/>
  <link href="http://jeapostrophe.github.com/"/>
  <updated>2012-08-20T11:00:06-06:00</updated>
  <id>http://jeapostrophe.github.com/</id>
  <author>
    <name><![CDATA[Jay McCarthy]]></name>
    <email><![CDATA[jay.mccarthy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Church Encoding]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/08/20/church-encoding/"/>
    <updated>2012-08-20T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/08/20/church-encoding</id>
    <content type="html"><![CDATA[<p>One of my favourite ideas in the Lambda Calculus in Church Encoding.
This is the basis of how the Lambda Calculus, with only functions, can
represent other kinds of data.</p>

<!-- more -->


<p>The Lambda Calculus is a very simple language. It just has variable
references, unary functions, and unary applications. Yet, it can express
all computations. A natural question is how this simple language can
represent things like numbers, lists, and other complex data structures?</p>

<h1>Booleans</h1>

<p>I think it is actually easier to start with the most basic of
data-structures: the boolean.</p>

<p>Everyone knows booleans. There are just two of them: true and false. And
what do we do with them? We decide whether to launch the missiles or to
bake a cake:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;boolean-example&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="nv">&lt;some-boolean&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">launch-the-missiles</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">bake-a-cake</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The essence of being a boolean is being able to decide between two
choices. We can represent this idea in Lambda simply:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;booleans&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">TRUE</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">first-choice</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">second-choice</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="nv">first-choice</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">FALSE</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">first-choice</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">second-choice</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="nv">second-choice</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The booleans are just functions that when given two choices, return one
or the other. These values can easily be used with if:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;if&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">IF</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">condition</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">true-side-thunk</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">false-side-thunk</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(((</span><span class="nf">condition</span><span class="err"> </span><span class="nv">true-side-thunk</span><span class="p">)</span><span class="err"> </span><span class="nv">false-side-thunk</span><span class="p">)</span><span class="err"> </span><span class="nv">UNIT</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>IF simply takes a boolean, deliver the thunks, and calls the one that
the condition selects. This example makes the right choice:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;real-boolean-example&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(((</span><span class="nf">IF</span><span class="err"> </span><span class="nv">FALSE</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="ss">&#39;launch-the-missiles</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="ss">&#39;bake-a-cake</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Booleans are a microcosm of the idea of Church Encoding: represent data
by what it /does/ rather than &#8220;is&#8221;. Other to put it another way, data
&#8220;isn’t&#8221; anything, it is just what it does. Booleans make choices, so
encode them as functions that make choices.</p>

<p>All boolean functions can be build with these definitions. There’s
normally an obvious way and clever way. Here are two implementations of
and:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;and&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">AND-OBVIOUS</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">left-side</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">right-side</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(((</span><span class="nf">IF</span><span class="err"> </span><span class="nv">left-side</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="nv">right-side</span><span class="p">))</span>
</span><span class='line'>  <span class="err">       </span><span class="nv">FALSE</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">AND-CLEVER</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">left-side</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">right-side</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">((</span><span class="nf">left-side</span><span class="err"> </span><span class="nv">right-side</span><span class="p">)</span><span class="err"> </span><span class="nv">FALSE</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &#8220;obvious&#8221; way is based on the traditional understanding of data
where we must use functions like IF, whereas the &#8220;clever&#8221; way is based
on the understanding that booleans <em>are</em> IF, so we don’t need to call
it.</p>

<h1>Natural numbers</h1>

<p>Let’s do something a little bit more complicated: numbers.</p>

<p>The traditional Church Encoding of numbers all starts with two things:
zero and the &#8220;plus one&#8221;—or successor—function.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;numbers&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">ZERO</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">f</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">z</span><span class="p">)</span><span class="err"> </span><span class="nv">z</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">SUCC</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">n</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">f</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">z</span><span class="p">)</span><span class="err"> </span><span class="p">((</span><span class="nf">n</span><span class="err"> </span><span class="nv">f</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">f</span><span class="err"> </span><span class="nv">z</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using these definitions you can implement stuff like addition and derive
other numbers, like one and two:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;addition&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">ONE</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">f</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">z</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">f</span><span class="err"> </span><span class="nv">z</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">TWO</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">f</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">z</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">f</span><span class="err"> </span><span class="p">(</span><span class="nf">f</span><span class="err"> </span><span class="nv">z</span><span class="p">)))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">PLUS</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">n</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">m</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">f</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">z</span><span class="p">)</span><span class="err"> </span><span class="p">((</span><span class="nf">n</span><span class="err"> </span><span class="nv">f</span><span class="p">)</span><span class="err"> </span><span class="p">((</span><span class="nf">m</span><span class="err"> </span><span class="nv">f</span><span class="p">)</span><span class="err"> </span><span class="nv">z</span><span class="p">)))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>But what do these functions even mean? If Church Encoding is about
representing data with what it <em>does</em>&#8230; what do numbers <em>do</em>?</p>

<p>Let’s take a small detour in the land of my second favourite
programming, Coq. This is the type of natural number induction:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>forall P : nat -> Prop,             
</span><span class='line'>    P 0                             
</span><span class='line'> -> (forall m : nat, P m -> P (S m))
</span><span class='line'> -> forall n : nat,                 
</span><span class='line'>     P n</span></code></pre></td></tr></table></div></figure>


<p> </p>

<p>This say that if you have a property about numbers, and give a proof of
that property for zero, then give a way of taking a proof about m and
returning a proof about m + 1, then for any number n, you can have a
proof about n. How could this function be implemented?</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;nat_ind&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">nat_ind</span><span class="err"> </span><span class="nv">Pz</span><span class="err"> </span><span class="nv">Pm2PSm</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">zero?</span><span class="err"> </span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="nv">Pz</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">Pm2PSm</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="p">(</span><span class="nf">sub1</span><span class="err"> </span><span class="nv">n</span><span class="p">)))))</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">loop</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Natural number induction’s type suggests that it would do interesting
work, but really it was you that did all the work. You gave the proof
about zero, which it returns to you if you call it with zero. You gave
the proof from m to m + 1, which it just uses in case the number isn’t
zero. All natural number induction does is do a trivial loop calling
functions you gave it.</p>

<p>Consider calling this with two. Here’s the trace:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;nat_ind_trace2&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Pm2PSm</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Pm2PSm</span><span class="err"> </span><span class="p">(</span><span class="nf">Pm2PSm</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Pm2PSm</span><span class="err"> </span><span class="p">(</span><span class="nf">Pm2PSm</span><span class="err"> </span><span class="nv">Pz</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hmm&#8230; that looks familiar.</p>

<p>Now what does all this natural number induction have to do with Church
Encoding?</p>

<p>Well, Church Encoding of natural numbers represents them as their own
induction functions. The Church Encoding of ’two’ IS “(Pm2PSm (Pm2PSm
Pz))“ where the proof for zero and the proof for the successor are
passed as arguments.</p>

<p>In the same way the essence of booleans is choice, the essence of
natural numbers is induction.</p>

<p>Isn’t that awesome?</p>

<p>As an aside, Church Encoding is Ur-Object-Oriented programming. For more
on this, read William Cook’s great paper: <a href="http://www.cs.utexas.edu/~wcook/Drafts/2009/essay.pdf">On understanding data
abstraction,
revisited</a>.</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">UNIT</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="nv">x</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;booleans&gt;</span>
</span><span class='line'>  <span class="nv">&lt;if&gt;</span>
</span><span class='line'>  <span class="nv">&lt;real-boolean-example&gt;</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;and&gt;</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;numbers&gt;</span>
</span><span class='line'>  <span class="nv">&lt;addition&gt;</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;nat_ind&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2012-08-20-church-encoding.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DrDr and its archives]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/08/13/drdr-archive/"/>
    <updated>2012-08-13T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/08/13/drdr-archive</id>
    <content type="html"><![CDATA[<p>After I developed <a href="http://drdr.racket-lang.org">DrDr</a>, it was running
smoothly for a couple hundred revisions, when suddenly it stopped
working. I investigated and found that I couldn’t create any files&#8230;
had I really run out of space on the 220G hard drive?</p>

<p>In this post, I discuss how I found and fixed the problem.</p>

<!-- more -->


<h1>Background on DrDr</h1>

<p>DrDr is an continuous integration system for Racket. Every time a push
is made to our repository, DrDr will download it, compile it, and &#8220;test&#8221;
every single file in the code base. In this case, &#8220;test&#8221; just means
compile, load, and run. Some files, such as
<code>collects/tests/web-server/run-all-tests.rkt</code> are test suites that run a
huge number of tests, whereas others, like <code>collects/xml/xml.rkt</code> are
simply implementations that have no run-time behavior. DrDr records data
about every file’s run—how long it took, what the output was, what the
exit code was, etc—and reports it to the Racket community. (This has
turned out to be a really good idea because DrDr needs virtually no
cooperation with the files being tested. Racket developers are free to
write tests of any kind with any library. They just have to ensure that
failures are written to STDERR and/or the file exits with a code other
than 0.)</p>

<p>In all, DrDr tests about 8,700 different files and runs for about an
hour and ten minutes per push. (It’s a 12-core machine and gets about 4x
parallel speed-up from that.)</p>

<p>DrDr is designed to be extremely efficient and crash-resistant. It uses
the filesystem as a database and associated two data files with every
source file (and directory). The first is a log of the recorded
information and the second is an &#8220;analysis&#8221; of the log that determines
how many changes, unclean exits, timeouts, etc there were in the file
(or directory.) This allows the Web view to simply read one file and
print out the analysis data without doing any search. (The
crash-resistance comes from it using these files (or rather their lack)
as a work list of things to do. It’s almost like a giant Makefile that
creates and records these files as it goes. So when there’s a crash,
there’s no in-memory state that needs to be saved or recovered&#8230; it’s
all written to the filesystem immediately.)</p>

<h1>Running out of space&#8230;</h1>

<p>This means that on every push to our repository, DrDr creates about
18,000 files. Every file is very small, typically less than 50 bytes,
because most &#8220;tests&#8221; have no errors and no output. There’s no danger of
running out of space like that&#8230; right?</p>

<p>If you know anything about file-systems, you should know that there’s a
thing called on &#8220;inode&#8221;. When I explain it to students, I say this: your
file-system is like a giant filing cabinet, it has a finite amount of
volume it can organize and a finite number of folders to put things in,
you can run out of either and your file-system won’t be usable. The
volume is the space (220G) and the folders are the inodes—the names for
file blocks. On my ext4 partition, I have 14M inodes for that 220G
space.</p>

<p>After a few hundred revisions, I had run out of inodes and was in
trouble.</p>

<h1>Saving space</h1>

<p>Most archive and compression formats are designed for saving space. They
normally also save inodes&#8230; because 10,000 files can be put into 1 zip
file&#8230; but that’s not normally their primary purpose. (Naturally, Unix
tradition has done a great job of separating these tasks: tar turns many
files into one that can be compressed independently.)</p>

<p>Based on that, I thought of just tarring the files and reading the tar
file to find the file data when the Web application requested it.
Unfortunately, tar was not designed for easy access to arbitrary files.</p>

<p>A tar file is basically a linked list where one file’s header contains a
link to the next file (actually the file size, but that’s also a pointer
to the next block.) So if you are looking for a particular file in the
archive, you have to do an O(n) search. In DrDr’s case, n is 18,000.</p>

<p>Other popular formats, such as zip or DAR, are just a little bit better.
They have a single catalog for the entire archive—a list of the files
with pointers to their location in the archive. Still an O(n) search,
but at least it plays better with the block cache by limiting seeking,
etc.</p>

<p>After a brief investigation of other formats and failing to find any
efficient format, I decided to write my own. Essentially, I needed
something more like a filesystem.</p>

<h1>DrDr’s Archive Format</h1>

<p>The <a href="https://github.com/plt/racket/blob/master/collects/meta/drdr/archive.rkt">entire archive
code</a>
is a mere 150 lines of code.</p>

<p>I had the advantage of not needing to keep track of permission or any
UNIX attributes. In addition, I didn’t need to deal with modifying the
files, just recording them.</p>

<p>The entire process of turning a directory into an archive is 28 lines.
Here’s how it works:</p>

<ul>
<li><p>Think of the file as a heap of values in some order</p></li>
<li><p>Go through all files and directories and append them one after another
in this heap.</p></li>
<li><p>Encode directories as hash tables that map their contents’ paths to
where they start and how long they are.</p></li>
<li><p>Ensure that you write directories after their contents (so you
actually know where the files will start)</p></li>
<li><p>Write out the root directory hash as the first thing</p></li>
</ul>


<p>And that’s it. It’s a very obvious encoding of a filesystem. It gives us
O(log n) number of accesses to find the file. All but one of those will
be the reading of a Racket hash table that has another O(log n) (where n
is the number of files in that directory) number of operations until we
find the sub-directory.</p>

<p>The code that does the lookup is a bit longer—47 lines—because it has
quite a lot of error handling in case there’s some sort of problem.</p>

<h1>The outcome</h1>

<p>After implementing this, it was a simple matter to write a script to
archive everything that had been produced. (I deleted the last revision
to give me enough inodes to work with.) I decided to only use this
archive format for pushes other than the first one hundred.</p>

<p>This worked really nice. (Although, unfortunately, about a year ago I
had a hard-drive crash and couldn’t recover the data. Not super
important, but a little annoying.)</p>

<p>In the past year, we’ve had 2,111 pushes, generated 75 G of data, with
about 31 M per archived push and 150 M per non-archived push.</p>

<p>It’s experiences with beautiful, simple code like this, that make me
say: I love Racket.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Optimal Shower]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/08/06/shower/"/>
    <updated>2012-08-06T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/08/06/shower</id>
    <content type="html"><![CDATA[<p>One of my goals in life is to do things very efficiently and get a lot
done. But throughout my whole five-year marriage, my wife has always
complained about my long showers, which to her were a waste of time and
valuable water.</p>

<p>As a computer scientist and programmer, I try to use technology to
optimize my life whenever possible. In this article, I discuss how I
improved my shower times and my marriage.</p>

<!-- more -->


<p>Before I start, two pieces of background information.</p>

<p>First, in the first two weeks or so of knowing my wife, she happened to
see me brush my teeth. I left on the water while I brushed and then
rinsed off with the same stream of water. She was horrified. She told me
how it was bad to do that and referenced a Public Service Announcement
from her childhood talking about that which called it out as &#8220;wasting
Utah.&#8221; (Utah is a desert with very little rain: most places where people
live get about 15 inches per year.) Based on this, I repented and have
never left on the water since. (Marriage advice: Do whatever your wife
says.)</p>

<p>Second, I’ve heard of people who take EXTREMELY long showers, like 30
minutes to an hour. I was more in the 15 minute to 30 minute boat,
probably averaging around 20 minutes.</p>

<p>Once we lived together, my wonderful wife started making little comments
about how long my showers were. I made a few attempts to speed them up.
The first was to play a set of a few albums during the shower so I’d
know how long it was taking. Another was to always do the same thing so
I would have a regular order of operations and thus go a bit faster.
These didn’t really make a significant difference. I was probably
consistently at 20 minutes and never more.</p>

<p>Next, I decided that I would &#8220;time&#8221; myself, in a sense, while in the
shower. I would just count (out loud or in my head) as I was in there.
This cut off about 5 minutes on average, probably, down to about 15
minutes.</p>

<p>Next, I went a bit further. I would count out each shower
&#8220;activity&#8221;—such as washing my left arm, etc. I’d give myself to the
count of five. (But when I counted to five, it probably really lasted
between 10 and 15 seconds.) This was very effective and dropped me down
to about 10 minutes per shower.</p>

<p>But I knew I could do better. I just needed some technological help to
keep me focused.</p>

<p>Here’s the concept:</p>

<ul>
<li><p>Plan out every activity that you’re going to do. I came up with 22
things on days I washed my hair and 15 for other days.</p></li>
<li><p>Give yourself 10 seconds per activity.</p></li>
<li><p>Have a music file that &#8220;announces&#8221; what activity you should be doing
at each time.</p></li>
<li><p>Make it exciting by playing intense music (different music for each
activity) during the activity.</p></li>
<li><p>End with a horrible alarm so you will get /out/ of the shower
immediately.</p></li>
</ul>


<p>With this concept in mind, I created two MP3s:</p>

<ul>
<li><p><a href="http://jeapostrophe.github.com/downloads/code/tmp/2012-08-06-shower.mp3">The Shower
Song</a></p></li>
<li><p><a href="http://jeapostrophe.github.com/downloads/code/tmp/2012-08-06-shower-hair.mp3">The Shower
Song (w/ hair)</a></p></li>
</ul>


<p>As my background music, I used the soundtrack for Mega Man 2 for the
NES, by Capcom. For the announcer, I used the espeak system. For the
alarm, I found a horrible alarm on freesound.org.</p>

<p>With this in place, my showers are now either 2:43 (including alarm) or
3:51 (including alarm), depending on whether I am washing my hair on
that day. Normally I have about 10 seconds of alarm while I’m drying
off, though.</p>

<p>Whereas before, a shower would keep me comfortable and lull me back to
sleep a little, now showers are a frenetic rush as I try to get
everything done in about 10 seconds. It is exhilarating and extremely
satisfying to have so much more free time as part of my morning.</p>

<p>You can see the program I used to generate the audio here:</p>

<p><a
href="https://github.com/jeapostrophe/exp/blob/master/shower.rkt">shower.rkt</a></p>

<p>I highly recommend trying this out.</p>

<p>You may be wondering what my wife thinks about this. When I first told
her my plan, I don’t think she believed me. But then after I used it for
the first time, she just laughed at me for a while.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuation Marks, part III: Marks themselves]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/07/30/cont-marks3/"/>
    <updated>2012-07-30T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/07/30/cont-marks3</id>
    <content type="html"><![CDATA[<p>The last two weeks we’ve seen the basic ideas behind continuation marks,
but we’ve never actually used them. This week we show the actual
feature.</p>

<!-- more -->


<p>As usual, we’ll return to the example from last time:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;example&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">show-structure</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-lambda</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="nv">e</span><span class="err"> </span><span class="o">...</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">with-indentation</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">for-each</span><span class="err"> </span><span class="nv">show-structure</span><span class="err"> </span><span class="nv">e</span><span class="p">)))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">?</span><span class="err"> </span><span class="nv">number?</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">displayln/indent</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span><span class="err">]</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">show-structure</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="mi">2</span><span class="p">)</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">4</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err"> </span><span class="mi">6</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">7</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">8</span><span class="p">)</span><span class="err"> </span><span class="mi">9</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>which prints as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 1                  
</span><span class='line'> 2                  
</span><span class='line'>3                   
</span><span class='line'> 4                  
</span><span class='line'> 5                  
</span><span class='line'>6                   
</span><span class='line'> 7                  
</span><span class='line'>  8                 
</span><span class='line'> 9</span></code></pre></td></tr></table></div></figure>


<p> </p>

<p>where we relied on the parameter feature of Racket to implement the
indentation tracking:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;params&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="p">(</span><span class="nf">make-parameter</span><span class="err"> </span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">with-indentation</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">originally</span><span class="err"> </span><span class="p">(</span><span class="nf">indent-level</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">parameterize</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">indent-level</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">originally</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">t</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">displayln/indent</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="p">(</span><span class="nf">indent-level</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">display</span><span class="err"> </span><span class="s">&quot; &quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">displayln</span><span class="err"> </span><span class="nv">x</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can read parameterize as annotating the context of the t evaluation
with information that says &#8220;the indentation level is now 3&#8221; (or
whatever.) But parameters wrap that annotation in a convenient
interface.</p>

<p>The annotation could be expressed directly by &#8220;marking&#8221; (annotating) the
&#8220;continuation&#8221; (context):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;marks&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">indent-level</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">continuation-mark-set-first</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">current-continuation-marks</span><span class="p">)</span>
</span><span class='line'>  <span class="err">   </span><span class="ss">&#39;indent-level</span>
</span><span class='line'>  <span class="err">   </span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">with-indentation</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">originally</span><span class="err"> </span><span class="p">(</span><span class="nf">indent-level</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">with-continuation-mark</span>
</span><span class='line'>  <span class="err">   </span><span class="ss">&#39;indent-level</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">originally</span><span class="p">)</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">t</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">displayln/indent</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="p">(</span><span class="nf">indent-level</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">display</span><span class="err"> </span><span class="s">&quot; &quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">displayln</span><span class="err"> </span><span class="nv">x</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only apparent differences are that we use with-continuation-mark
rather than parameterize, use the symbol &#8216;indent-level, and have to
write the accessor function ourselves. Indeed, you can almost imagine
that parameters are little more than these differences macro-ized. (As
mentioned before, there are other differences with parameters and
concurrency that this leaves out.)</p>

<p>One crucial difference between parameters and continuation marks,
however, is that with parameters you can only observe the <em>last</em> value,
whereas with marks you can observe <em>all</em> values. Our example only looks
at the last one, so we’ll have to change something else to see them all.</p>

<p>Here’s a factorial function, with continuation marks annotating its
arguments:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;fac&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">fac</span><span class="err"> </span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="k">cond </span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">zero?</span><span class="err"> </span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">displayln</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">continuation-mark-set-&gt;list*</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">current-continuation-marks</span><span class="p">)</span><span class="err"> </span><span class="o">&#39;</span><span class="p">(</span><span class="nv">fac</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">     </span><span class="mi">1</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="k">else </span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">with-continuation-mark</span>
</span><span class='line'>  <span class="err">      </span><span class="ss">&#39;fac</span><span class="err"> </span><span class="nv">n</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">*</span><span class="err"> </span><span class="nv">n</span><span class="err"> </span><span class="p">(</span><span class="nf">fac</span><span class="err"> </span><span class="p">(</span><span class="nf">sub1</span><span class="err"> </span><span class="nv">n</span><span class="p">))))</span><span class="err">]</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">fac</span><span class="err"> </span><span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you run this code, it prints out a list containing 1, 2, and 3—the
annotations around the call to (fac 0). This is similar to the
indentation program, except in that case we’d only be able to observe 1,
the last annotation.</p>

<p>Continuation marks like this (noting the name of the function and its
arguments) are the majority of stack traces. Other kinds of marks could
be used for other runtime inspection purposes.</p>

<p>Continuation marks behave specially when the annotation is in tail
position. (Recall that this is why parameterize is more efficient than
dynamic-wind.) Since in tail position there is not a /new/ continuation,
there is only space for one mark, so any new marks destroy old marks. A
tail-recursive version of factorial demonstrates the difference:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;fac-tr&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">fac-tr</span><span class="err"> </span><span class="nv">n</span><span class="err"> </span><span class="nv">acc</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="k">cond </span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">zero?</span><span class="err"> </span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">displayln</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">continuation-mark-set-&gt;list*</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">current-continuation-marks</span><span class="p">)</span><span class="err"> </span><span class="o">&#39;</span><span class="p">(</span><span class="nv">fac</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">     </span><span class="nv">acc</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="k">else </span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">with-continuation-mark</span>
</span><span class='line'>  <span class="err">      </span><span class="ss">&#39;fac</span><span class="err"> </span><span class="nv">n</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">fac-tr</span><span class="err"> </span><span class="p">(</span><span class="nf">sub1</span><span class="err"> </span><span class="nv">n</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">*</span><span class="err"> </span><span class="nv">n</span><span class="err"> </span><span class="nv">acc</span><span class="p">)))</span><span class="err">]</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">fac-tr</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This program only prints out 1, because the single continuation only has
space for one mark and each recursion annihilates it.</p>

<p>This property preserve the Safe-for-Space guarantees of Racket in the
presence of continuation marks.</p>

<p>I find continuation marks very useful when a program must observe the
path that led to it. For example, it can be a convenient way to detect
cycles in a search space. Sometimes I will write a &#8220;custom&#8221; stack trace
like this just for experimenting purposes to track the evaluation of the
program better.</p>

<p>Continuation marks are also the basis of the stateless
continuation-based Web server that comes with Racket, but that’s another
story.</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">racket/match</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Params\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;params&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;example&gt;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Marks\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;marks&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;example&gt;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;fac&gt;</span>
</span><span class='line'>  <span class="nv">&lt;fac-tr&gt;</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Done\n&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2012-07-30-cont-marks3.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuation Marks, part II: Parameters]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/07/25/cont-marks2/"/>
    <updated>2012-07-25T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/07/25/cont-marks2</id>
    <content type="html"><![CDATA[<p>Last week I started discussing continuation marks with a medium-sized
diversion into dynamic-wind as a way to delimited the effects of a
mutation to the body of a dynamic context so a program’s context can
affect its behavior indirectly.</p>

<p>The pattern we used in the last post is so common that a slightly
improved form of it is integrated into Racket as the concept of
parameters.</p>

<!-- more -->


<p>As a reminder, suppose we have this program:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;show-structure&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">show-structure</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-lambda</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="nv">e</span><span class="err"> </span><span class="o">...</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">with-indentation</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">for-each</span><span class="err"> </span><span class="nv">show-structure</span><span class="err"> </span><span class="nv">e</span><span class="p">)))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">?</span><span class="err"> </span><span class="nv">number?</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">displayln/indent</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span><span class="err">]</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And with this example</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;example1&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">show-structure</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="mi">2</span><span class="p">)</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">4</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err"> </span><span class="mi">6</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">7</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">8</span><span class="p">)</span><span class="err"> </span><span class="mi">9</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We want it to print as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  1               
</span><span class='line'>  2               
</span><span class='line'> 3                
</span><span class='line'>  4               
</span><span class='line'>  5               
</span><span class='line'> 6                
</span><span class='line'>  7               
</span><span class='line'>   8              
</span><span class='line'>  9</span></code></pre></td></tr></table></div></figure>


<p>Last week, we implemented this with</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;mutation-control-dw&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">with-indentation</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">originally</span><span class="err"> </span><span class="nv">indent-level</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nb">dynamic-wind </span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">originally</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">t</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="nv">originally</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">displayln/indent</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="nv">indent-level</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">display</span><span class="err"> </span><span class="s">&quot; &quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">displayln</span><span class="err"> </span><span class="nv">x</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code is practically equivalent to the Racket feature of a
parameter.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;mutation-control-params&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="p">(</span><span class="nf">make-parameter</span><span class="err"> </span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">with-indentation</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">originally</span><span class="err"> </span><span class="p">(</span><span class="nf">indent-level</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">parameterize</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">indent-level</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">originally</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">t</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">displayln/indent</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="p">(</span><span class="nf">indent-level</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">display</span><span class="err"> </span><span class="s">&quot; &quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">displayln</span><span class="err"> </span><span class="nv">x</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Parameters would like this. The make-parameter function takes the
initial value of a parameter and returns a function that returns the
&#8220;current&#8221; value of the parameter in whatever dynamic context it is
inside. The parameterize form wraps its context with a new value for the
the parameter. The wrapping takes place in a way safe with respect to
control, just like dynamic wind.</p>

<p>(Parameters also have special behavior with respect to threads: when you
start a thread, it inherits its parent context’s values for all
parameters, whereas the mutation behind dynamic-wind would completely
ignore the fact that a new thread was around&#8230; the mutations in the
finally part would happen even if the thread was still live when the
rest of the dynamic-wind body completed.)</p>

<p>(Parameters also provide the ability to capture a /parameterization/
which captures the current values of <em>all</em> parameters. Such a value can
later be installed to restore a captured context. The Racket Web server
uses this to restore parameters for Web programs after user
interactions.)</p>

<p>Parameters and dynamic-wind with mutation have slightly different
performance strengths and weaknesses. Namely, parameters are better for
space, whereas dynamic-wind is better for speed.</p>

<p>We’ll first show the space difference by increasing the indentation one
hundred times and then measuring how much memory was used to store the
changes (and the rests to the changes.)</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;memory-test&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">before</span><span class="err"> </span><span class="p">(</span><span class="nf">current-memory-use*</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="mi">100</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="k">cond </span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">zero?</span><span class="err"> </span><span class="nv">i</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">after</span><span class="err"> </span><span class="p">(</span><span class="nf">current-memory-use*</span><span class="p">))</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;~a MBs\n&quot;</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">real-&gt;decimal-string</span><span class="err"> </span><span class="p">(</span><span class="nf">/</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">after</span><span class="err"> </span><span class="nv">before</span><span class="p">)</span><span class="err"> </span><span class="mi">1024</span><span class="p">)))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="k">else </span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">with-indentation</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="p">(</span><span class="nf">sub1</span><span class="err"> </span><span class="nv">i</span><span class="p">))))</span><span class="err">]</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this program, parameters use about 2.30 MBs, whereas dynamic-wind
uses 6.61 MBs, on average. The reason is that parameterize is safe for
space—it does not leave residue on the stack when called in
tail-position, as it is here. In contrast, the dynamic-wind finally
handlers are all called to unwind the state change, as so they must be
recorded on the stack.</p>

<p>This reveals, and the threading issue, reveal that dynamic-wind doesn’t
/really/ make a scoped variable change, it actually makes a global
variable and undoes it properly. In contrast, parameterize really is a
local change and when the context that change is active for is gone,
such as when another parameterize overwrites and the call was in
tail-position, it’s no longer necessary to &#8220;remember&#8221; the intermediate
value.</p>

<p>Next, let’s see the difference in speed by checking the current
indentation level one hundred thousand times.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;speed-test&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">before</span><span class="err"> </span><span class="p">(</span><span class="nf">current-inexact-milliseconds</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">il</span><span class="err"> </span><span class="mi">0</span><span class="err">] [</span><span class="nv">i</span><span class="err"> </span><span class="mi">100000</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="k">cond </span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">zero?</span><span class="err"> </span><span class="nv">i</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">after</span><span class="err"> </span><span class="p">(</span><span class="nf">current-inexact-milliseconds</span><span class="p">))</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;~a in ~a ms\n&quot;</span>
</span><span class='line'>  <span class="err">             </span><span class="nv">il</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">real-&gt;decimal-string</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">after</span><span class="err"> </span><span class="nv">before</span><span class="p">)))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="k">else </span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">il</span><span class="err"> </span><span class="p">(</span><span class="nf">get-indent-level</span><span class="p">))</span><span class="err"> </span><span class="p">(</span><span class="nf">sub1</span><span class="err"> </span><span class="nv">i</span><span class="p">))</span><span class="err">]</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this program, dynamic-wind uses just 0.98 milliseconds, whereas
parameterize uses 16.35 milliseconds: a major difference in speed.
That’s because the mutation-based version just embeds a reference to a
global variable and can easily look it up, whereas the parameter-based
version has to consult the context.</p>

<p>In general, the parameter-based version is much better for typical use
and it’s easier to use. But, sometimes when you have tight loops that
would consult a parameter, it is important to cache the value. This is
most relevant for code that does input or output in a tight loop,
because those functions consult parameters for the default input/output
ports.</p>

<p>Continuation marks are a lower-level feature than parameters, but
understanding parameters is really useful for understanding marks. Next
time, we’ll finally see what marks are all about.</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">racket/match</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">current-memory-use*</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">collect-garbage</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">collect-garbage</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">current-memory-use</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Dynamic Wind\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;mutation-control-dw&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;show-structure&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;example1&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span><span class="err"> </span><span class="nv">&lt;memory-test&gt;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">get-indent-level</span><span class="p">)</span><span class="err"> </span><span class="nv">indent-level</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span><span class="err"> </span><span class="nv">&lt;speed-test&gt;</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">collect-garbage</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">collect-garbage</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Parameters\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;mutation-control-params&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;show-structure&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;example1&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span><span class="err"> </span><span class="nv">&lt;memory-test&gt;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">get-indent-level</span><span class="err"> </span><span class="nv">indent-level</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span><span class="err"> </span><span class="nv">&lt;speed-test&gt;</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Done\n&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2012-07-25-cont-marks2.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuation Marks, part I: Dynamic Wind]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/07/16/cont-marks/"/>
    <updated>2012-07-16T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/07/16/cont-marks</id>
    <content type="html"><![CDATA[<p>One of my favourite features of Racket is also one of its most unique
features: continuation marks.</p>

<p>Continuation marks allow you to annotate the dynamic context of a
running program and later observe it to respond differently to your
context.</p>

<p>In the next few posts, I’ll talk about continuation marks. But first, we
need to cover a different feature of Racket called dynamic-wind. (Most
people pronounce it like winding a winch, but I like to pronounce it
like a gust of wind and say &#8220;Dynaaamic WIND!&#8221; as if it was a Street
Fighter move.)</p>

<!-- more -->


<p>The classic example of continuation marks is a flow-sensitive variable,
like the current indentation level of debugging printfs.</p>

<p>For example, suppose you have this program:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;show-structure&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">show-structure</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-lambda</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="nv">e</span><span class="err"> </span><span class="o">...</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">with-indentation</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">for-each</span><span class="err"> </span><span class="nv">show-structure</span><span class="err"> </span><span class="nv">e</span><span class="p">)))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">?</span><span class="err"> </span><span class="nv">number?</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">displayln/indent</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span><span class="err">]</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And with this example</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;example1&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">show-structure</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="mi">2</span><span class="p">)</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">4</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err"> </span><span class="mi">6</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">7</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">8</span><span class="p">)</span><span class="err"> </span><span class="mi">9</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>You want it to print as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  1               
</span><span class='line'>  2               
</span><span class='line'> 3                
</span><span class='line'>  4               
</span><span class='line'>  5               
</span><span class='line'> 6                
</span><span class='line'>  7               
</span><span class='line'>   8              
</span><span class='line'>  9</span></code></pre></td></tr></table></div></figure>


<p>One obvious way is to use a global variable:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;mutation&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">with-indentation</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">originally</span><span class="err"> </span><span class="nv">indent-level</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">originally</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">t</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="nv">originally</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">displayln/indent</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="nv">indent-level</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">display</span><span class="err"> </span><span class="s">&quot; &quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">displayln</span><span class="err"> </span><span class="nv">x</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The key is to reset the indentation level after the thunk returns.</p>

<p>However, this is not a robust technique in the presence of control
effects. For example, if the code throws an exception than the reset
will not occur.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;example2&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">with-handlers</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">exn:misc:match?</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="ss">&#39;failed</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">show-structure</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="ss">&#39;error!</span><span class="p">)))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">show-structure</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="mi">3</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>So it prints as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 1                
</span><span class='line'>  2               
</span><span class='line'>   3              
</span><span class='line'>'failed           
</span><span class='line'>    1             
</span><span class='line'>     2            
</span><span class='line'>      3</span></code></pre></td></tr></table></div></figure>


<p>And every subsequent is off by three. The same problem occurs when
continuations are captured and invoked.</p>

<p>Racket provides a feature called dynamic-wind that helps you write this
mutation code safely with respect to control effects:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;mutation-control-safe&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">with-indentation</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">originally</span><span class="err"> </span><span class="nv">indent-level</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nb">dynamic-wind </span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">originally</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">t</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">indent-level</span><span class="err"> </span><span class="nv">originally</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">displayln/indent</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="nv">indent-level</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">display</span><span class="err"> </span><span class="s">&quot; &quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">displayln</span><span class="err"> </span><span class="nv">x</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>dynamic-wind takes three functions. The first gets called whenever the
body is &#8220;entered&#8221;, the second is the body and is just called once at the
start, and the third is called whenever the body is exited. In normal
situations, it is just like a sequence of three calls.</p>

<p>But, when control leaves the body somehow—like through an exception,
abort, or continuation invocation—then the third function is called to
&#8220;undo&#8221; whatever state changes were made when the body was entered.</p>

<p>Similarly, when control enters the body somehow—like when a continuation
is captured inside the body and is invoked after the body has already
returned—then the first function is called again to &#8220;redo&#8221; whatever
state changes the body relies on.</p>

<p>Try to predict the output of these programs:</p>

<p>Example 1: Just a sequence of printfs.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;dw-1&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="k">begin </span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;In\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Body\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Out\n&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Example 2: An equivalent sequence, but within dynamic-wind.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;dw-2&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="k">begin </span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nb">dynamic-wind </span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;In\n&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Body\n&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Out\n&quot;</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Example 3: An almost identical sequence, but now with an exception.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;dw-3&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">with-handlers</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="err">[</span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="no">#t</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nb">dynamic-wind </span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;In\n&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Body Pre\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">raise</span><span class="err"> </span><span class="ss">&#39;error</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Body Post\n&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Out\n&quot;</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Example 4: Now we replace the raise with continuation capture and invoke
the continuation.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;dw-4&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="k">begin </span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">the-k</span><span class="err"> </span><span class="no">#f</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">when</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nb">dynamic-wind </span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;In\n&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Body Pre\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">begin0</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">let/cc</span><span class="err"> </span><span class="nv">k</span>
</span><span class='line'>  <span class="err">                </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">the-k</span><span class="err"> </span><span class="nv">k</span><span class="p">))</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Body Post\n&quot;</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Out\n&quot;</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">the-k</span><span class="err"> </span><span class="no">#f</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bonus question: Why doesn’t this code infinite loop?</p>

<p>Example 5: Now rather than using mutation, we communicate the
continuation with an exception.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;dw-5&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="k">begin </span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">with-handlers</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">continuation?</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">k</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">k</span><span class="err"> </span><span class="mi">0</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nb">dynamic-wind </span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;In\n&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Body Pre\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">let/cc</span><span class="err"> </span><span class="nv">k</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">raise</span><span class="err"> </span><span class="nv">k</span><span class="p">))</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Body Post\n&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Out\n&quot;</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Example 6: Invoking the continuation repeatedly inside the exception
handler.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;dw-6&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="k">begin </span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">with-handlers</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">pair?</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">k*n</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Pong\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">((</span><span class="nf">car</span><span class="err"> </span><span class="nv">k*n</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="p">(</span><span class="nf">cdr</span><span class="err"> </span><span class="nv">k*n</span><span class="p">))))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nb">dynamic-wind </span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;In\n&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Body Pre\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="mi">0</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">unless</span><span class="err"> </span><span class="p">(</span><span class="nf">=</span><span class="err"> </span><span class="nv">i</span><span class="err"> </span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Ping ~a\n&quot;</span><span class="err"> </span><span class="nv">i</span><span class="p">)</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">loop</span>
</span><span class='line'>  <span class="err">               </span><span class="p">(</span><span class="nf">let/cc</span><span class="err"> </span><span class="nv">k</span>
</span><span class='line'>  <span class="err">                 </span><span class="p">(</span><span class="nf">raise</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">k</span><span class="err"> </span><span class="nv">i</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Body Post\n&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Out\n&quot;</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next week we’ll go on to how dynamic-wind relates to continuation marks.</p>

<p>And here is the expected output, by the way:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Example 1         
</span><span class='line'>In                
</span><span class='line'>Body              
</span><span class='line'>Out               
</span><span class='line'>                  
</span><span class='line'>Example 2         
</span><span class='line'>In                
</span><span class='line'>Body              
</span><span class='line'>Out               
</span><span class='line'>                  
</span><span class='line'>Example 3         
</span><span class='line'>In                
</span><span class='line'>Body Pre          
</span><span class='line'>Out               
</span><span class='line'>'error            
</span><span class='line'>                  
</span><span class='line'>Example 4         
</span><span class='line'>In                
</span><span class='line'>Body Pre          
</span><span class='line'>Body Post         
</span><span class='line'>Out               
</span><span class='line'>In                
</span><span class='line'>Body Post         
</span><span class='line'>Out               
</span><span class='line'>                  
</span><span class='line'>Example 5         
</span><span class='line'>In                
</span><span class='line'>Body Pre          
</span><span class='line'>Out               
</span><span class='line'>In                
</span><span class='line'>Body Post         
</span><span class='line'>Out               
</span><span class='line'>                  
</span><span class='line'>Example 6         
</span><span class='line'>In                
</span><span class='line'>Body Pre          
</span><span class='line'>Ping 0            
</span><span class='line'>Out               
</span><span class='line'>Pong              
</span><span class='line'>In                
</span><span class='line'>Ping 1            
</span><span class='line'>Out               
</span><span class='line'>Pong              
</span><span class='line'>In                
</span><span class='line'>Ping 2            
</span><span class='line'>Out               
</span><span class='line'>Pong              
</span><span class='line'>In                
</span><span class='line'>Body Post         
</span><span class='line'>Out</span></code></pre></td></tr></table></div></figure>


<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">racket/match</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Control un-Safe\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;mutation&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;show-structure&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;example1&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;example2&gt;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;Control Safe\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;mutation-control-safe&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;show-structure&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;example1&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;example2&gt;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;\nExample 1\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">&lt;dw-1&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;\nExample 2\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">&lt;dw-2&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;\nExample 3\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">&lt;dw-3&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;\nExample 4\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">&lt;dw-4&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;\nExample 5\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">&lt;dw-5&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;\nExample 6\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">&lt;dw-6&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2012-07-16-cont-marks.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Domain-Specific Operating Systems: Threads, System Calls, and Continuations]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/07/12/cont-syscall/"/>
    <updated>2012-07-12T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/07/12/cont-syscall</id>
    <content type="html"><![CDATA[<p>In the past few posts I’ve been writing about threading system that are
based on continuations in user-land. This post I’ll extend that system
to provide system calls that control access to sensitive resources, such
as files and the thread pool.</p>

<!-- more -->


<p>We’ll be working from the same example program as last week, except that
we’ll be changing printf from a &#8220;primitive&#8221; function to a system call.
Here’s the program:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;example&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">main</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">N</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">thread</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">N</span><span class="err"> </span><span class="mi">2</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;iter: ~a\n&quot;</span><span class="err"> </span><span class="nv">i</span><span class="p">))))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">thread</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">for/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">sum</span><span class="err"> </span><span class="mi">0</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="nv">N</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;adder: ~a\n&quot;</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">i</span><span class="err"> </span><span class="nv">sum</span><span class="p">))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">i</span><span class="err"> </span><span class="nv">sum</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Recall that this program has the following output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adder: 0          
</span><span class='line'>iter: 0           
</span><span class='line'>adder: 1          
</span><span class='line'>iter: 1           
</span><span class='line'>adder: 3          
</span><span class='line'>iter: 2           
</span><span class='line'>adder: 6          
</span><span class='line'>iter: 3           
</span><span class='line'>adder: 10         
</span><span class='line'>iter: 4           
</span><span class='line'>iter: 5           
</span><span class='line'>iter: 6</span></code></pre></td></tr></table></div></figure>


<p>In the original threading system, global mutable variables were used to
handle the state of the threading system:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;basic-threading-system&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">ts</span><span class="err"> </span><span class="nv">empty</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">yield</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">ts</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">list</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">void</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">next</span><span class="err"> </span><span class="nv">rest</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">let/cc</span><span class="err"> </span><span class="nv">k</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">ts</span><span class="err"> </span><span class="p">(</span><span class="nf">snoc</span><span class="err"> </span><span class="nv">rest</span><span class="err"> </span><span class="nv">k</span><span class="p">))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">next</span><span class="p">))</span><span class="err">]</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">thread</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">ts</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">                </span><span class="p">(</span><span class="nf">abort-current-continuation</span>
</span><span class='line'>  <span class="err">                 </span><span class="p">(</span><span class="nf">default-continuation-prompt-tag</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                 </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">                   </span><span class="p">(</span><span class="nf">t</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                   </span><span class="p">(</span><span class="nf">exit</span><span class="p">))))</span>
</span><span class='line'>  <span class="err">              </span><span class="nv">ts</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">exit</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">ts</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">list</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">void</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">next</span><span class="err"> </span><span class="nv">rest</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">ts</span><span class="err"> </span><span class="nv">rest</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">next</span><span class="p">)</span><span class="err">]</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="o">.</span> <span class="nv">args</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">begin0</span><span class="err"> </span><span class="p">(</span><span class="nf">apply</span><span class="err"> </span><span class="nv">racket:printf</span><span class="err"> </span><span class="nv">args</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">yield</span><span class="p">)))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">call-with-continuation-prompt</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">main</span><span class="p">)</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">exit</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the &#8220;logical&#8221; system calls—thread, exit, yield and
printf—all mutate the thread system’s state (ts). This makes the system
difficult to test and analyze.</p>

<p>Our goal is to tease out all this code into a single &#8220;kernel&#8221; that
actually /is/ the threading system and exists independently from the
state of the various threads. Here’s a sketch of the kernel:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;kernel&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">kernel</span><span class="err"> </span><span class="p">(</span><span class="nf">threads</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">boot</span><span class="err"> </span><span class="nv">main</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">initial</span><span class="err"> </span><span class="p">(</span><span class="nf">kernel</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="nv">main</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">ks</span><span class="err"> </span><span class="nv">initial</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">unless</span><span class="err"> </span><span class="p">(</span><span class="nf">empty?</span><span class="err"> </span><span class="p">(</span><span class="nf">kernel-threads</span><span class="err"> </span><span class="nv">ks</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="p">(</span><span class="nf">step-one-thread</span><span class="err"> </span><span class="nv">ks</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The state of the kernel will simply be the list of threads and all the
kernel really does is continuously call step-one-thread to advance the
state of the kernel until all the threads exit. All the work will, of
course, take place in step-one-thread:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;step-one-thread&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">step-one-thread</span><span class="err"> </span><span class="nv">ks</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-define</span><span class="err"> </span><span class="p">(</span><span class="nf">kernel</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">top-thread</span><span class="err"> </span><span class="nv">other-threads</span><span class="p">))</span><span class="err"> </span><span class="nv">ks</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">syscall</span><span class="err"> </span><span class="p">(</span><span class="nf">run-thread-until-syscall</span><span class="err"> </span><span class="nv">top-thread</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">execute-syscall</span><span class="err"> </span><span class="nv">syscall</span><span class="err"> </span><span class="p">(</span><span class="nf">kernel</span><span class="err"> </span><span class="nv">other-threads</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Its job is simply to select the first thread, run it until it reaches a
system call and then deal with the system call.</p>

<p>Let’s represent each system call as structure:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;syscalls&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">syscall</span><span class="err"> </span><span class="p">(</span><span class="nf">user-context</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">syscall:thread</span><span class="err"> </span><span class="nv">syscall</span><span class="err"> </span><span class="p">(</span><span class="nf">child-thunk</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">syscall:exit</span><span class="err"> </span><span class="nv">syscall</span><span class="err"> </span><span class="p">())</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">syscall:printf</span><span class="err"> </span><span class="nv">syscall</span><span class="err"> </span><span class="p">(</span><span class="nf">fmt</span><span class="err"> </span><span class="nv">arg</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The thing that all system calls have in common is that the context of
the user program is preserved, but other than that, each is distinct in
the data that it carries.</p>

<p>Once this is in place, we can pretty easily write the code to handle the
system calls and update the kernel’s state:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;execute-syscall&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">execute-syscall</span><span class="err"> </span><span class="nv">call</span><span class="err"> </span><span class="nv">kernel-state</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-define</span><span class="err"> </span><span class="p">(</span><span class="nf">kernel</span><span class="err"> </span><span class="nv">threads</span><span class="p">)</span><span class="err"> </span><span class="nv">kernel-state</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">call</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">syscall:thread</span><span class="err"> </span><span class="nv">user-ctxt</span><span class="err"> </span><span class="nv">child-t</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">kernel</span><span class="err"> </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">user-ctxt</span><span class="err"> </span><span class="nv">child-t</span><span class="err"> </span><span class="nv">threads</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">syscall:exit</span><span class="err"> </span><span class="nv">user-ctxt</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">kernel</span><span class="err"> </span><span class="nv">threads</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">syscall:printf</span><span class="err"> </span><span class="nv">user-ctxt</span><span class="err"> </span><span class="nv">fmt</span><span class="err"> </span><span class="nv">arg</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">racket:printf</span><span class="err"> </span><span class="nv">fmt</span><span class="err"> </span><span class="nv">arg</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">kernel</span><span class="err"> </span><span class="p">(</span><span class="nf">snoc</span><span class="err"> </span><span class="nv">threads</span><span class="err"> </span><span class="nv">user-ctxt</span><span class="p">))</span><span class="err">]</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>A new thread just needs to push both contexts (the parent and the child)
onto the thread queue. (We add them to the top of the queue to preserve
compatibility with the previous versions of this code.) When a thread
exits, the user context is thrown away. When a printf occurs, the string
is displayed and the user context is placed back on the queue, at the
end.</p>

<p>We only need to do two more things: implement run-thread-until-syscall
and implement the code that the user programs call to return system call
structures to the kernel. These are tightly intertwined.</p>

<p>The second is actually simpler, so we’ll do that first. The basic idea
is to capture the continuation going back to the kernel and throw it
back to the kernel as something like an exception (really, an abort,
which you can think of as an exception that can only be caught by
privileged code.)</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;syscall-throw:thread&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">thread</span><span class="err"> </span><span class="nv">child-t</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">call-with-composable-continuation</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">user-ctxt</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">abort-current-continuation</span>
</span><span class='line'>  <span class="err">      </span><span class="nv">kernel-prompt-tag</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">syscall:thread</span><span class="err"> </span><span class="nv">user-ctxt</span><span class="err"> </span><span class="nv">child-t</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">kernel-prompt-tag</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The other code will be very similar to this, so we’ll write a macro to
simplify it:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;syscall-throw&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-syntax-rule</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define-syscall-throw</span><span class="err"> </span><span class="nv">user-id</span><span class="err"> </span><span class="nv">syscall-id</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">user-id</span><span class="err"> </span><span class="o">.</span> <span class="nv">syscall-args</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">call-with-composable-continuation</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">user-ctxt</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">abort-current-continuation</span>
</span><span class='line'>  <span class="err">        </span><span class="nv">kernel-prompt-tag</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">apply</span><span class="err"> </span><span class="nv">syscall-id</span><span class="err"> </span><span class="nv">user-ctxt</span><span class="err"> </span><span class="nv">syscall-args</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">     </span><span class="nv">kernel-prompt-tag</span><span class="p">)))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-syscall-throw</span><span class="err"> </span><span class="nv">thread</span><span class="err"> </span><span class="nv">syscall:thread</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-syscall-throw</span><span class="err"> </span><span class="nv">exit</span><span class="err"> </span><span class="nv">syscall:exit</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-syscall-throw</span><span class="err"> </span><span class="nv">printf</span><span class="err"> </span><span class="nv">syscall:printf</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we know how the &#8220;thrower&#8221; works, we can easily implement the
&#8220;catcher&#8221;:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;syscall-catch&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">kernel-prompt-tag</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">make-continuation-prompt-tag</span><span class="err"> </span><span class="ss">&#39;kernel</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">run-thread-until-syscall</span><span class="err"> </span><span class="nv">thread-ctxt</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">call-with-continuation-prompt</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">thread-ctxt</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">exit</span><span class="p">))</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">kernel-prompt-tag</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">values</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code says that you just invoke the thread context like a function,
but you wrap it in a new prompt. When the code inside aborts with a
value, then it is returned to the caller of run-thread-until-syscall
(that’s what the values means). We always put in call to exit, in case
the code just ends.</p>

<p>I love this code because it so elegantly separates all the different
features of an operating system: capturing system calls and program
contexts, evaluating the impact on the kernel state for the call, and
running the OS itself. From this foundation you could add other system
calls and scheduling behavior. I call this a &#8220;domain-specific operating
system.&#8221;</p>

<p>One of my pet projects is to build video games in Racket. In that
project, I’m using this idea to implement each agent in the game world
(the enemies, the player, etc) as processes with custom system calls to
interact with each other and the audio/video resources. The kernel there
maintains two separate lists of threads: ones that need to do more work
on this frame and ones that are done until the next frame needs to be
rendered, with a system call to indicate to the OS that all work for a
frame is done. It’s really quite beautiful. Maybe I’ll write more about
it in the future.</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">racket/list</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/match</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">prefix-in</span><span class="err"> </span><span class="nv">racket:</span><span class="err"> </span><span class="nv">racket/base</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">snoc</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">append</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="nv">x</span><span class="p">)))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;kernel&gt;</span>
</span><span class='line'>  <span class="nv">&lt;step-one-thread&gt;</span>
</span><span class='line'>  <span class="nv">&lt;syscalls&gt;</span>
</span><span class='line'>  <span class="nv">&lt;execute-syscall&gt;</span>
</span><span class='line'>  <span class="nv">&lt;syscall-throw&gt;</span>
</span><span class='line'>  <span class="nv">&lt;syscall-catch&gt;</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;example&gt;</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">boot</span><span class="err"> </span><span class="nv">main</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2012-07-12-cont-syscall.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preemptive Threads with Continuations]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/07/02/cont-preempt/"/>
    <updated>2012-07-02T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/07/02/cont-preempt</id>
    <content type="html"><![CDATA[<p>Last week, we covered cooperative threading with continuations. This
week we’ll change the infrastructure to mimic preemption.</p>

<!-- more -->


<p>Before we start, make sure you’ve read last week’s post.</p>

<p>We’ll be working from almost the same example program:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;example&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">main</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">N</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">thread</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">N</span><span class="err"> </span><span class="mi">2</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;iter: ~a\n&quot;</span><span class="err"> </span><span class="nv">i</span><span class="p">))))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">thread</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">for/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">sum</span><span class="err"> </span><span class="mi">0</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="nv">N</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;adder: ~a\n&quot;</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">i</span><span class="err"> </span><span class="nv">sum</span><span class="p">))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">i</span><span class="err"> </span><span class="nv">sum</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only difference is that I’ve removed the calls to yield after the
calls to printf.</p>

<p>Recall that this program has the following output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adder: 0          
</span><span class='line'>iter: 0           
</span><span class='line'>adder: 1          
</span><span class='line'>iter: 1           
</span><span class='line'>adder: 3          
</span><span class='line'>iter: 2           
</span><span class='line'>adder: 6          
</span><span class='line'>iter: 3           
</span><span class='line'>adder: 10         
</span><span class='line'>iter: 4           
</span><span class='line'>iter: 5           
</span><span class='line'>iter: 6</span></code></pre></td></tr></table></div></figure>


<p>We’ll also be using the same basic threading system:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;threading-system&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">ts</span><span class="err"> </span><span class="nv">empty</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">yield</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">ts</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">list</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">void</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">next</span><span class="err"> </span><span class="nv">rest</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">let/cc</span><span class="err"> </span><span class="nv">k</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">ts</span><span class="err"> </span><span class="p">(</span><span class="nf">snoc</span><span class="err"> </span><span class="nv">rest</span><span class="err"> </span><span class="nv">k</span><span class="p">))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">next</span><span class="p">))</span><span class="err">]</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">thread</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">ts</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">                </span><span class="p">(</span><span class="nf">abort-current-continuation</span>
</span><span class='line'>  <span class="err">                 </span><span class="p">(</span><span class="nf">default-continuation-prompt-tag</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                 </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">                   </span><span class="p">(</span><span class="nf">t</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                   </span><span class="p">(</span><span class="nf">exit</span><span class="p">))))</span>
</span><span class='line'>  <span class="err">              </span><span class="nv">ts</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">exit</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">ts</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">list</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">void</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">next</span><span class="err"> </span><span class="nv">rest</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">ts</span><span class="err"> </span><span class="nv">rest</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">next</span><span class="p">)</span><span class="err">]</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">call-with-continuation-prompt</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">main</span><span class="p">)</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">exit</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, this system is about modeling concurrency through threading, so
there is no actual real concurrency in the system. In contrast, in a
real operating system there is true concurrency because the computer
interacts with concurrently-running pieces of hardware&#8230; such as disk
devices, the network card, or an alarm device. When this concurrent
devices message the kernel, through interrupts, it can take control from
the user programs and potentially choose a different user program to
re-use, without the permission of the user process.</p>

<p>This option is not available at the user level, particularly if you do
not assume the pre-existence of a lower-level threading system. Since
I’m a good academic, whenever you face a problem that seems unsolvable,
the one sure path is to redefine success. Thus, we’ll focus on the
&#8220;without permission&#8221; part of preemptive concurrency—removing the need of
threaded programs from calling yield, but having it called for them,
without their permission, periodically.</p>

<p>The simplest way to realize this is to choose a set of &#8220;primitive&#8221;
functions provided by the OS and have them call yield on behalf of the
process. For example, printf is a naturally choice.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;primitive-printf&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="o">.</span> <span class="nv">args</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">begin0</span><span class="err"> </span><span class="p">(</span><span class="nf">apply</span><span class="err"> </span><span class="nv">racket:printf</span><span class="err"> </span><span class="nv">args</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">yield</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we take this approach, we need to ensure that the process has no
other way of getting to these primitives. This is not a very hard thing
to do if we’re implementing a language tower, like Racket, but is more
difficult if we are simply writing a library atop Racket.</p>

<p>This approach has a fundamental trade-off with regards to fairness: the
fewer primitive functions, the more likely it is that the other
processes will starve, as the current thread may not ever call a
primitive, such as printf. A typical solution to this is to call yield
on every function return, including tail-calls (i.e. loops), because
every program must do this very often.</p>

<p>However, if primitive functions always call yield and there are many
such primitive functions, then we’re likely to have too many context
switches. In that case, it’s wise to use some sort of &#8220;fuel&#8221; counter
that indicates how many function calls are allowed before switching. We
can realize this in the printf code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;fuel-printf&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">INITIAL-FUEL</span><span class="err"> </span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">FUEL</span><span class="err"> </span><span class="nv">INITIAL-FUEL</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="o">.</span> <span class="nv">args</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">begin0</span><span class="err"> </span><span class="p">(</span><span class="nf">apply</span><span class="err"> </span><span class="nv">racket:printf</span><span class="err"> </span><span class="nv">args</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">FUEL</span><span class="err"> </span><span class="p">(</span><span class="nf">sub1</span><span class="err"> </span><span class="nv">FUEL</span><span class="p">))</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">when</span><span class="err"> </span><span class="p">(</span><span class="nf">zero?</span><span class="err"> </span><span class="nv">FUEL</span><span class="p">)</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">FUEL</span><span class="err"> </span><span class="nv">INITIAL-FUEL</span><span class="p">)</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">yield</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example I used a fuel of two, which renders the following
output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adder: 0          
</span><span class='line'>adder: 1          
</span><span class='line'>iter: 0           
</span><span class='line'>iter: 1           
</span><span class='line'>adder: 3          
</span><span class='line'>adder: 6          
</span><span class='line'>iter: 2           
</span><span class='line'>iter: 3           
</span><span class='line'>adder: 10         
</span><span class='line'>iter: 4           
</span><span class='line'>iter: 5           
</span><span class='line'>iter: 6</span></code></pre></td></tr></table></div></figure>


<p>A nice side-effect of a fuel system like this is that you can give
different processes different amounts of fuel to represent priorities.</p>

<p>This is actually how the Racket threading system is implemented,
although all the continuation capturing, context switching, primitive
functions, and fuel manipulation is done in the C virtual machine. You
can see the macros that manage fuel around line 1581 of include/scheme.h
in the Racket VM source.</p>

<p>Next week, we’ll look at system calls in this infrastructure.</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">racket/list</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/match</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">prefix-in</span><span class="err"> </span><span class="nv">racket:</span><span class="err"> </span><span class="nv">racket/base</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">snoc</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">append</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="nv">x</span><span class="p">)))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;fuel-printf&gt;</span>
</span><span class='line'>  <span class="nv">&lt;example&gt;</span>
</span><span class='line'>  <span class="nv">&lt;threading-system&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2012-07-02-cont-preempt.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cooperative Threads with Continuations]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/06/26/cont-threads/"/>
    <updated>2012-06-26T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/06/26/cont-threads</id>
    <content type="html"><![CDATA[<p>After the last post about continuations, I wanted to show one of the
classic uses of them: implementing threads in user-space.</p>

<!-- more -->


<p>Let’s look at an example program first:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;example&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">main</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">N</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">thread</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">N</span><span class="err"> </span><span class="mi">2</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;iter: ~a\n&quot;</span><span class="err"> </span><span class="nv">i</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">yield</span><span class="p">))))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">thread</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">for/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">sum</span><span class="err"> </span><span class="mi">0</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="nv">N</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;adder: ~a\n&quot;</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">i</span><span class="err"> </span><span class="nv">sum</span><span class="p">))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">yield</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">i</span><span class="err"> </span><span class="nv">sum</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this thread system, there are a few things to notice:</p>

<ul>
<li><p>You define a main function that starts off the computation.</p></li>
<li><p>You create threads by calling thread with a thunk.</p></li>
<li><p>Threads are cooperative and must yield to one another.</p></li>
</ul>


<p>Since we are yielding in a deterministic way, this program has a
deterministic output as well:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adder: 0          
</span><span class='line'>iter: 0           
</span><span class='line'>adder: 1          
</span><span class='line'>iter: 1           
</span><span class='line'>adder: 3          
</span><span class='line'>iter: 2           
</span><span class='line'>adder: 6          
</span><span class='line'>iter: 3           
</span><span class='line'>adder: 10         
</span><span class='line'>iter: 4           
</span><span class='line'>iter: 5           
</span><span class='line'>iter: 6</span></code></pre></td></tr></table></div></figure>


<p>The threading system will be very simple: it keeps a list of threads
(represented as thunks) that can run and yield captures the context of
the currently running thread, adds it to the end of that list, and then
executes the top of the list.</p>

<p>This is straight-forward to express in code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;thread-basics&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">ts</span><span class="err"> </span><span class="nv">empty</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">yield</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">ts</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">list</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">void</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">next</span><span class="err"> </span><span class="nv">rest</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">let/cc</span><span class="err"> </span><span class="nv">k</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">ts</span><span class="err"> </span><span class="p">(</span><span class="nf">snoc</span><span class="err"> </span><span class="nv">rest</span><span class="err"> </span><span class="nv">k</span><span class="p">))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">next</span><span class="p">))</span><span class="err">]</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The final four lines are the essence of a context switch:</p>

<ol>
<li><p>Choose the next context</p></li>
<li><p>Capture the current context (its stack, registers, etc.)</p></li>
<li><p>Save the current context in the thread queue</p></li>
<li><p>Re-establish the next context as the current context</p></li>
</ol>


<p>Every threading system must do each of these four things, although
perhaps in a different order. In Racket, we can express each one in a
single line.</p>

<p>The only remaining thing is invoking the main function and implementing
thread.</p>

<p>You might think that this is very obvious and want to write:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;broken-thread&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">thread</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">ts</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">t</span><span class="err"> </span><span class="nv">ts</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">main</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, this is not correct. The problem is that it fails to ever
call yield and actually invoke the threads. The program would have no
output.</p>

<p>Another idea is to automatically yield every time a thread is created:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;yield-thread&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">thread</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">ts</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">t</span><span class="err"> </span><span class="nv">ts</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">yield</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">main</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem with this is that when the main program is finished creating
the two threads, it has nothing else to do, so it just ends without
calling yield again. We could add a large number of calls to yield to
the end of main, but that’s a little absurd, obviously brittle, and
immoral.</p>

<p>What we really need is something like yield but that doesn’t add the
current context back on the queue, something that does a context switch
but exits the current context. For convenience, we shouldn’t require the
programmer to ever call this (although they may if they want), so we’ll
implicitly add it to the end of every thread, including the main
program.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;exit-thread&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">thread</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">ts</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">t</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">exit</span><span class="p">))</span><span class="err"> </span><span class="nv">ts</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">exit</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">ts</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">list</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">void</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">next</span><span class="err"> </span><span class="nv">rest</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">ts</span><span class="err"> </span><span class="nv">rest</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">next</span><span class="p">)</span><span class="err">]</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">main</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">exit</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This version seems like it should be correct, but it actually has a very
strange output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adder: 0          
</span><span class='line'>iter: 0           
</span><span class='line'>adder: 1          
</span><span class='line'>iter: 1           
</span><span class='line'>adder: 3          
</span><span class='line'>iter: 2           
</span><span class='line'>adder: 6          
</span><span class='line'>iter: 3           
</span><span class='line'>adder: 10         
</span><span class='line'>iter: 4           
</span><span class='line'>iter: 5           
</span><span class='line'>iter: 6           
</span><span class='line'>adder: 1          
</span><span class='line'>adder: 3          
</span><span class='line'>adder: 6          
</span><span class='line'>adder: 10</span></code></pre></td></tr></table></div></figure>


<p>For some reason, after the adder ends, and the iterator ends (it has two
more steps), the adder starts again, but now from one step into its
computation. How could this be?</p>

<p>Here’s what happens:</p>

<ul>
<li><p>The main thread creates the iterator, then the adder, then exits,
invoking the adder (because we add new threads to the front.)</p></li>
<li><p>The adder does its first round and then invokes the iterator in its
call to yield.</p></li>
<li><p>At this point, the continuation of the iterator is the code after the
first round of the adder. In most cases, the continuation of the call to
yield is only available in the thread queue, but this case is different,
because the initial thread thunk is not a continuation that aborts its
invoking context.</p></li>
<li><p>Now, later on, when the iterator loop returns (by returning void
inside the first case of the exit), it returns back to its initial
continuation, or the second round of the adder.</p></li>
</ul>


<p>In order to fix this, we could make the final call abort the current
context, so that code wasn’t run, but it would be better to ensure that
it wasn’t there in the first place.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;best-thread&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">thread</span><span class="err"> </span><span class="nv">t</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">ts</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">                </span><span class="p">(</span><span class="nf">abort-current-continuation</span>
</span><span class='line'>  <span class="err">                 </span><span class="p">(</span><span class="nf">default-continuation-prompt-tag</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                 </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">                   </span><span class="p">(</span><span class="nf">t</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                   </span><span class="p">(</span><span class="nf">exit</span><span class="p">))))</span>
</span><span class='line'>  <span class="err">              </span><span class="nv">ts</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">exit</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">ts</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">list</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">void</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">next</span><span class="err"> </span><span class="nv">rest</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">ts</span><span class="err"> </span><span class="nv">rest</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">next</span><span class="p">)</span><span class="err">]</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">call-with-continuation-prompt</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">main</span><span class="p">)</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">exit</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function abort-current-continuation destroys the current context and
goes back to the beginning of the program. This is like calling the
normal OS exit() in a program: the program ends and returns you to the
command prompt. However, abort-current-continuation is a generalization
of that idea. It is more general in two ways:</p>

<ol>
<li><p>Rather than there being only one &#8220;command prompt&#8221; that you can return
to, there are many that can be dynamically created, so you need to name
the one you return to. Our code returns to the default prompt.</p></li>
<li><p>Rather than only being able to return a number, this function has you
return a function that will be invoked to discover the value that should
be returned. This allows you to do something like trampolining, where
you destroy the current context and start up the computation again with
a &#8220;fresh&#8221; context (or stack.)</p></li>
</ol>


<p>The other small tweak is that we have to explicitly wrap the call to
main in the continuation prompt that we’ll abort to. I think of this
little piece as the &#8220;kernel&#8221; that is the start and end of the life of
the program.</p>

<p>And there you have it! A small cooperative threading system implemented
in user-space using continuations!</p>

<p>Next time, we’ll take this as a base and remove the cooperative aspect
then elaborate the kernel to add system calls! Aren’t you excited?</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">racket/list</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/match</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">snoc</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">append</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="nv">x</span><span class="p">)))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;thread-basics&gt;</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;example&gt;</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;best-thread&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2012-06-26-cont-threads.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delimited Pipes]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/06/18/pipe/"/>
    <updated>2012-06-18T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/06/18/pipe</id>
    <content type="html"><![CDATA[<p>I love continuations. We couldn’t do much of anything on a computer
without them. But, I love first-class access to continuations (i.e.
call/cc) even more.</p>

<p>The standard reason is that call/cc allows you to express things that
are not possible at the user-level without it. For example, generators,
implicit back-tracking search, threads, etc.</p>

<p>However, many of these use-cases for call/cc use mutation in an
essential way and have led some to criticize useful uses of call/cc to
be necessarily tied to mutation.</p>

<p>In this post, I’ll show how call/cc saves use from mutation and produces
something pretty elegant.</p>

<!-- more -->


<p>Suppose you are parsing a parenthetical language (for some crazy reason)
and you need to associate parens and then deal with the list structure
later.</p>

<p>The obvious way to do that is:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;obvious&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">parse</span><span class="err"> </span><span class="nv">ip</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">inside?</span><span class="err"> </span><span class="no">#f</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="p">(</span><span class="nf">read-char</span><span class="err"> </span><span class="nv">ip</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      [</span><span class="sc">#\(</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="no">#t</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">inside?</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="sc">#\)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="nv">inside?</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">empty</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;parse</span><span class="err"> </span><span class="s">&quot;Mismatching right paren&quot;</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">?</span><span class="err"> </span><span class="nv">eof-object?</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="nv">inside?</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;parse</span><span class="err"> </span><span class="s">&quot;Mismatching left paren&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">empty</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="nv">this</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">inside?</span><span class="p">))</span><span class="err">]</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here’s a little test suite:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;tests&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">test</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">=&gt;</span><span class="err"> </span><span class="nv">empty</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="s">&quot;a&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">=&gt;</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="sc">#\a</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="s">&quot;(&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">=error&gt;</span><span class="err"> </span><span class="o">#</span><span class="nv">rx</span><span class="s">&quot;left paren&quot;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="s">&quot;)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">=error&gt;</span><span class="err"> </span><span class="o">#</span><span class="nv">rx</span><span class="s">&quot;right paren&quot;</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="s">&quot;b(a)c&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">=&gt;</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="sc">#\b</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="sc">#\a</span><span class="p">)</span><span class="err"> </span><span class="sc">#\c</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="s">&quot;(a((a)a))b(a)c&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">=&gt;</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="sc">#\a</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="sc">#\a</span><span class="p">)</span><span class="err"> </span><span class="sc">#\a</span><span class="p">))</span><span class="err"> </span><span class="sc">#\b</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="sc">#\a</span><span class="p">)</span><span class="err"> </span><span class="sc">#\c</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem with this solution is that it uses side-effects! Each call
to read-char is mutation of the input-port data-structure’s
next-position-to-read field. It would be more elegant to use a stream to
represent the input.</p>

<p>Unfortunately, the obvious stream-based solution is broken:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;obvious-list&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">parse</span><span class="err"> </span><span class="nv">i</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="nv">i</span><span class="err">] [</span><span class="nv">inside?</span><span class="err"> </span><span class="no">#f</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">i</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="sc">#\(</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">more</span><span class="err"> </span><span class="no">#t</span><span class="p">)</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">more</span><span class="err"> </span><span class="nv">inside?</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="sc">#\)</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="nv">inside?</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">empty</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;parse</span><span class="err"> </span><span class="s">&quot;Mismatching right paren&quot;</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="nv">inside?</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;parse</span><span class="err"> </span><span class="s">&quot;Mismatching left paren&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">empty</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">more</span><span class="err"> </span><span class="nv">inside?</span><span class="p">))</span><span class="err">]</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem is that after the matching right-paren is found for a given
left-paren, you must &#8220;skip&#8221; the interleaving characters on the
recursion. In the code, the problem is the first case of the match,
where more is used in two recursive calls.</p>

<p>The correct version is written monadically:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;monad-list&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">parse</span><span class="err"> </span><span class="nv">i</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="nv">i</span><span class="err">] [</span><span class="nv">inside?</span><span class="err"> </span><span class="no">#f</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">i</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="sc">#\(</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">define-values</span><span class="err"> </span><span class="p">(</span><span class="nf">this</span><span class="err"> </span><span class="nv">more-p</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">more</span><span class="err"> </span><span class="no">#t</span><span class="p">))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">define-values</span><span class="err"> </span><span class="p">(</span><span class="nf">that</span><span class="err"> </span><span class="nv">more-pp</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">more-p</span><span class="err"> </span><span class="nv">inside?</span><span class="p">))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">values</span><span class="err"> </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="nv">that</span><span class="p">)</span>
</span><span class='line'>  <span class="err">               </span><span class="nv">more-pp</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="sc">#\)</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="nv">inside?</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">values</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;parse</span><span class="err"> </span><span class="s">&quot;Mismatching right paren&quot;</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="nv">inside?</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;parse</span><span class="err"> </span><span class="s">&quot;Mismatching left paren&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">values</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">empty</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">define-values</span><span class="err"> </span><span class="p">(</span><span class="nf">that</span><span class="err"> </span><span class="nv">more-p</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">more</span><span class="err"> </span><span class="nv">inside?</span><span class="p">))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">values</span><span class="err"> </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="nv">that</span><span class="p">)</span><span class="err"> </span><span class="nv">more-p</span><span class="p">)</span><span class="err">]</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, monadic programming is effectful programming, just with
more pain, because you have to do the plumbing yourself or contaminate
the rest of your program with the effectful type sewage.</p>

<p>If we look at the monadic program, though, we can see that the only
useful threading is between the first and second cases of the match. The
stuff after the right-paren gets passed out to the left-paren context.
Why not just implement that &#8220;piping&#8221; to the calling context directly as
a feature?</p>

<p>The final code will look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;pipe-list&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">parse</span><span class="err"> </span><span class="nv">i</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="nv">i</span><span class="err">] [</span><span class="nv">inside?</span><span class="err"> </span><span class="no">#f</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">i</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="sc">#\(</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">define-values</span><span class="err"> </span><span class="p">(</span><span class="nf">more-p</span><span class="err"> </span><span class="nv">pipe-in</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">pipe</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">more</span><span class="err"> </span><span class="no">#t</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="p">(</span><span class="nf">pipe-in</span><span class="err"> </span><span class="nv">empty</span><span class="p">)</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">more-p</span><span class="err"> </span><span class="nv">inside?</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="sc">#\)</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="nv">inside?</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">pipe-out</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;parse</span><span class="err"> </span><span class="s">&quot;Mismatching right paren&quot;</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="nv">inside?</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;parse</span><span class="err"> </span><span class="s">&quot;Mismatching left paren&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">empty</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">more</span><span class="err"> </span><span class="nv">inside?</span><span class="p">))</span><span class="err">]</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The crucial point is that when we recur, looking for the right-paren, we
use the pipe form, which allows the body to communicate with the
context. The body then calls pipe-out, which returns a value to the
context. The context receives the value (more-p) as well as a function
to call when it should communicate back (pipe-in). The context then
sends back the empty list, which the body will return at the end of the
list it constructed, the call to pipe-in returns with the final answer
from the body&#8230; the inner list.</p>

<p>It is fairly simple to imagine implementing such a piping-system with
concurrency: every call to pipe creates a new thread with a line of
communication back to the calling context, which waits for
communication. This is easy to realize in code, but there are some gross
details, especially with getting exceptions to throw in the parent:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;pipes-as-threads&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-syntax-rule</span><span class="err"> </span><span class="p">(</span><span class="nf">pipe</span><span class="err"> </span><span class="nv">e</span><span class="err"> </span><span class="o">...</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">pipe*</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="nv">e</span><span class="err"> </span><span class="o">...</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">pipe-channel</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">make-parameter</span><span class="err"> </span><span class="no">#f</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">pipe*</span><span class="err"> </span><span class="nv">f</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="p">(</span><span class="nf">make-channel</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">thread</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">parameterize</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">pipe-channel</span><span class="err"> </span><span class="nv">c</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">channel-put</span><span class="err"> </span><span class="nv">c</span>
</span><span class='line'>  <span class="err">                    </span><span class="p">(</span><span class="nf">with-handlers</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">exn?</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="nv">x</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                      </span><span class="p">(</span><span class="nf">f</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">intermediate</span><span class="err"> </span><span class="p">(</span><span class="nf">channel-get*</span><span class="err"> </span><span class="nv">c</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">values</span><span class="err"> </span><span class="nv">intermediate</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">response</span><span class="p">)</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">channel-put</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">response</span><span class="p">)</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">channel-get*</span><span class="err"> </span><span class="nv">c</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">channel-get*</span><span class="err"> </span><span class="nv">c</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">v</span><span class="err"> </span><span class="p">(</span><span class="nf">channel-get</span><span class="err"> </span><span class="nv">c</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">exn?</span><span class="err"> </span><span class="nv">v</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">raise</span><span class="err"> </span><span class="nv">v</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="nv">v</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">pipe-out</span><span class="err"> </span><span class="nv">v</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="p">(</span><span class="nf">pipe-channel</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">channel-put</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">v</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">channel-get</span><span class="err"> </span><span class="nv">c</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, this has many hidden effects, much more than the original
port-based code! So it’s not exactly an advisable way of solving the
problem.</p>

<p>Luckily we can get the same feature in a tiny amount of
continuation-based code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;pipes-as-conts&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">pipe-tag</span><span class="err"> </span><span class="p">(</span><span class="nf">make-continuation-prompt-tag</span><span class="err"> </span><span class="ss">&#39;pipe</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">pipe*</span><span class="err"> </span><span class="nv">f</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let/ec</span><span class="err"> </span><span class="nv">esc</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">call-with-continuation-prompt</span><span class="err"> </span><span class="nv">f</span><span class="err"> </span><span class="nv">pipe-tag</span><span class="err"> </span><span class="nv">esc</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;pipe</span><span class="err"> </span><span class="s">&quot;did not pipe-out&quot;</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-syntax-rule</span><span class="err"> </span><span class="p">(</span><span class="nf">pipe</span><span class="err"> </span><span class="nv">e</span><span class="err"> </span><span class="o">...</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">pipe*</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="nv">e</span><span class="err"> </span><span class="o">...</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">pipe-out</span><span class="err"> </span><span class="nv">v</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">call-with-composable-continuation</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">come-back</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">abort-current-continuation</span><span class="err"> </span><span class="nv">pipe-tag</span><span class="err"> </span><span class="nv">v</span><span class="err"> </span><span class="nv">come-back</span><span class="p">))</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">pipe-tag</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The basic idea is to turn the call to pipe into a new continuation
prompt, then pipe-out captures the continuation back to that point, and
then aborts back to the prompt, delivering an intermediate value and
then the continuation which resumes the computation from outside the
calling context. This system is particularly beautiful because it allows
the inside to be resumed multiple times.</p>

<p>In my opinion this is the perfect example of the power of first-class
continuations: we are able to seamlessly implement a powerful new
feature that no other language supports in 12 simple lines. And, there’s
no mutation anywhere!</p>

<p>The only objection to first-class continuations I feel is reasonable is
that it can be difficult to reason about contexts. If you’re not sure
that you agree with that statement, try to figure what this returns,
without evaluating it:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;puzzle&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">i</span><span class="err"> </span><span class="mi">5</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="k">cond </span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">&lt;=</span><span class="err"> </span><span class="nv">i</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="nv">empty</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="k">else </span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">define-values</span><span class="err"> </span><span class="p">(</span><span class="nf">j</span><span class="err"> </span><span class="nv">pipe-in</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">pipe</span><span class="err"> </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">i</span><span class="err"> </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="p">(</span><span class="nf">pipe-out</span><span class="err"> </span><span class="p">(</span><span class="nf">sub1</span><span class="err"> </span><span class="nv">i</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">list*</span><span class="err"> </span><span class="nv">j</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">append</span><span class="err"> </span><span class="p">(</span><span class="nf">pipe-in</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">j</span><span class="err"> </span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="err">                    </span><span class="p">(</span><span class="nf">pipe-in</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">j</span><span class="err"> </span><span class="mi">2</span><span class="p">))))</span><span class="err">]</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">tests/eli-tester</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/list</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/match</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">test</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;obvious&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="nv">s</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">parse</span><span class="err"> </span><span class="p">(</span><span class="nf">open-input-string</span><span class="err"> </span><span class="nv">s</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;tests&gt;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;obvious-list&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="nv">s</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">parse</span><span class="err"> </span><span class="p">(</span><span class="nf">string-&gt;list</span><span class="err"> </span><span class="nv">s</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;tests&gt;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;monad-list&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="nv">s</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">define-values</span><span class="err"> </span><span class="p">(</span><span class="nf">this</span><span class="err"> </span><span class="nv">more</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">parse</span><span class="err"> </span><span class="p">(</span><span class="nf">string-&gt;list</span><span class="err"> </span><span class="nv">s</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">     </span><span class="nv">this</span><span class="p">)</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;tests&gt;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;pipes-as-threads&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;pipe-list&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="nv">s</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">parse</span><span class="err"> </span><span class="p">(</span><span class="nf">string-&gt;list</span><span class="err"> </span><span class="nv">s</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;tests&gt;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="p">()</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;pipes-as-conts&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;pipe-list&gt;</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">parse/string</span><span class="err"> </span><span class="nv">s</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">parse</span><span class="err"> </span><span class="p">(</span><span class="nf">string-&gt;list</span><span class="err"> </span><span class="nv">s</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">&lt;tests&gt;</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;The answer to the puzzle is... ~a\n&quot;</span>
</span><span class='line'>  <span class="err">           </span><span class="nv">&lt;puzzle&gt;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2012-06-18-pipe.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LaTeX and Word Counts]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/06/05/word-count/"/>
    <updated>2012-06-05T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/06/05/word-count</id>
    <content type="html"><![CDATA[<p>A few years ago, a proposal came to a committee I was on to limit the
documents we evaluated based on their word count, rather than their page
length.</p>

<p>The rationale was that so-called &#8220;graphics&#8221; research would include many
pictures which would increase the page length, but not necessarily the
word count.</p>

<p>I was opposed to this proposal on technical grounds.</p>

<!-- more -->


<p>My rationale was that it is easy to manually count pages, but difficult
(and not worth it) to count words AND manual counting is the only
reliable method to discover the number of words.</p>

<p>This proposal was made by someone who uses Word (ugh) to prepare their
documents, so it was easy, in their mind, to find the word count of a
document and report it when the document was turned in.</p>

<p>I, however, like all True Computer Scientists use LaTeX (and Scribble)
to prepare my documents, via rendering to PostScript or PDF.</p>

<h1>Word Counts from PostScript</h1>

<p>You may think that you could just count the words directly from the
PostScript. This is not the case, however.</p>

<p>PostScript is a very low-level programming language with a basic set of
vector-graphic-like primitives for moving the pen and drawing shapes,
letters, etc. A sentence like &#8220;The quick brown fox jumped over the lazy
dog.&#8221; could get warped into many drawing commands, particularly when
effects like sentence spacing, rivers, justifications are taking into
consideration during the compilation process. Compilers to PostScript,
like LaTeX, in fact do this, making the PostScript practically un-usable
for analysis.</p>

<p>PDF improves on PostScript in numerous ways for analysis purposes (such
as computing where a new page will occur in the code) but it is not
significant enough discover individual words in the presence of advanced
typography and styling.</p>

<p>But, is it really surprising that it is hard to learn higher-level
things about a program from its compiled form? What if we looked
directly at the LaTeX?</p>

<h1>Word Counts from LaTeX</h1>

<p>Unfortunately, LaTeX is a Lambda-complete language due to its advanced
macro system. By writing macros, you can add new output (words) to the
document and change the meaning of terms later in the document by
introducing new macros and/or changing the environment.</p>

<p>This means that you can’t analyze pieces of LaTeX independent from
everything that came before them and that pretty much the only way to
analyze them is to run them, but because of the Lambda-completeness,
evaluation may not terminate.</p>

<p>I wanted to demonstrate this to those on the committee, so I wrote a
short example program that had a very difficult to discover word count.</p>

<h1>The Collatz Conjecture</h1>

<p>The Collatz Conjecture, proposed in 1937, states that if you take any
natural number, n, and repeat on either n/2 if n is even or 3n+1 if n is
odd, then you will eventually reach 1.</p>

<p>Every natural number, n, has a Collatz sequence, or the sequence of
numbers visited starting from n. (The conjecture says that all such
sequences include 1.) For example, the sequence for 6 is 6, 3, 10, 5,
16, 8, 4, 2, 1.</p>

<p>The Collatz Conjecture has not been proved, nor has any counter-example
been discovered.</p>

<h1>The Collatz Sequence in LaTeX</h1>

<p>Below is a short LaTeX file that renders to the Collatz sequence of a
random integer between 0 and 1,000,000,000:</p>

<figure class='code'><figcaption><span>collatz.tex </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='tex'><span class='line'><span class="k">\documentclass</span><span class="nb">{</span>article<span class="nb">}</span>
</span><span class='line'><span class="k">\usepackage</span><span class="nb">{</span>fp<span class="nb">}</span>
</span><span class='line'> 
</span><span class='line'><span class="k">\FPrandom</span> <span class="k">\n</span>
</span><span class='line'><span class="k">\FPmul</span> <span class="k">\n</span> <span class="k">\n</span> <span class="nb">{</span>1000000000<span class="nb">}</span>
</span><span class='line'><span class="k">\FPround</span> <span class="k">\n</span> <span class="k">\n</span> 0
</span><span class='line'> 
</span><span class='line'><span class="k">\newcommand</span><span class="nb">{</span><span class="k">\collatz</span><span class="nb">}</span>
</span><span class='line'><span class="nb">{</span>
</span><span class='line'> <span class="k">\FPclip</span> <span class="k">\n</span> <span class="k">\n</span>
</span><span class='line'> <span class="k">\FPprint</span> <span class="k">\n</span>
</span><span class='line'> <span class="k">\FPifeq</span> <span class="k">\n</span> 1
</span><span class='line'> <span class="k">\else</span>
</span><span class='line'><span class="k">\ifodd</span> <span class="k">\FPprint</span> <span class="k">\n</span>
</span><span class='line'>    <span class="k">\FPmul</span> <span class="k">\n</span> 3 <span class="k">\n</span>
</span><span class='line'>     <span class="k">\FPadd</span> <span class="k">\n</span> <span class="k">\n</span> 1
</span><span class='line'>     <span class="k">\collatz</span>
</span><span class='line'> <span class="k">\else</span>
</span><span class='line'>    <span class="k">\FPdiv</span> <span class="k">\n</span> <span class="k">\n</span> 2
</span><span class='line'>     <span class="k">\collatz</span>
</span><span class='line'> <span class="k">\fi</span>
</span><span class='line'> <span class="k">\fi</span>
</span><span class='line'><span class="nb">}</span>
</span><span class='line'> 
</span><span class='line'><span class="k">\begin</span><span class="nb">{</span>document<span class="nb">}</span>
</span><span class='line'><span class="k">\collatz</span>
</span><span class='line'><span class="k">\end</span><span class="nb">{</span>document<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This 27 line program demonstrates the absurd power of LaTeX. When you
run it, sometimes you get pages and pages of numbers. Other times, the
number of words will be so small it fits on just a few lines.</p>

<h1>Word Counts from LaTeX (redux)</h1>

<p>The beauty of this program is that you can’t tell how many words will be
in the output by looking at the program source or the output, because
the output is only visible in the PostScript in a way that can’t really
be discovered automatically.</p>

<p>The only way to get the word count is either manually or, perhaps, a
hacked version of LaTeX that computer the word count as it went. But, of
course, there are ways around the hacked version like by inserting
negative space sequences:</p>

<figure class='code'><figcaption><span>negspace.tex </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='tex'><span class='line'>
</span><span class='line'><span class="k">\documentclass</span><span class="nb">{</span>article<span class="nb">}</span>
</span><span class='line'><span class="k">\begin</span><span class="nb">{</span>document<span class="nb">}</span>
</span><span class='line'>The qui <span class="k">\hspace</span><span class="nb">{</span>+9.5px<span class="nb">}</span>brown<span class="k">\hspace</span><span class="nb">{</span>-39.5px<span class="nb">}</span>ck
</span><span class='line'> 
</span><span class='line'>The quick brown
</span><span class='line'><span class="k">\end</span><span class="nb">{</span>document<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This document appears to have six words to the human eye, but I am
highly skeptical of any analysis that would decide that from the seven
word-like tokens in the source.</p>

<h1>The Resolution</h1>

<p>Naturally, this argument swayed the rest of the committee and we stuck
with page limits rather than switching to word limits.</p>

<p>Luckily, no one noticed the problem with the program. You see, it only
considers numbers between 10<sup>0</sup> and 10<sup>9,</sup> which have all been verified to
not repeat. We’d have to go up past 10<sup>18,</sup> but the LaTeX fp package only
handles up to the top of 10<sup>17,</sup> so we could never get to a number where
there is doubt about termination. Of course, the program still has a
very unpredictable output, which is computationally challenging to
discover. Additionally, it is natural to imagine putting more work into
the fp package, such as reimplementing GMP in it to get arbitrary length
integers.</p>

<p>Thus we see that LaTeX will always dominate Word. (And, of course, since
Scribble allows embedding Racket directly, potentially non-terminating
documents like this are much easier to write.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[exec and Tail-call Optimization]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/05/28/exec-vs-system/"/>
    <updated>2012-05-28T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/05/28/exec-vs-system</id>
    <content type="html"><![CDATA[<p>I’m often bothered by programs that fail to use exec properly and
instead use system. In this article, we’ll review the difference and
relate it to tail-call optimization.</p>

<!-- more -->


<p>In Unix, there’s not really a way to start a totally new process.
Instead, every process comes into being by another process duplicating
itself with fork(). The two processes are identical at that point,
except that the fork() call returns 0 to the child and the child’s PID
to the parent. Using this information, the two can behave differently.</p>

<p>Often, what the child will do is change the program entirely by loading
a system binary and executing its main function. That task is taken care
of by the exec function, which receives the path to the binary, plus the
arguments, and, optionally, the environment.</p>

<p>Most programming languages give you access to a function named exec
which is a wrapper for this functionality. Its also likely that they
will also give a function named system that behaves almost the same.
It’s main difference is that it returns the exit code of the program
when it exits and it invokes the shell to parse the command-line
arguments and look up the binary’s full path.</p>

<p>If your program calls system in tail-position, meaning that the program
does nothing with the exit code nor does anything else after ward, then
you are wasting memory. In particular, the memory of the parent process
which has nothing to do. You should have just exec’d, not forked and
then exec’d.</p>

<p>Here’s an example:</p>

<figure class='code'><figcaption><span>bad.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'> 
</span><span class='line'><span class="nv">x</span><span class="o">=</span><span class="k">${</span><span class="nv">1</span><span class="k">:-</span><span class="nv">10</span><span class="k">}</span>
</span><span class='line'> 
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$x</span> -eq 0 <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'>    read
</span><span class='line'>    echo <span class="k">done                    </span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    ./bad.sh <span class="k">$(</span>expr <span class="nv">$x</span> - 1<span class="k">)</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>The process tree for this bad code looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/bin/zsh                                                
</span><span class='line'> \_ bash bad.sh                                         
</span><span class='line'>|   \_ bash bad.sh 9                                    
</span><span class='line'>|       \_ bash bad.sh 8                                
</span><span class='line'>|           \_ bash bad.sh 7                            
</span><span class='line'>|               \_ bash bad.sh 6                        
</span><span class='line'>|                   \_ bash bad.sh 5                    
</span><span class='line'>|                       \_ bash bad.sh 4                
</span><span class='line'>|                           \_ bash bad.sh 3            
</span><span class='line'>|                               \_ bash bad.sh 2        
</span><span class='line'>|                                   \_ bash bad.sh 1    
</span><span class='line'>|                                       \_ bash bad.sh 0
</span><span class='line'> \_ ps f</span></code></pre></td></tr></table></div></figure>


<p>Compared to:</p>

<figure class='code'><figcaption><span>good.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'> 
</span><span class='line'><span class="nv">x</span><span class="o">=</span><span class="k">${</span><span class="nv">1</span><span class="k">:-</span><span class="nv">10</span><span class="k">}</span>
</span><span class='line'> 
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$x</span> -eq 0 <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'>    read
</span><span class='line'>    echo <span class="k">done                     </span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    exec ./good.sh <span class="k">$(</span>expr <span class="nv">$x</span> - 1<span class="k">)</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Notice that line 9 is different—we’ve explicitly used exec.)</p>

<p>This good code has a process tree like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/bin/zsh          
</span><span class='line'> \_ bash good.sh 0
</span><span class='line'> \_ ps f</span></code></pre></td></tr></table></div></figure>


<p>This is very similar to the concept of safe-for-space, or tail-call
optimization, in programming languages. As you can see, unfortunately
bash is not safe-for-space by default. That is, it doesn’t keep track of
when a call is in tail-position and automatically use exec rather than
system.</p>

<p>It’s not just a problem with bash either, I’ve never known any shell
that can run this program correctly.</p>

<p>In most cases, this is not problematic because the stack is unlikely to
grow very large and the executed program is unlikely to run for a long
time. However, it most often shows up as a problem with X11 window
managers and menu programs.</p>

<p>Your Xsession initialization should always exec your window manager,
because there’s nothing else it needs to do afterward.</p>

<p>An X11 menu program should also use exec to run the program, otherwise
whenever you start, for example Emacs, the shell that started it will
persist for the entire time you are running Emacs (presumably the entire
time you are at the computer.) In addition, you should exec your menu
program so that the shell that starts it is replaced as well.</p>

<p>For example, the default Xmonad configuration does not do this correctly
and will invoke dmenu without an exec, leaving around the shell forever.
(dmenu is programmed correctly, though.)</p>

<p>So, raise your right arm and say with me: &#8220;I will always exec in
tail-position!&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An LZ78 Implementation]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/05/22/lz78/"/>
    <updated>2012-05-22T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/05/22/lz78</id>
    <content type="html"><![CDATA[<p>For a long time I’ve known about and relied on the LZ77/78 compression
algorithms. Once when I was in middle school, I told a friend an idea I
had about compression, and the friend—who was in college at the
time—said it sounded exactly like LZ77. I don’t remember what my idea
was, but I do remember that incident.</p>

<p>Despite this long connection, I’d never implemented the algorithm
before. I sought to rectify that situation.</p>

<!-- more -->


<p>First, I read about the algorithm on Wikipedia. The
<a href="https://en.wikipedia.org/wiki/LZ77">article</a> is pretty informative.
I’ll briefly recap it.</p>

<p>As you read through the content to compress, you keep track of a
dictionary of previously seen phrases. Whenever you discover a yet
undiscovered phrase, add it to the dictionary and encode it as the
previously-seen prefix and the new character. Decoding works in reverse.
Since the very first character of the encoded output is necessarily not
in the dictionary, its prefix will be empty and it will establish the
first phrase. As you read the encoding, you maintain the same dictionary
and decode by following the phrase-reference backwards and then emitting
the new character.</p>

<p>For an implementation, the signature of the function is pretty
straight-forward: it takes a character source, which I’ll use an
input-port for, and it returns a list of pairs of the previously seen
reference and the new character.</p>

<p>However, there’s one hitch. If the last phrase of the input is
previously seen, then there will be no right-hand side of the output
pair. You could add a special character to indicate that. I decided to
output just the phrase reference, in that case.</p>

<h1>Compression</h1>

<p>My compression code looks like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;compress&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">compress</span><span class="err"> </span><span class="nv">ip</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;next-unseen&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">outer-loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">next</span><span class="err"> </span><span class="mi">1</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="p">(</span><span class="nf">next-unseen</span><span class="err"> </span><span class="nv">next</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">?</span><span class="err"> </span><span class="nv">number?</span><span class="err"> </span><span class="nv">ref</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">stream</span><span class="err"> </span><span class="nv">ref</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">and</span><span class="err"> </span><span class="nv">W</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ref</span><span class="err"> </span><span class="nv">c</span><span class="p">))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">stream-cons</span><span class="err"> </span><span class="nv">W</span><span class="err"> </span><span class="p">(</span><span class="nf">outer-loop</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">next</span><span class="p">)))</span><span class="err">]</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The main work all happens in next-unseen which takes the reference that
the next phrase will be given and either returns a number, for the final
reference in the stream, or a cons of the last reference and the new
character, which is added to the output and then the compression
continues. The dictionary itself is totally maintained by the
next-unseen function.</p>

<p>next-unseen runs in a loop keeping track of the current dictionary and
prefix phrase reference. At each iteration it reads a byte from the
input. There are then three cases:</p>

<ol>
<li><p>The input is empty, in which case, the last seen phrase reference is
returned.</p></li>
<li><p>The current dictionary has a reference starting with that byte, in
which case, the prefix phrase is extended. This means the loop is
continued with a new dictionary and a new prefix phrase. For example, if
the current phrase is A, named 1, and the next input is B, and AB is
previously seen and named 2, then the dictionary will have a mapping in
it from B to a new dictionary and the number 2, which are used in the
next iteration of the loop.</p></li>
<li><p>The current dictionary does <em>not</em> have a reference for this byte,
meaning that we’ve encoded a new phrase. In that case, we can add this
byte to current dictionary and allocate a new name for it, then return
that new name.</p></li>
</ol>


<p>Here’s that in code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;next-unseen&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">top-dict</span><span class="err"> </span><span class="p">(</span><span class="nf">make-hasheq</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">next-unseen</span><span class="err"> </span><span class="nv">this</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">dict</span><span class="err"> </span><span class="nv">top-dict</span><span class="err">]</span>
</span><span class='line'>  <span class="err">             [</span><span class="nv">last</span><span class="err"> </span><span class="mi">0</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">b</span><span class="err"> </span><span class="p">(</span><span class="nf">read-byte</span><span class="err"> </span><span class="nv">ip</span><span class="p">))</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="k">cond </span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">eof-object?</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="nv">last</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">dict</span><span class="err"> </span><span class="nv">b</span><span class="err"> </span><span class="no">#f</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="k">=&gt; </span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">next</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="p">(</span><span class="nf">cdr</span><span class="err"> </span><span class="nv">next</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">car</span><span class="err"> </span><span class="nv">next</span><span class="p">)))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="k">else </span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">hash-set!</span><span class="err"> </span><span class="nv">dict</span><span class="err"> </span><span class="nv">b</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="p">(</span><span class="nf">make-hasheq</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">last</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err">]</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code uses a similar dictionary structure to my Boggle solver, from
the previous blog post. However, in this code, it’s mutable because the
dictionary is extended as we go and it would be tedious to thread the
state.</p>

<p>I’m kind of amazed that the compression can fit in 23 lines!</p>

<p>Here’s a little example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;compress-example&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">some-input</span><span class="err"> </span><span class="o">#</span><span class="s">&quot;AABABBBABAABABBBABBABB&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">compressed</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">compress</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">open-input-bytes</span><span class="err"> </span><span class="nv">some-input</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">A</span><span class="err"> </span><span class="p">(</span><span class="nf">char-&gt;integer</span><span class="err"> </span><span class="sc">#\A</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">B</span><span class="err"> </span><span class="p">(</span><span class="nf">char-&gt;integer</span><span class="err"> </span><span class="sc">#\B</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">stream-&gt;list</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">compressed</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="nv">A</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="nv">A</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">5</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">4</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="nv">A</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="mi">7</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, the final dictionary looks like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;compress-example-dict&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">hasheq</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">B</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">4</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="nv">B</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">7</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="p">))))</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">A</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">1</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="nv">B</span>
</span><span class='line'>  <span class="err">               </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">2</span>
</span><span class='line'>  <span class="err">                     </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="nv">B</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="nv">A</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">8</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="p">))))</span>
</span><span class='line'>  <span class="err">                             </span><span class="nv">A</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">5</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="nv">B</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">6</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="p">)))))))))</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Decompression</h1>

<p>Naturally, decompression is dual to compression. It will also maintain a
dictionary, but it will have the opposite information: rather than
mapping characters to references and suffixes, it will map references to
characters and prefixes.</p>

<p>The code is considerably simpler because there is a single dictionary
(rather than a structured one) and the decompression is a fold over the
input stream, rather than a more generative loop.</p>

<p>Here’s the core of it:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;decompress&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">decompress</span><span class="err"> </span><span class="nv">str</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">dict</span><span class="err"> </span><span class="p">(</span><span class="nf">make-hasheq</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;output-from-dict&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">next</span><span class="err"> </span><span class="mi">1</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">p</span><span class="err"> </span><span class="p">(</span><span class="nf">in-stream</span><span class="err"> </span><span class="nv">str</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="nv">p</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ref</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">hash-set!</span><span class="err"> </span><span class="nv">dict</span><span class="err"> </span><span class="nv">next</span><span class="err"> </span><span class="nv">p</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">output-from-dict</span><span class="err"> </span><span class="nv">next</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">next</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">      [</span><span class="p">(</span><span class="nf">?</span><span class="err"> </span><span class="nv">number?</span><span class="err"> </span><span class="nv">ref</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="p">(</span><span class="nf">output-from-dict</span><span class="err"> </span><span class="nv">ref</span><span class="p">)</span>
</span><span class='line'>  <span class="err">       </span><span class="nv">next</span><span class="err">]</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically, each element of the stream is either a new dictionary entry,
in which case we remember it and output it, or it’s just a reference and
we output without remembering. Pretty simple. (We could use a functional
hash, but there’s no benefit here.)</p>

<p>When you get a reference and need to output it, it’s also quite easy:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;output-from-dict&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">output-from-dict</span><span class="err"> </span><span class="nv">this</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">dict</span><span class="err"> </span><span class="nv">this</span><span class="err"> </span><span class="no">#f</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    [</span><span class="no">#f</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">void</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">    [</span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">last</span><span class="err"> </span><span class="nv">this-b</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">output-from-dict</span><span class="err"> </span><span class="nv">last</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="p">(</span><span class="nf">write-byte</span><span class="err"> </span><span class="nv">this-b</span><span class="p">)</span><span class="err">]</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Either the reference isn’t in the dictionary, so you stop, or it is, so
you output its prefix and then the byte associated with it. We use the
stack as our data-structure to keep track of bytes to write, because the
dictionary stores the prefixes, not the suffixes.</p>

<p>The whole decompression is just 20 lines. Wow!</p>

<p>We can check that the output is the same as the input:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;decompress-example&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">with-output-to-bytes</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">decompress</span><span class="err"> </span><span class="nv">compressed</span><span class="p">)))</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">some-input</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the example, the dictionary is:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;decompress-example-dict&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="mi">8</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="nv">A</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">7</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">4</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">6</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">5</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">5</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="nv">A</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">4</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">3</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">2</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="mi">1</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="nv">A</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that’s it!</p>

<h1>Further work</h1>

<p>One strange thing about this implementation is that the output is just a
stream of pairs rather than bytes. The easiest way to encode it as bytes
is to write each pair as two bytes. That’s not totally correct, however,
because the number of prefixes may exceed the number of bytes, so you’ll
need to use the length of the input log-2 for the number of bits per
reference. You can do a little bit better by having the decoder keep
track of this number during decoding and gradually use more bits.</p>

<p>It is interesting to think of what kinds of input this algorithm fails
to compress. It’s those without common prefixes. For example, if you had
all the bytes from 0 to 255, then the output would be double (plus one!
Why?) the input. If you then added each byte to every other byte, then
you’d double again.</p>

<p>Another surprising thing about the algorithm is that the dictionary is
just as long as the compressed output because the compressed output IS
the dictionary. The compression algorithm is inherently non-random
access because you need to read it linearly to know the context of the
prefix references.</p>

<p>This was a very fun thing to implement. I hope you enjoy it!</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">rackunit</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/list</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/match</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/stream</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/port</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;compress&gt;</span>
</span><span class='line'>  <span class="nv">&lt;compress-example&gt;</span>
</span><span class='line'>  <span class="nv">&lt;compress-example-dict&gt;</span>
</span><span class='line'>  <span class="nv">&lt;decompress&gt;</span>
</span><span class='line'>  <span class="nv">&lt;decompress-example&gt;</span>
</span><span class='line'>  <span class="nv">&lt;decompress-example-dict&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2012-05-22-lz78.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Boggle Solver]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/05/14/boggle/"/>
    <updated>2012-05-14T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/05/14/boggle</id>
    <content type="html"><![CDATA[<p>Boggle is a classic word game that lends itself well to algorithmic
attacks. A student of mine wanted to show me his solution (as it is an
assignment in one of BYU early classes), but I have a hard time
evaluating things like this unless I’ve done them myself. So, I decided
to make an attempt. I was able to do it in about 19 lines of code, minus
the 24 to set up the data-structures. Let’s see how it goes&#8230;</p>

<!-- more -->


<p>Let’s review the rules of Boggle. You have a square board of characters.
You are trying to find words from a dictionary of valid words. The
standard word list does not have words under three letters, etc. The
word may be constructed from any string of adjacent characters—including
the diagonals—provided it does not use the same board position twice.</p>

<p>The two most important decision we make in the algorithm are
representing the dictionary and representing the board. Once these are
in place, the result is pretty obvious.</p>

<h1>The board</h1>

<p>Let’s start with the board. We’ll represent it as a hash table mapping
coordinates, like (0,0), to the letter at that coordinate. The program
will generate a random board configuration before solving it.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;board&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">board-n</span><span class="err"> </span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">board</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for*/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">cell-&gt;char</span><span class="err"> </span><span class="p">(</span><span class="nf">hash</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">row</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="nv">board-n</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">       [</span><span class="nv">col</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="nv">board-n</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">hash-set</span><span class="err"> </span><span class="nv">cell-&gt;char</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">row</span><span class="err"> </span><span class="nv">col</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">random-letter</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The standard game of Boggle is played on a 4x4 gird, but we’ll be
parameterized over board-n.</p>

<p>The hash table doesn’t have any particular order, but that’s fine
because we’ll be using the coordinates directly. Still, printing out the
board is pretty convenient:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;printing&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">row</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="nv">board-n</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">col</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="nv">board-n</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">display</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">board</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">row</span><span class="err"> </span><span class="nv">col</span><span class="p">))))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">newline</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, we have six essential lines of code. (I don’t count the
printer.)</p>

<h1>The dictionary</h1>

<p>The more interesting decision comes from how we’ll represent the
dictionary. The core idea is to use a regular expression derivative,
where the regular expression is accepting when the string is in the
dictionary. The representation will be tabled and gradually constructed
by adding the words one at a time.</p>

<p>We’ll define a dictionary as a hash mapping characters to a boolean and
another dictionary. The boolean will describe if the string is accepted
(i.e. corresponds to a word) and the dictionary will be the transitions
from this string prefix. For example, the dictionary that only contains
&#8220;cat&#8221; and &#8220;cats&#8221; is:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;dict-example&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="sc">#\c</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="no">#f</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="sc">#\a</span>
</span><span class='line'>  <span class="err">                      </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="no">#f</span>
</span><span class='line'>  <span class="err">                            </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="sc">#\t</span>
</span><span class='line'>  <span class="err">                                    </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="no">#t</span>
</span><span class='line'>  <span class="err">                                          </span><span class="p">(</span><span class="nf">hasheq</span><span class="err"> </span><span class="sc">#\s</span>
</span><span class='line'>  <span class="err">                                                  </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="no">#t</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="p">)))))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The following provdes the necessary function for extending an empty
dictionary like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;dict&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">empty-dict</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">empty-entry</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="no">#f</span><span class="err"> </span><span class="nv">empty-dict</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">dict-add</span><span class="err"> </span><span class="nv">d</span><span class="err"> </span><span class="nv">w</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">empty?</span><span class="err"> </span><span class="nv">w</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="nv">d</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">hash-update</span><span class="err"> </span><span class="nv">d</span><span class="err"> </span><span class="p">(</span><span class="nf">first</span><span class="err"> </span><span class="nv">w</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                 </span><span class="p">(</span><span class="nf">match-lambda</span>
</span><span class='line'>  <span class="err">                  [</span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">word?</span><span class="err"> </span><span class="nv">rest-d</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                   </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">or</span><span class="err"> </span><span class="nv">word?</span><span class="err"> </span><span class="p">(</span><span class="nf">empty?</span><span class="err"> </span><span class="p">(</span><span class="nf">rest</span><span class="err"> </span><span class="nv">w</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">                         </span><span class="p">(</span><span class="nf">dict-add</span><span class="err"> </span><span class="nv">rest-d</span><span class="err"> </span><span class="p">(</span><span class="nf">rest</span><span class="err"> </span><span class="nv">w</span><span class="p">)))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                 </span><span class="nv">empty-entry</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">dict-add*</span><span class="err"> </span><span class="nv">d</span><span class="err"> </span><span class="nv">s</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">dict-add</span><span class="err"> </span><span class="nv">d</span><span class="err"> </span><span class="p">(</span><span class="nf">string-&gt;list</span><span class="err"> </span><span class="nv">s</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>dict-add* breaks a string into a list of characters, which are read
one-by-one extending the dictionary gradually. If the rest of the list
after a given character is ever empty, then the dictionary entry
corresponds to a complete word.</p>

<p>We can test to make sure this function works by comparing to our
manually constructed example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;dict-test&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">cat-dict</span><span class="err"> </span><span class="nv">&lt;dict-example&gt;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">dict-add*</span><span class="err"> </span><span class="p">(</span><span class="nf">dict-add*</span><span class="err"> </span><span class="nv">empty-dict</span><span class="err"> </span><span class="s">&quot;cat&quot;</span><span class="p">)</span><span class="err"> </span><span class="s">&quot;cats&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">cat-dict</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">dict-add*</span><span class="err"> </span><span class="p">(</span><span class="nf">dict-add*</span><span class="err"> </span><span class="nv">empty-dict</span><span class="err"> </span><span class="s">&quot;cats&quot;</span><span class="p">)</span><span class="err"> </span><span class="s">&quot;cat&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">cat-dict</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can build the whole dictionary from a standard word list, like so:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;dict-parse&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">dict-pth</span><span class="err"> </span><span class="s">&quot;/usr/share/dict/words&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">the-dictionary</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">d</span><span class="err"> </span><span class="nv">empty-dict</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">w</span><span class="err"> </span><span class="p">(</span><span class="nf">in-lines</span><span class="err"> </span><span class="p">(</span><span class="nf">open-input-file</span><span class="err"> </span><span class="nv">dict-pth</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">dict-add*</span><span class="err"> </span><span class="nv">d</span><span class="err"> </span><span class="nv">w</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The standard dictionary is not Boggle-legal, because it contains words
under three letters, apostrophes, proper names, etc. But the algorithm
wouldn’t change with a different list.</p>

<p>At this point, we have 18 more lines of essential code, bringing the
total to 24. (I don’t count the test.)</p>

<h1>The solver</h1>

<p>Now that we have our data-structures ready, it’s a pretty straight path.
We’ll be exploring the board like a graph, looking for paths where the
nodes correspond to accepting strings. After visiting a node, we’ll
remove it from the graph and proceed to all the neighbors, provided that
the dictionary is not empty from the current path.</p>

<p>The main loop simply starts this process from every possible square with
the complete board, the complete dictionary, and an empty path:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;main&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">k</span><span class="err"> </span><span class="p">(</span><span class="nf">in-hash-keys</span><span class="err"> </span><span class="nv">board</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">solutions-from</span><span class="err"> </span><span class="nv">board</span><span class="err"> </span><span class="nv">the-dictionary</span><span class="err"> </span><span class="nv">k</span><span class="err"> </span><span class="nv">empty</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We make use of a slight pun by iterating through the board’s hash keys,
which correspond to the cell coordinates.</p>

<p>(Solution so far: 2 lines)</p>

<p>The solutions-from function is a bit more complicated.</p>

<p>Its first task will be to determine if a cell is actually on the board
(i.e. it has not been removed already and was there in the first place):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;solutions-from&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">solutions-from</span><span class="err"> </span><span class="nv">board</span><span class="err"> </span><span class="nv">dict</span><span class="err"> </span><span class="nv">k</span><span class="err"> </span><span class="nv">path</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">board</span><span class="err"> </span><span class="nv">k</span><span class="err"> </span><span class="no">#f</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">when</span><span class="err"> </span><span class="nv">c</span>
</span><span class='line'>  <span class="err">    </span><span class="nv">&lt;step-one&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="nv">&lt;step-two&gt;</span>
</span><span class='line'>  <span class="err">    </span><span class="nv">&lt;step-three&gt;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Solution so far: 5 lines)</p>

<p>If it was there, then we’ll want to know if the new path is a word, what
the new state machine is, and what the new path is:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;step-one&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">match-define</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">word?</span><span class="err"> </span><span class="nv">new-dict</span><span class="p">)</span>
</span><span class='line'>  <span class="err">              </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">dict</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">empty-entry</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">new-path</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">path</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Solution so far: 8 lines)</p>

<p>If the current path is a word, then we can print it out, which is a bit
complicated since we’re just storing the path backwards, so we have to
reverse the list (to make it forwards) and then turn the list of
characters into a string:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;step-two&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">when</span><span class="err"> </span><span class="nv">word?</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">displayln</span><span class="err"> </span><span class="p">(</span><span class="nf">list-&gt;string</span><span class="err"> </span><span class="p">(</span><span class="nf">reverse</span><span class="err"> </span><span class="nv">new-path</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Solution so far: 10 lines)</p>

<p>If it possible to have any more words from this path (i.e. if the new
dictionary isn’t empty), then we’ll want to remove this node from the
board and vist all adjacent positions:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;step-three&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">unless</span><span class="err"> </span><span class="p">(</span><span class="nf">zero?</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-count</span><span class="err"> </span><span class="nv">new-dict</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">new-board</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-remove</span><span class="err"> </span><span class="nv">board</span><span class="err"> </span><span class="nv">k</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-define</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">row</span><span class="err"> </span><span class="nv">col</span><span class="p">)</span><span class="err"> </span><span class="nv">k</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for*</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">drow</span><span class="err"> </span><span class="p">(</span><span class="nf">in-list</span><span class="err"> </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">-1</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="mi">1</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">         [</span><span class="nv">dcol</span><span class="err"> </span><span class="p">(</span><span class="nf">in-list</span><span class="err"> </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">-1</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="mi">1</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">solutions-from</span><span class="err"> </span><span class="nv">new-board</span><span class="err"> </span><span class="nv">new-dict</span>
</span><span class='line'>  <span class="err">                    </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">row</span><span class="err"> </span><span class="nv">drow</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                          </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">col</span><span class="err"> </span><span class="nv">dcol</span><span class="p">))</span>
</span><span class='line'>  <span class="err">                    </span><span class="nv">new-path</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We make some fun abuses for the sake of simplicity. For example, this
will re-visit the current node, but we’ve already removed it from the
board, so the body of the function will be skipped. Similarly, we don’t
care about going off the board, because the same test will find those.
This is by far the largest block of the solution, but it is still quite
simple.</p>

<p>This actually concludes the solution, which is a whopping 19 lines!</p>

<h1>The whole program</h1>

<p>The whole program is a mere 43 lines of essential code but is a complete
and efficient Boggle solver.</p>

<p>Regarding the efficiency, it takes about a 56x56 board to take more than
1 second, but that time is dominated by printing. When I turn off
printing (but not the construction of the string to be printed), it is
under a second until about 110x110.</p>

<p>The major wins are:</p>

<ol>
<li><p>A good data-structure for the dictionary, corresponding to top-notch
regular expression matching theory.</p></li>
<li><p>A functional representation of the board, so we can safely remove
nodes from the board without doing any bookkeeping or undo-ing.</p></li>
<li><p>A snoc-list of the path backwards to maximize sharing. (Exercise:
Change the code so that it doesn’t need to do any allocation for
successes. Right now it has to allocate another list and then convert it
into a string. Try to print out a list backwards without allocation.)</p></li>
<li><p>Eliminating duplicate work: it never explores any path more than
once, but will discover the same word through multiple paths, if
possible.</p></li>
</ol>


<p>Returning to the student, he sent me about 700 lines of complicated and
inefficent C++ code and was working on a new version that was currently
500 lines and broken. Maybe this will be a good push in the right
direction?</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">racket/list</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/match</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">rackunit</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">letters</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">string-&gt;list</span><span class="err"> </span><span class="s">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">random-list-ref</span><span class="err"> </span><span class="nv">l</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">list-ref</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="p">(</span><span class="nf">random</span><span class="err"> </span><span class="p">(</span><span class="nf">length</span><span class="err"> </span><span class="nv">l</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">random-letter</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">random-list-ref</span><span class="err"> </span><span class="nv">letters</span><span class="p">))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;board&gt;</span>
</span><span class='line'>  <span class="nv">&lt;printing&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">newline</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nv">&lt;dict-test&gt;</span>
</span><span class='line'>  <span class="nv">&lt;dict-parse&gt;</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;solutions-from&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">time</span><span class="err"> </span><span class="nv">&lt;main&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2012-05-14-boggle.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quilt Colouring]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/05/07/quilt-colouring/"/>
    <updated>2012-05-07T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/05/07/quilt-colouring</id>
    <content type="html"><![CDATA[<p>I got this email from my wife:</p>

<blockquote><p>Honey,</p>

<p>I’m making a quilt with 25 blocks. Each block has four colors on it.
The colors I’m using are red, pink, green, yellow, blue, and green
plaid.</p>

<p>I don’t want to duplicate colors in a block or in the corners and I
don’t want pink and red in the same corner (but pink and red in a block
is okay.) Similarly with green and green plaid.</p></blockquote>

<p>She’s a <a href="http://icme.stanford.edu/index.php">mathematician</a>, so she
knows about the <a href="https://en.wikipedia.org/wiki/Four_color_theorem">Four color
theorem</a>. But she
wasn’t sure if the graph was planar, and didn’t want to lay it out
manually anyways.</p>

<p>Let’s work through the solution.</p>

<!-- more -->


<p>The first thing I wanted to do was see the structure of the quilt as a
graph. Naturally, <a href="http://graphviz.org/">Graphviz</a> is a natural choice.
But, first I’d have to represent the graph in some way. I decided to go
with a 5x5 matrix of blocks where each block was a structure of the four
corner colors. The values of the nodes won’t really matter, so I’m just
using unique symbols.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;the-nodes&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">block</span><span class="err"> </span><span class="p">(</span><span class="nf">ul</span><span class="err"> </span><span class="nv">ur</span><span class="err"> </span><span class="nv">ll</span><span class="err"> </span><span class="nv">lr</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">make-block</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">block</span><span class="err"> </span><span class="p">(</span><span class="nf">gensym</span><span class="err"> </span><span class="ss">&#39;ul</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">gensym</span><span class="err"> </span><span class="ss">&#39;ur</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">gensym</span><span class="err"> </span><span class="ss">&#39;ll</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="p">(</span><span class="nf">gensym</span><span class="err"> </span><span class="ss">&#39;lr</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">quilt</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for*/hash</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">x</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">              [</span><span class="nv">y</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">values</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">y</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                     </span><span class="p">(</span><span class="nf">make-block</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is, of course, just a representation of the nodes. A graph also has
edges. I decided to make another list of those. The first step is to
turn a block into a list of edges. That’s pretty trivial:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;block-to-edges&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">block-&gt;edges</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-lambda</span>
</span><span class='line'>  <span class="err">   [</span><span class="p">(</span><span class="nf">block</span><span class="err"> </span><span class="nv">ul</span><span class="err"> </span><span class="nv">ur</span><span class="err"> </span><span class="nv">ll</span><span class="err"> </span><span class="nv">lr</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ul</span><span class="err"> </span><span class="nv">ur</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ul</span><span class="err"> </span><span class="nv">ll</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ul</span><span class="err"> </span><span class="nv">lr</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ur</span><span class="err"> </span><span class="nv">ul</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ur</span><span class="err"> </span><span class="nv">ll</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ur</span><span class="err"> </span><span class="nv">lr</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ll</span><span class="err"> </span><span class="nv">ul</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ll</span><span class="err"> </span><span class="nv">ur</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">ll</span><span class="err"> </span><span class="nv">lr</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">lr</span><span class="err"> </span><span class="nv">ul</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">lr</span><span class="err"> </span><span class="nv">ur</span><span class="p">)</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">lr</span><span class="err"> </span><span class="nv">ll</span><span class="p">))</span><span class="err">]</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we loop through each of the blocks and call this, appending the
results together, we’d get a bunch of disconnected sub-graphs. We’d just
need to add in the block-crossing (i.e. corner) edges. The structure
will look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;the-edges&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">&lt;block-to-edges&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">edges</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nb">apply </span>
</span><span class='line'>  <span class="err">   </span><span class="nv">append</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">for*/list</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">x</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">               [</span><span class="nv">y</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">     </span><span class="nv">&lt;edges-per-block&gt;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I briefly thought about making a new for form that did the appending as
it went, rather than using the (apply append &#8230;.) pattern, but decided
it wasn’t worth the time right here.</p>

<p>The inner part of the loop is a little bit complicated though, at least
if we want to do it elegantly. The problem is that on the edges there
aren’t adjacent blocks, so we don’t want to try connect them with the
block under consideration. I use a cute little macro that sets up an
exception handler that will just return an empty list if an inner
hash-ref fails.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;edges-per-block&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-syntax-rule</span><span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="nv">e</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">with-handlers</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">eq?</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="ss">&#39;bot</span><span class="p">))</span>
</span><span class='line'>  <span class="err">                   </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span><span class="err"> </span><span class="nv">empty</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="nv">e</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">y</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">quilt</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">y</span><span class="p">)</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">raise</span><span class="err"> </span><span class="ss">&#39;bot</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">b</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">y</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">append </span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ul</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-lr</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ul</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ur</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ul</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ll</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">0</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ur</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-lr</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">0</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ur</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ll</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ur</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ul</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ll</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-lr</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ll</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ur</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ll</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ul</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">0</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-lr</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ll</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-lr</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ul</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">out</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">block-lr</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">block-ur</span><span class="err"> </span><span class="p">(</span><span class="nf">q</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">y</span><span class="err"> </span><span class="mi">0</span><span class="p">))))))</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">block-&gt;edges</span><span class="err"> </span><span class="nv">b</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I thought about working out which edges I didn’t need to write down
because the graph is undirected, but figure that since the size of the
graph is so small it doesn’t really matter if I have a few extra edges.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;print-it&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-runtime-path</span><span class="err"> </span><span class="nv">the-graph-path</span>
</span><span class='line'>  <span class="err">  </span><span class="s">&quot;tmp/2012-05-07-quilt-colouring.graph.dot&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-runtime-path</span><span class="err"> </span><span class="nv">the-graph-png-path</span>
</span><span class='line'>  <span class="err">  </span><span class="s">&quot;tmp/2012-05-07-quilt-colouring.graph.png&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">with-output-to-file </span>
</span><span class='line'>  <span class="err">    </span><span class="nv">the-graph-path</span>
</span><span class='line'>  <span class="err">  </span><span class="o">#</span><span class="nv">:exists</span><span class="err"> </span><span class="ss">&#39;replace</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;graph {\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">e</span><span class="err"> </span><span class="p">(</span><span class="nf">in-list</span><span class="err"> </span><span class="nv">edges</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">match-define</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">u</span><span class="err"> </span><span class="nv">v</span><span class="p">)</span><span class="err"> </span><span class="nv">e</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;\t~a -- ~a;\n&quot;</span><span class="err"> </span><span class="nv">u</span><span class="err"> </span><span class="nv">v</span><span class="p">))</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">printf</span><span class="err"> </span><span class="s">&quot;}\n&quot;</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">unless</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">system*</span><span class="err"> </span><span class="p">(</span><span class="nf">find-executable-path</span><span class="err"> </span><span class="s">&quot;dot&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="err">             </span><span class="s">&quot;-Tpng&quot;</span>
</span><span class='line'>  <span class="err">             </span><span class="nv">the-graph-path</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">format</span><span class="err"> </span><span class="s">&quot;-o~a&quot;</span><span class="err"> </span><span class="nv">the-graph-png-path</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;quilt-colouring</span><span class="err"> </span><span class="s">&quot;dot failed :(&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see the dot file here: <a href="http://jeapostrophe.github.com/downloads/code/tmp/2012-05-07-quilt-colouring.graph.dot">dot
file</a>, but
unfortunately the picture wasn’t very helpful. You can see it here:
<a href="http://jeapostrophe.github.com/downloads/code/tmp/2012-05-07-quilt-colouring.graph.png">graph PNG</a>.</p>

<p>Now that I have the edges, I can create an adjacency list really simply:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;the-graph&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">graph</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">graph</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">e</span><span class="err"> </span><span class="p">(</span><span class="nf">in-list</span><span class="err"> </span><span class="nv">edges</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">match-define</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">u</span><span class="err"> </span><span class="nv">v</span><span class="p">)</span><span class="err"> </span><span class="nv">e</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">hash-update</span><span class="err"> </span><span class="nv">graph</span><span class="err"> </span><span class="nv">u</span><span class="err"> </span><span class="p">(</span><span class="nf">curry</span><span class="err"> </span><span class="nv">list*</span><span class="err"> </span><span class="nv">v</span><span class="p">)</span><span class="err"> </span><span class="nv">empty</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that I have graph structure, it’s a simple matter of selecting
colors. I decided to write it as an exhaustive greedy search, with
randomness (for artistic reasons). For every node u connected to nodes
vs, figure out what the options are, shuffle them, and try them in
order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;colour-per-node&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">vs-colours</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">append-map</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">v</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">colouring</span><span class="err"> </span><span class="nv">v</span><span class="err"> </span><span class="nv">empty</span><span class="p">))</span>
</span><span class='line'>  <span class="err">              </span><span class="nv">vs</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">u-options</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">shuffle</span><span class="err"> </span><span class="p">(</span><span class="nf">remq*</span><span class="err"> </span><span class="nv">vs-colours</span><span class="err"> </span><span class="nv">colours</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I decided to have the colouring be a hash table where the values where
singleton lists (to facilitate the call to append-map.)</p>

<p>The interesting thing comes from properly handling back-tracking in case
a choice leads to an empty option list eventually. In addition to
folding the colouring, I also have a fail procedure that goes back.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;colouring&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">*backtracks*</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-values</span><span class="err"> </span><span class="p">(</span><span class="nf">colouring</span><span class="err"> </span><span class="nv">fail</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">colouring</span><span class="err"> </span><span class="p">(</span><span class="nf">hasheq</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">             [</span><span class="nv">fail</span><span class="err"> </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span><span class="err"> </span><span class="p">(</span><span class="nf">error</span><span class="err"> </span><span class="ss">&#39;quilt-colouring</span><span class="err"> </span><span class="s">&quot;Can&#39;t colour :(&quot;</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="p">(</span><span class="nf">u</span><span class="err"> </span><span class="nv">vs</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">in-hash</span><span class="err"> </span><span class="nv">graph</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err">    </span><span class="nv">&lt;colour-per-node&gt;</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">let/ec</span><span class="err"> </span><span class="nv">return</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">for</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">option</span><span class="err"> </span><span class="p">(</span><span class="nf">in-list</span><span class="err"> </span><span class="nv">u-options</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">let/cc</span><span class="err"> </span><span class="nv">try-another-option</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">return</span>
</span><span class='line'>  <span class="err">           </span><span class="p">(</span><span class="nf">hash-set</span><span class="err"> </span><span class="nv">colouring</span><span class="err"> </span><span class="nv">u</span><span class="err"> </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="nv">option</span><span class="p">))</span>
</span><span class='line'>  <span class="err">           </span><span class="p">(</span><span class="err">λ </span><span class="p">()</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">try-another-option</span><span class="p">)))))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">set!</span><span class="err"> </span><span class="nv">*backtracks*</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="nv">*backtracks*</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">fail</span><span class="p">))))</span>
</span><span class='line'>  <span class="nv">*backtracks*</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the heck of it, I decided to keep track of how many back-trackings
happened. While the use of continuations to implement back-tracking is
definitely neat, unfortunately I’ve never run it and observed any
failures. (Unless I reduce the number of colours to three, in which case
it fails.)</p>

<p>Now that I have a colouring, how can I show it to my wife? Well, I’ll
just render it out. Racket’s 2htdp/image library supports an algebra of
images that will make this really simple.</p>

<p>First, we’ll render each individual square in the quilt as a square,
assuming we have a way of turning our colours into colors that Racket
supports.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;render-square&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">render-square</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">square</span><span class="err"> </span><span class="mi">10</span><span class="err"> </span><span class="ss">&#39;solid</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">quilt-colour-&gt;racket-color</span><span class="err"> </span><span class="p">(</span><span class="nf">first</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">n</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, we’ll assemble each block (and give it a nice thick outline):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;render-block&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">render-block</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-define</span><span class="err"> </span><span class="p">(</span><span class="nf">block</span><span class="err"> </span><span class="nv">ul</span><span class="err"> </span><span class="nv">ur</span><span class="err"> </span><span class="nv">ll</span><span class="err"> </span><span class="nv">lr</span><span class="p">)</span><span class="err"> </span><span class="nv">b</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">overlay</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">above</span><span class="err"> </span><span class="p">(</span><span class="nf">beside</span><span class="err"> </span><span class="p">(</span><span class="nf">render-square</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">ul</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                  </span><span class="p">(</span><span class="nf">render-square</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">ur</span><span class="p">))</span>
</span><span class='line'>  <span class="err">          </span><span class="p">(</span><span class="nf">beside</span><span class="err"> </span><span class="p">(</span><span class="nf">render-square</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">ll</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                  </span><span class="p">(</span><span class="nf">render-square</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">lr</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="nf">square</span><span class="err"> </span><span class="mi">23</span><span class="err"> </span><span class="ss">&#39;solid</span><span class="err"> </span><span class="s">&quot;black&quot;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we go through and put each block in the right order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;render-quilt&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">render-quilt</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="nv">quilt</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for*/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">image</span><span class="err"> </span><span class="nv">empty-image</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">x</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">above</span><span class="err"> </span><span class="nv">image</span>
</span><span class='line'>  <span class="err">           </span><span class="p">(</span><span class="nf">for*/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">image</span><span class="err"> </span><span class="nv">empty-image</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">               </span><span class="p">(</span><span class="err">[</span><span class="nv">y</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">5</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">beside</span><span class="err"> </span><span class="nv">image</span>
</span><span class='line'>  <span class="err">                     </span><span class="p">(</span><span class="nf">render-block</span><span class="err"> </span><span class="nv">c</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-ref</span><span class="err"> </span><span class="nv">quilt</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">x</span><span class="err"> </span><span class="nv">y</span><span class="p">))))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then stitch it all together and save it to a file:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;render&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-runtime-path</span><span class="err"> </span><span class="nv">the-png-path</span>
</span><span class='line'>  <span class="err">  </span><span class="s">&quot;tmp/2012-05-07-quilt-colouring.png&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">&lt;render-square&gt;</span>
</span><span class='line'>  <span class="nv">&lt;render-block&gt;</span>
</span><span class='line'>  <span class="nv">&lt;render-quilt&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">save-image</span><span class="err"> </span><span class="p">(</span><span class="nf">render-quilt</span><span class="err"> </span><span class="nv">colouring</span><span class="err"> </span><span class="nv">quilt</span><span class="p">)</span>
</span><span class='line'>  <span class="err">            </span><span class="nv">the-png-path</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The final thing is to write the function to translate between our
colours and Racket’s colors. For simplicity, I’ve made a stronger
colouring than my wife wanted. She didn’t want some colours to connect
across corners, but I have treated every color uniformly. Even though
she will use six colours, I’m really only using four and delaying the
selection of which of the two variations of green and red she uses for
the end.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;color-definitions&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">colours</span>
</span><span class='line'>  <span class="err">  </span><span class="o">&#39;</span><span class="p">(</span><span class="nv">red-or-pink</span><span class="err"> </span><span class="nv">green-or-green-plaid</span><span class="err"> </span><span class="nv">yellow</span><span class="err"> </span><span class="nv">blue</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">quilt-colour-&gt;racket-color</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">match-lambda</span>
</span><span class='line'>  <span class="err">   [</span><span class="ss">&#39;green-or-green-plaid</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">zero?</span><span class="err"> </span><span class="p">(</span><span class="nf">random</span><span class="err"> </span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="s">&quot;Green&quot;</span>
</span><span class='line'>  <span class="err">      </span><span class="s">&quot;DarkGreen&quot;</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">   [</span><span class="ss">&#39;yellow</span><span class="err"> </span><span class="s">&quot;Yellow&quot;</span><span class="err">]</span>
</span><span class='line'>  <span class="err">   [</span><span class="ss">&#39;blue</span><span class="err"> </span><span class="s">&quot;Blue&quot;</span><span class="err">]</span>
</span><span class='line'>  <span class="err">   [</span><span class="ss">&#39;red-or-pink</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">zero?</span><span class="err"> </span><span class="p">(</span><span class="nf">random</span><span class="err"> </span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="s">&quot;Red&quot;</span>
</span><span class='line'>  <span class="err">      </span><span class="s">&quot;DeepPink&quot;</span><span class="p">)</span><span class="err">]</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see an example colouring:</p>

<p><a href="http://jeapostrophe.github.com/downloads/code/tmp/2012-05-07-quilt-colouring.png"><img
src="http://jeapostrophe.github.com/downloads/code/tmp/2012-05-07-quilt-colouring.png" align="center"
/></a></p>

<p>When she finishes the quilt, I’ll update this post with a picture of
what she went with.</p>

<p>(<em>UPDATE</em> Here’s her blog post about the finished quilt: <a
href="http://madlibster.blogspot.jp/2012/05/quilt-for-iris.html">read
it</a>!)</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">racket/list</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/function</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/match</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/system</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/runtime-path</span>
</span><span class='line'>  <span class="err">         </span><span class="mi">2</span><span class="nv">htdp/image</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;color-definitions&gt;</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;the-nodes&gt;</span>
</span><span class='line'>  <span class="nv">&lt;the-edges&gt;</span>
</span><span class='line'>  <span class="nv">&lt;print-it&gt;</span>
</span><span class='line'>  <span class="nv">&lt;the-graph&gt;</span>
</span><span class='line'>  <span class="nv">&lt;colouring&gt;</span>
</span><span class='line'>  <span class="nv">&lt;render&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2012-05-07-quilt-colouring.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Professor Layton and the Last Specter, Puzzle #146]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/05/07/professor-layton-and-the-last-specter-puzzle-146/"/>
    <updated>2012-05-07T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/05/07/professor-layton-and-the-last-specter-puzzle-146</id>
    <content type="html"><![CDATA[<p>This is for <a href="http://tinyurl.com/7yefk76">Puzzle 146</a>. Here is the
puzzle:</p>

<blockquote><p>A bookcase has seven shelves each filled with 10 books of the same
size.</p>

<p>When you choose a book, you must also take the two books above, below,
to the left, and to the right of the one you actually want. If there are
fewer than two books in any of these directions, you cannot choose that
book.</p>

<p>Choosing as many books as possible, how many books will you end up
taking?</p></blockquote>

<!-- more -->


<p>I encoded the bookcase as a hash table in Racket, where the key is the
coordinate of the book and the value is whether the book has been taken.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;bookcase&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">bookcase</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for*/hash</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">shelf</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">7</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">              [</span><span class="nv">book</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">10</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">values</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">shelf</span><span class="err"> </span><span class="nv">book</span><span class="p">)</span><span class="err"> </span><span class="no">#t</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I didn’t know when I wrote it, but I assumed that it would not matter
what order you picked the books in, so I just considered taking them
from left to right, and top to bottom. After consider each book, I would
return the new bookcase, after having removed some books. The number of
books in this bookcase, subtracted from 70, would give me the number
selected:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;selecting&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">final-bookcase</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for*/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">bookcase</span><span class="err"> </span><span class="nv">bookcase</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">shelf</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">7</span><span class="p">)</span><span class="err">]</span>
</span><span class='line'>  <span class="err">       [</span><span class="nv">book</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="mi">10</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="nv">&lt;loop-body&gt;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">-</span><span class="err"> </span><span class="mi">70</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-count</span><span class="err"> </span><span class="nv">final-bookcase</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside the loop, it will be convenient to bind an escape continuation to
return early. The actual loop body is divided into three parts. First,
we’ll make sure that the book we’re consider is actually there. Then,
we’ll make sure it has two books in every directions. Finally, we’ll
return the updated bookcase. The code will look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;loop-body&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">let/ec</span><span class="err"> </span><span class="nv">return</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;check-this-book&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;check-others&gt;</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;update-bookcase&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first part is really simple: just call our predicate and if it isn’t
there, call the escape continuation to jump past the rest of the code
and leave the bookcase unchanged.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;check-this-book&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">unless</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-has-key?</span><span class="err"> </span><span class="nv">bookcase</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">shelf</span><span class="err"> </span><span class="nv">book</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">return</span><span class="err"> </span><span class="nv">bookcase</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The middle part is the most complicated. Here’s the idea: we’ll loop
over the eight other different books (the two above, below, to the left,
and to the right) and remove them from the bookcase, if they are there.
If any book isn’t there, we’ll return from the outer loop with the
original bookcase, because the conditions aren’t met, using the escape
continuation.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;check-others&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">other-book-offsets</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">list</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">-1</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">-2</span><span class="err"> </span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="mi">1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="err">        </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="mi">-1</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="mi">-2</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">new-bookcase</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for*/fold</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">new-bookcase</span><span class="err"> </span><span class="nv">bookcase</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="err">[</span><span class="nv">diff</span><span class="err"> </span><span class="p">(</span><span class="nf">in-list</span><span class="err"> </span><span class="nv">other-book-offsets</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">new-book</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">shelf</span><span class="err"> </span><span class="p">(</span><span class="nf">car</span><span class="err"> </span><span class="nv">diff</span><span class="p">))</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">+</span><span class="err"> </span><span class="nv">book</span><span class="err"> </span><span class="p">(</span><span class="nf">cdr</span><span class="err"> </span><span class="nv">diff</span><span class="p">))))</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">hash-has-key?</span><span class="err"> </span><span class="nv">new-bookcase</span><span class="err"> </span><span class="nv">new-book</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">hash-remove</span><span class="err"> </span><span class="nv">new-bookcase</span><span class="err"> </span><span class="nv">new-book</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">return</span><span class="err"> </span><span class="nv">bookcase</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the earlier two tests haven’t returned, then when we get to the
third, we’ll know all the right conditions are met, so we can remove the
current book from the bookcase (the one after the other books were
removed):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;update-bookcase&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">hash-remove</span><span class="err"> </span><span class="nv">new-bookcase</span><span class="err"> </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">shelf</span><span class="err"> </span><span class="nv">book</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This technique makes inherent use of functional data-structures, because
the bookcase is not destructively modified during the trial deletions of
the eight books. If it were, then we couldn’t just return the original
bookcase. Instead, we’d have to undo the changes, or do the inner loop
twice: once to check if we should and once to actually remove them.
Either way, we’d be doing about twice as much work.</p>

<p>This program also demonstrates how useful early return, escape
continuations can be. If we didn’t have them, then in the first case,
we’d just have to change the syntactic structure of the program, by
putting the rest of the loop body on the false side of if. In the second
case, however, it would be more complicated, because we’d have to
continue the loop past the point of usefulness and check if it was
successful at the end—maybe seeing how many books were removed or by
keeping a boolean on the side. Either way, escape continuations saved
the day.</p>

<p>In retrospect, I think a good way to solve this would be to think of it
has a packing problem where you have a plus sign where the legs are each
two units and you are trying to fit as many as possible on a 7x10 grid.</p>

<p>Was this faster or slower than doing it the old fashion way&#8230;? Who
knows.</p>

<p>Can you work out what the answer is&#8230;?</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">&lt;bookcase&gt;</span>
</span><span class='line'>  <span class="nv">&lt;selecting&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2012-05-07-professor-layton-and-the-last-specter-puzzle-146.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stupid Interview Questions - Introduction + Reversing a Doubly Linked List]]></title>
    <link href="http://jeapostrophe.github.com/blog/2012/03/31/siq-reverse-dll/"/>
    <updated>2012-03-31T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2012/03/31/siq-reverse-dll</id>
    <content type="html"><![CDATA[<p>Stupid interviews ask applicants to write programs on whiteboards or
pieces of paper without the resources that are normally available when
programming. These questions purport to be able understanding the
applicant’s algorithmic design process, but the problems in question are
almost always so trivial that no interesting thinking is necessary.
Worse, many of these questions are really more about knowing inane
tricks than having good design abilities.</p>

<p>Some students in my lab are always talking and worrying about such
problems. I like to provide unnecessarily silly solutions to some of the
questions. In this introduction to the series:</p>

<p>How do you reverse a doubly linked list?</p>

<!-- more -->


<h1>The Obvious</h1>

<p>The naive implementation looks like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;naive-impl&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-reverse!</span><span class="err"> </span><span class="nv">l</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">head</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-head</span><span class="err"> </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">let</span><span class="err"> </span><span class="nv">loop</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">last</span><span class="err"> </span><span class="no">#f</span><span class="err">] [</span><span class="nv">current</span><span class="err"> </span><span class="nv">head</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">when</span><span class="err"> </span><span class="nv">last</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">set-node-last!</span><span class="err"> </span><span class="nv">last</span><span class="err"> </span><span class="nv">current</span><span class="p">))</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">when</span><span class="err"> </span><span class="nv">current</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">next</span><span class="err"> </span><span class="p">(</span><span class="nf">node-next</span><span class="err"> </span><span class="nv">current</span><span class="p">))</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">set-node-next!</span><span class="err"> </span><span class="nv">current</span><span class="err"> </span><span class="nv">last</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">loop</span><span class="err"> </span><span class="nv">current</span><span class="err"> </span><span class="nv">next</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">set-dll-head!</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-tail</span><span class="err"> </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">set-dll-tail!</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="nv">head</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The thing to notice about this implementation is that it takes O(n) time
and is a tiny bit hairy in the order that the effects have to happen in,
plus the swapping at the end.</p>

<p>I assume that getting this right is what interviewers are looking for
when they ask a question like this. It would be even better if they
asked about how you would validate that your code worked. Here’s what I
did:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;naive-tests&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-test</span><span class="err"> </span><span class="nv">make-dll</span><span class="err"> </span><span class="nv">dll-cons!</span><span class="err"> </span><span class="nv">dll-snoc!</span>
</span><span class='line'>  <span class="err">                  </span><span class="nv">dll-fold</span><span class="err"> </span><span class="nv">dll-rfold</span><span class="err"> </span><span class="nv">dll-reverse!</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">c123</span><span class="err"> </span><span class="p">(</span><span class="nf">make-dll</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">dll-cons!</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">dll-cons!</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">dll-snoc!</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">check-equal?</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-fold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="mi">3</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">check-equal?</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-rfold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">3</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">dll-reverse!</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">check-equal?</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-fold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">3</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">check-equal?</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-rfold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="mi">3</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">dll-cons!</span><span class="err"> </span><span class="mi">4</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">dll-reverse!</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">dll-cons!</span><span class="err"> </span><span class="mi">0</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">check-equal?</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-fold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">0</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="mi">4</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">check-equal?</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-rfold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">c123</span><span class="p">)</span>
</span><span class='line'>  <span class="err">                </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">4</span><span class="err"> </span><span class="mi">3</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="mi">1</span><span class="err"> </span><span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">dll-test</span><span class="err"> </span><span class="nv">make-dll</span><span class="err"> </span><span class="nv">dll-cons!</span><span class="err"> </span><span class="nv">dll-snoc!</span>
</span><span class='line'>  <span class="err">          </span><span class="nv">dll-fold</span><span class="err"> </span><span class="nv">dll-rfold</span><span class="err"> </span><span class="nv">dll-reverse!</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Remember how we parameterize these tests over the implementation of the
functions. We’ll pass in different implementations later.) And, by the
way, this assumes we have this definition of doubly-linked-lists:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;dll&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">node</span><span class="err"> </span><span class="p">(</span><span class="nf">last</span><span class="err"> </span><span class="nv">element</span><span class="err"> </span><span class="nv">next</span><span class="p">)</span><span class="err"> </span><span class="o">#</span><span class="nv">:transparent</span><span class="err"> </span><span class="o">#</span><span class="nv">:mutable</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">dll</span><span class="err"> </span><span class="p">(</span><span class="nf">head</span><span class="err"> </span><span class="nv">tail</span><span class="p">)</span><span class="err"> </span><span class="o">#</span><span class="nv">:transparent</span><span class="err"> </span><span class="o">#</span><span class="nv">:mutable</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">make-dll</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">dll</span><span class="err"> </span><span class="no">#f</span><span class="err"> </span><span class="no">#f</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">((</span><span class="nf">make-dll-cons!</span>
</span><span class='line'>  <span class="err">          </span><span class="nv">dll-head</span><span class="err"> </span><span class="nv">node</span><span class="err"> </span><span class="nv">set-node-last!</span>
</span><span class='line'>  <span class="err">          </span><span class="nv">dll-tail</span><span class="err"> </span><span class="nv">set-dll-tail!</span><span class="err"> </span><span class="nv">set-dll-head!</span><span class="p">)</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">e</span><span class="err"> </span><span class="nv">l</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">head</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-head</span><span class="err"> </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">new</span><span class="err"> </span><span class="p">(</span><span class="nf">node</span><span class="err"> </span><span class="no">#f</span><span class="err"> </span><span class="nv">e</span><span class="err"> </span><span class="nv">head</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">when</span><span class="err"> </span><span class="nv">head</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">set-node-last!</span><span class="err"> </span><span class="nv">head</span><span class="err"> </span><span class="nv">new</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">unless</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-tail</span><span class="err"> </span><span class="nv">l</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">set-dll-tail!</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="nv">new</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">set-dll-head!</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="nv">new</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">dll-cons!</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">make-dll-cons!</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">dll-head</span><span class="err"> </span><span class="nv">node</span><span class="err"> </span><span class="nv">set-node-last!</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">dll-tail</span><span class="err"> </span><span class="nv">set-dll-tail!</span><span class="err"> </span><span class="nv">set-dll-head!</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">dll-snoc!</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">make-dll-cons!</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">dll-tail</span>
</span><span class='line'>  <span class="err">   </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">last</span><span class="err"> </span><span class="nv">element</span><span class="err"> </span><span class="nv">next</span><span class="p">)</span><span class="err"> </span><span class="p">(</span><span class="nf">node</span><span class="err"> </span><span class="nv">next</span><span class="err"> </span><span class="nv">element</span><span class="err"> </span><span class="nv">last</span><span class="p">))</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">set-node-next!</span><span class="err"> </span><span class="nv">dll-head</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">set-dll-head!</span><span class="err"> </span><span class="nv">set-dll-tail!</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">make-dll-fold</span><span class="err"> </span><span class="nv">dll-head</span><span class="err"> </span><span class="nv">node-next</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-fold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">node</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="nv">node</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="p">(</span><span class="nf">node-element</span><span class="err"> </span><span class="nv">node</span><span class="p">)</span>
</span><span class='line'>  <span class="err">            </span><span class="p">(</span><span class="nf">dll-fold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="p">(</span><span class="nf">node-next</span><span class="err"> </span><span class="nv">node</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">      </span><span class="nv">empty</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="err">λ </span><span class="p">(</span><span class="nf">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">list</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">dll-fold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="p">(</span><span class="nf">dll-head</span><span class="err"> </span><span class="nv">list</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">dll-fold</span><span class="err"> </span><span class="p">(</span><span class="nf">make-dll-fold</span><span class="err"> </span><span class="nv">dll-head</span><span class="err"> </span><span class="nv">node-next</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">dll-rfold</span><span class="err"> </span><span class="p">(</span><span class="nf">make-dll-fold</span><span class="err"> </span><span class="nv">dll-tail</span><span class="err"> </span><span class="nv">node-last</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>But, remember, my whole goal is to show silly ways to &#8220;solve&#8221; these
interview problems&#8230; so let’s think of a trick.</p>

<h1>The Trick</h1>

<p>An important trick that functional programmers should always be ready to
employ is delaying. Rather than actually doing work, just record that
you should do in the future, so future operations will act as-if the
operation has been done, or perhaps do (some) of it for you.</p>

<p>In this case, we’ll make dll-reverse! O(1) by simply recording that we
should consider the list reversed for all future uses.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;rdll-impl&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">rdll-reverse!</span><span class="err"> </span><span class="nv">l</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">set-rdll-reversed?!</span>
</span><span class='line'>  <span class="err">   </span><span class="nv">l</span><span class="err"> </span><span class="p">(</span><span class="nf">not</span><span class="err"> </span><span class="p">(</span><span class="nf">rdll-reversed?</span><span class="err"> </span><span class="nv">l</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This, of course, assumes that the rest of the doubly-linked-list code is
ready to pay attention to this flag. Luckily, it is pretty easy to do
that, without really writing anything again:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;rdll&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">struct</span><span class="err"> </span><span class="nv">rdll</span><span class="err"> </span><span class="p">(</span><span class="nf">reversed?</span><span class="err"> </span><span class="nv">dll</span><span class="p">)</span><span class="err"> </span><span class="o">#</span><span class="nv">:transparent</span><span class="err"> </span><span class="o">#</span><span class="nv">:mutable</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">make-rdll</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">rdll</span><span class="err"> </span><span class="no">#f</span><span class="err"> </span><span class="p">(</span><span class="nf">make-dll</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-syntax-rule</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define-rdll</span><span class="err"> </span><span class="p">(</span><span class="nf">id</span><span class="err"> </span><span class="nv">arg</span><span class="err"> </span><span class="o">...</span><span class="err"> </span><span class="nv">rl</span><span class="p">)</span><span class="err"> </span><span class="nv">reversed-dll</span><span class="err"> </span><span class="nv">normal-dll</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">id</span><span class="err"> </span><span class="nv">arg</span><span class="err"> </span><span class="o">...</span><span class="err"> </span><span class="nv">rl</span><span class="p">)</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">l</span><span class="err"> </span><span class="p">(</span><span class="nf">rdll-dll</span><span class="err"> </span><span class="nv">rl</span><span class="p">))</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">rdll-reversed?</span><span class="err"> </span><span class="nv">rl</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">reversed-dll</span><span class="err"> </span><span class="nv">arg</span><span class="err"> </span><span class="o">...</span><span class="err"> </span><span class="nv">l</span><span class="p">)</span>
</span><span class='line'>  <span class="err">      </span><span class="p">(</span><span class="nf">normal-dll</span><span class="err"> </span><span class="nv">arg</span><span class="err"> </span><span class="o">...</span><span class="err"> </span><span class="nv">l</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-rdll</span><span class="err"> </span><span class="p">(</span><span class="nf">rdll-cons!</span><span class="err"> </span><span class="nv">e</span><span class="err"> </span><span class="nv">rl</span><span class="p">)</span><span class="err"> </span><span class="nv">dll-snoc!</span><span class="err"> </span><span class="nv">dll-cons!</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-rdll</span><span class="err"> </span><span class="p">(</span><span class="nf">rdll-snoc!</span><span class="err"> </span><span class="nv">e</span><span class="err"> </span><span class="nv">rl</span><span class="p">)</span><span class="err"> </span><span class="nv">dll-cons!</span><span class="err"> </span><span class="nv">dll-snoc!</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-rdll</span><span class="err"> </span><span class="p">(</span><span class="nf">rdll-fold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">rl</span><span class="p">)</span><span class="err"> </span><span class="nv">dll-rfold</span><span class="err"> </span><span class="nv">dll-fold</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">define-rdll</span><span class="err"> </span><span class="p">(</span><span class="nf">rdll-rfold</span><span class="err"> </span><span class="nv">cons</span><span class="err"> </span><span class="nv">empty</span><span class="err"> </span><span class="nv">rl</span><span class="p">)</span><span class="err"> </span><span class="nv">dll-fold</span><span class="err"> </span><span class="nv">dll-rfold</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that that’s all setup, we can re-run the earlier tests with these
new functions:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;rdll-tests&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">dll-test</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">make-rdll</span><span class="err"> </span><span class="nv">rdll-cons!</span><span class="err"> </span><span class="nv">rdll-snoc!</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">rdll-fold</span><span class="err"> </span><span class="nv">rdll-rfold</span><span class="err"> </span><span class="nv">rdll-reverse!</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Conclusion</h1>

<p>This idea is the basis of a lot of efficient functional data structures.
For example, if you want to make append fast, then just store &#8220;append
nodes&#8221; in your &#8220;list&#8221;. (<a href="http://news.ycombinator.com/item?id=814632">These are called &#8220;conc&#8221;
lists.</a>) If you want to make
snoc/last fast, then store two lists—one starting from the head and one
starting from the tail—and deal with one going empty when you get to it.</p>

<h1>Exercises</h1>

<ol>
<li><p>In this code, I’ve used a functional/structure oriented approach. In
this case, an object-oriented approach could be more convenient for the
user, because then they would be inherently parameterized over the set
of doubly linked-list functions. For your homework, translate this idea
to an OO setting, where &#8220;fast reversible&#8221; lists and normal lists just
implement a common interface.</p></li>
<li><p>In this code, nodes and lists are distinguished from each other.
Rewrite it so there is no such distinction, while maintaining the O(1)
reversibility. (Hint: The hard part is telling each node that the list
is reversed simultaneously.) (Spoiler: Have them store a pointer to a
flag rather than a flag itself.)</p></li>
</ol>


<h1>Whole Program</h1>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span><span class="err"> </span><span class="nv">rackunit</span>
</span><span class='line'>  <span class="err">         </span><span class="nv">racket/list</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">&lt;dll&gt;</span>
</span><span class='line'>  <span class="nv">&lt;naive-impl&gt;</span>
</span><span class='line'>  <span class="nv">&lt;naive-tests&gt;</span>
</span><span class='line'>  <span class="nv">&lt;rdll&gt;</span>
</span><span class='line'>  <span class="nv">&lt;rdll-impl&gt;</span>
</span><span class='line'>  <span class="nv">&lt;rdll-tests&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2012-03-31-siq-reverse-dll.rkt">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Professor Layton and the Diabolical Box, Puzzle #132]]></title>
    <link href="http://jeapostrophe.github.com/blog/2011/06/30/professor-layton-and-the-diabolical-box-puzzle-132/"/>
    <updated>2011-06-30T00:00:00-06:00</updated>
    <id>http://jeapostrophe.github.com/blog/2011/06/30/professor-layton-and-the-diabolical-box-puzzle-132</id>
    <content type="html"><![CDATA[<p>I try to solve a puzzle of some kind every morning. I use
<a href="https://en.wikipedia.org/wiki/Sudoku">Sudoku</a>,
<a href="https://en.wikipedia.org/wiki/Picross">Picross</a>, and often, <a href="https://en.wikipedia.org/wiki/Professor_Layton">Professor
Layton</a>. Sometimes it is
convenient to write a program to solve some of the more annoying
&#8220;search&#8221; puzzles. I’ll post the Racket programs with a little bit of
commentary.</p>

<!-- more -->


<p>This is for <a href="http://tinyurl.com/6pjbzrs">Puzzle 132</a>. Here is the
puzzle:</p>

<blockquote><p>Two brothers have inherited their parents’ five-piece art collection.
According to the will, the older brother will get a set of paintings
worth twice what the younger brother gets. In order to ascertain the
value of the paintings, the brothers called in an appraiser, who valued
each painting as shown below. For his services, the appraiser was
promised the one painting left over after the brothers divided the art
according to their parents’ wishes.</p>

<p>Assuming that individual paintings can’t be divided, which one does
the appraiser get?</p></blockquote>

<p>There is then a picture of five paintings with prices underneath. They
are: A worth 20,000, B worth 60,000, C worth 55,000, D worth 45,000, E
worth 95,000.</p>

<p>I encoded this information into a vector in Racket:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;paintings&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">paintings</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">vector</span><span class="err"> </span><span class="mi">20</span><span class="err"> </span><span class="mi">60</span><span class="err"> </span><span class="mi">55</span><span class="err"> </span><span class="mi">45</span><span class="err"> </span><span class="mi">95</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We won’t keep track of the labels, we’ll just remember that, for
example, 0 is A and 4 is E. Also, we divide everything by 1,000 so we
don’t have to type so much.</p>

<p>The basic algorithm we’ll use is a trivial search: try assigning each
painting to each brother and stop when the value of the older brother’s
paintings is twice that of the younger.</p>

<p>The trick, however, is that we’ll represent the assignment as the older
brother’s set combined with the younger brother’s set. We’ll do this
simultaneously with a bit-vector, where the 1s indicate that the older
brother gets it and the 0s indicate that the younger brother does. We’ll
independently pick one painting which will be &#8220;left over&#8221; that the
appraiser will get. Here’s the main loop:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;solver&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">for*</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">assignment</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="p">(</span><span class="nf">add1</span><span class="err"> </span><span class="mi">31</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">       [</span><span class="nv">appraiser</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="p">(</span><span class="nf">vector-length</span><span class="err"> </span><span class="nv">paintings</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">older-value</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">assignment-&gt;value</span><span class="err"> </span><span class="nv">assignment</span><span class="err"> </span><span class="nv">appraiser</span><span class="err"> </span><span class="no">#t</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="nv">younger-value</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">assignment-&gt;value</span><span class="err"> </span><span class="nv">assignment</span><span class="err"> </span><span class="nv">appraiser</span><span class="err"> </span><span class="no">#f</span><span class="p">))</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">when</span><span class="err"> </span><span class="p">(</span><span class="nf">=</span><span class="err"> </span><span class="nv">older-value</span><span class="err"> </span><span class="p">(</span><span class="nf">*</span><span class="err"> </span><span class="mi">2</span><span class="err"> </span><span class="nv">younger-value</span><span class="p">))</span>
</span><span class='line'>  <span class="err">    </span><span class="p">(</span><span class="nf">return</span><span class="err"> </span><span class="nv">appraiser</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>One thing to note here: for* is like a nested for—we loop over the
assignments /and/ loop over every painting each round. (This, by the
way, means that we do twice as much work because we consider both
assignments for the appraiser’s painting.)</p>

<p>Two other cute things: First, we use a literal binary number to write
down the completely full set, but we have to add one to actually visit
it. Second, the assignment->value function (below) will take an argument
to determine whether to add up the 1s or the 0s. Here’s it’s definition</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;valuation&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">define</span><span class="err"> </span><span class="p">(</span><span class="nf">assignment-&gt;value</span><span class="err"> </span><span class="nv">assignment</span><span class="err"> </span><span class="nv">ignored</span><span class="err"> </span><span class="nv">which</span><span class="p">)</span>
</span><span class='line'>  <span class="err">  </span><span class="p">(</span><span class="nf">for/sum</span><span class="err"> </span><span class="p">(</span><span class="err">[</span><span class="nv">painting</span><span class="err"> </span><span class="p">(</span><span class="nf">in-range</span><span class="err"> </span><span class="p">(</span><span class="nf">vector-length</span><span class="err"> </span><span class="nv">paintings</span><span class="p">))</span><span class="err">]</span>
</span><span class='line'>  <span class="err">            </span><span class="o">#</span><span class="nv">:unless</span><span class="err"> </span><span class="p">(</span><span class="nf">=</span><span class="err"> </span><span class="nv">painting</span><span class="err"> </span><span class="nv">ignored</span><span class="p">))</span>
</span><span class='line'>  <span class="err">           </span><span class="p">(</span><span class="nf">if</span><span class="err"> </span><span class="p">(</span><span class="nf">eq?</span><span class="err"> </span><span class="nv">which</span><span class="err"> </span><span class="p">(</span><span class="nf">bitwise-bit-set?</span><span class="err"> </span><span class="nv">assignment</span><span class="err"> </span><span class="nv">painting</span><span class="p">))</span>
</span><span class='line'>  <span class="err">             </span><span class="p">(</span><span class="nf">vector-ref</span><span class="err"> </span><span class="nv">paintings</span><span class="err"> </span><span class="nv">painting</span><span class="p">)</span>
</span><span class='line'>  <span class="err">             </span><span class="mi">0</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The for/sum variant adds up the result of each iteration of the loop,
the #:unless clause skips the iteration where the appraiser’s painting
is considered, and the if determines which brother we’re considering.</p>

<p>If you know anything about Racket, there may be one more confusing thing
about the code in <valuation>&#8230; return! Expressions in Racket don’t
normally have non-local returns like that. How can we make the inner
area of the loop stop and return the appraiser painting that works? It’s
simple: bind return to an escape continuation:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;escape-continuation&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">let/ec</span><span class="err"> </span><span class="nv">return</span>
</span><span class='line'>  <span class="err">  </span><span class="nv">&lt;solver&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Was this faster or slower than doing it the old fashion way&#8230;? Who
knows.</p>

<p>Can you work out what the answer is&#8230;?</p>

<p>By the way, if you use this code at home, make sure you put the code in
this order:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;*&gt;</span> <span class="nv">::=</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">&lt;paintings&gt;</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="nv">&lt;valuation&gt;</span>
</span><span class='line'>  <span class="err"> </span>
</span><span class='line'>  <span class="p">(</span><span class="nb">vector-ref </span>
</span><span class='line'>  <span class="err"> </span><span class="p">(</span><span class="nf">vector</span><span class="err"> </span><span class="ss">&#39;A</span><span class="err"> </span><span class="ss">&#39;B</span><span class="err"> </span><span class="ss">&#39;C</span><span class="err"> </span><span class="ss">&#39;D</span><span class="err"> </span><span class="ss">&#39;E</span><span class="p">)</span>
</span><span class='line'>  <span class="err"> </span><span class="nv">&lt;escape-continuation&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jeapostrophe.github.com/downloads/code/2011-06-30-professor-layton-and-the-diabolical-box-puzzle-132.rkt">Download</a></p>
]]></content>
  </entry>
  
</feed>
